[{"title":"与独立应用程序的比较","type":0,"sectionRef":"#","url":"adguard-browser-extension/comparison-standalone/","content":"与独立应用程序的比较 信息 这篇文章是关于 AdGuard 浏览器扩展，它只能保护用户的浏览器。 要全面保护设备，请下载 AdGuard 应用程序。 AdGuard 独立程序相对于浏览器扩展程序的主要优势在于，该程序可以在每个浏览器和几乎所有应用程序中拦截广告。 您可以同时使用不同的浏览器，该应用程序同样可以高效地过滤所有浏览器中的广告和在线威胁。 第二个区别是，基于扩展的广告拦截程序可能会受到浏览器的严格限制。 浏览器扩展必须符合浏览器的政策，其中广告拦截可能会受到限制。 因此，扩展程序不支持某些类型的过滤规则。 而桌面应用程序的功能不受限制，因此它们的过滤质量更好。 AdGuard 浏览器扩展免费且易于安装，并具有用于阻止广告和对抗在线威胁的过滤器，而完整的应用程序更强大，还具有一系列高级功能。 所有差异请参阅下表。 1 受浏览器的限制，且仅能在对应浏览器中有效； 2 扩展无法检测到来自其他扩展的请求。 如果恶意或跟踪扩展请求服务器向用户展示广告或跟踪个人活动记录，那么 AdGuard 浏览器扩展程序将无法阻止该请求； 3 由于某些浏览器限制，扩展程序无法阻止所有类型的广告和威胁。 有些元素可能会进入页面并减慢加载速度。 此外，与基于浏览器的广告拦截器不同，AdGuard 应用程序会在广告加载到浏览器之前进行拦截。 这样可以节省流量并加快页面加载速度。","keywords":""},{"title":"Compatibility with the standalone app","type":0,"sectionRef":"#","url":"adguard-browser-extension/compatibility/","content":"","keywords":""},{"title":"AdGuard 浏览器助手​","type":1,"pageTitle":"Compatibility with the standalone app","url":"adguard-browser-extension/compatibility/#adguard-浏览器助手","content":" AdGuard Browser Assistant is a browser extension that works and feels just like AdGuard Browser Extension, but it's much lighter and doesn't interfere with the desktop apps. You can read more about Browser Assistant for Windows or Mac, or download it from our website. AdGuard Browser Assistant is available in all major browsers. "},{"title":"可用性","type":0,"sectionRef":"#","url":"adguard-browser-extension/availability/","content":"可用性 信息 这篇文章是关于 AdGuard 浏览器扩展，它只能保护用户的浏览器。 要全面保护设备，请下载 AdGuard 应用程序。 AdGuard 浏览器扩展是一个免费扩展，可在五个流行浏览器中使用，包括 Chrome、Firefox、Edge、Opera 和 Yandex 浏览器。 用户可以在浏览器的在线商店和我们的官网上轻松地找到它。 浏览器扩展包括基本的广告拦截功能，但无法与功能完整的桌面程序相比，如 AdGuard Windows 版和 AdGuard Mac 版 。 注意 我们有一个独立的 Safari 扩展。 自从 Safari 13发布以来，大多数广告拦截扩展都遇到了严重的问题，并且其中许多已停止运行。 我们不得不为 Safari 浏览器开发一个独立的扩展（与本文描述的扩展相比有一些差异）。 请记住，各种浏览器扩展的功能都严格受制于浏览器本身。因此，如果您想获得全面的保护，还是建议安装单独的程序。 这是有原因的。","keywords":""},{"title":"扩展的主菜单","type":0,"sectionRef":"#","url":"adguard-browser-extension/features/main-menu/","content":"扩展的主菜单 信息 这篇文章是关于 AdGuard 浏览器扩展，它只能保护用户的浏览器。 要全面保护设备，请下载 AdGuard 应用程序。 用户可以单击浏览器工具栏上的扩展程序图标来访问扩展程序的主页面。 在主页面上，可以手动隐藏页面上的任何元素（相应的规则将添加到「用户规则」中），打开「过滤日志」查看有关浏览器流量的完整信息并随时阻止请求，或者查看网站的安全报告。 此外，还可以针对任何网站提交投诉（例如，如果页面上有未被拦截的广告，我们的过滤工程师将审查报告并修复问题）并查看应用的阻止规则的统计信息。 浏览器发出的所有 Web 请求都显示在「过滤日志」中，包含每个请求的详细信息。 例如，用户在「过滤日志」中可以更快捷地查看被 AdGuard 浏览器扩展阻止的请求。 不仅如此，还可以一键阻止任何请求，或将以前阻止的请求添加到白名单。 「过滤日志」还提供多种网络请求排序选项，有助于用户创建自己的过滤规则。 您可以选择主菜单中的相应项目或从设置页面（在「其他设置」选项卡中）打开「过滤日志」。 单击扩展程序主菜单右上角的图标，您可以打开扩展程序设置或暂停保护。","keywords":""},{"title":"过滤器","type":0,"sectionRef":"#","url":"adguard-browser-extension/features/filters/","content":"","keywords":""},{"title":"自定义过滤器​","type":1,"pageTitle":"过滤器","url":"adguard-browser-extension/features/filters/#自定义过滤器","content":"虽然其他过滤器组的功能或多或少可以预测，但一个名为「自定义」的组可能会引起额外的问题。  在此选项卡中，用户可以添加默认情况下扩展中不存在的过滤器。 互联网上有很多公开的过滤器。 除此之外，您还可以创建和添加自己的过滤器。 其实，用户可以创建任意过滤器组并按照自己喜欢的方式自定义拦截广告。 要添加过滤器，只需要单击「添加自定义过滤器」，输入要添加的过滤器的 URL 或文件路径，然后单击「下一步」。  "},{"title":"用户规则​","type":1,"pageTitle":"过滤器","url":"adguard-browser-extension/features/filters/#user-rules","content":"「用户规则」是另一个可以帮助用户自定义广告拦截的工具。  有几种方法来添加新规则。 第一个是，直接键入规则，但用户需要使用一定的规则语法。 您也可以从文本文件导入现成的过滤器列表。 请确保不同的规则用换行符分隔。注意，导入现成的过滤器列表最好在「自定义过滤器」选项卡完成。 另外，您也可以导出自己的过滤规则。 此项适用于在浏览器或设备之间传输规则列表。 当您将一个网站添加到白名单（下文将详细介绍）或使用助手工具隐藏页面上的某个元素时，相应的规则也会保存在用户规则中。 "},{"title":"白名单​","type":1,"pageTitle":"过滤器","url":"adguard-browser-extension/features/filters/#白名单","content":"「白名单」用于排除某些网站的过滤。 拦截规则不适用于列表中的网站。  「白名单」也可以反转使用：可以在除此列表的网站之外的任何地方放行广告。 为此，请激活「颠倒白名单」选项。  用户还可以导入和导出现有的白名单。 例如，如果您想在各个浏览器中应用相同的白名单，那么这个功能就很有用。 "},{"title":"其他功能","type":0,"sectionRef":"#","url":"adguard-browser-extension/features/other-features/","content":"","keywords":""},{"title":"常规​","type":1,"pageTitle":"其他功能","url":"adguard-browser-extension/features/other-features/#general","content":"在「常规」选项卡中，用户可以允许搜索广告和网站的自我推广，启用自动激活特定语言过滤器的，指明过滤器更新间隔等。  此外，还可以启用「钓鱼和恶意保护」。 您可以单击「导出设置」来保存设置配置。 设置将保存为 .json 文件。 要上传以前保存的设置配置，请使用「导入设置」功能。 用户还可以使用该功能在不同的设置配置文件之间快速切换，甚至可以在不同的浏览器之间传输设置配置。 "},{"title":"附加设置​","type":1,"pageTitle":"其他功能","url":"adguard-browser-extension/features/other-features/#misc","content":"「附加设置」部分包含一系列与广告拦截过程和应用程序可用性有关的各种设置。  从此选项卡中，您可以激活优化的过滤器，启用扩展程序更新通知，打开「过滤日志」，清除已阻止的广告和跟踪器的统计信息。 此外，用户可以选择发送应用规则的统计数据以帮助我们开发过滤器：触发哪些规则、在哪些网站上触发以及触发频率。 该选项默认为禁用，因为我们不会在未经同意的情况下收集用户数据。 但是，如果启用该功能，所有数据都将匿名发送。 "},{"title":"关于​","type":1,"pageTitle":"其他功能","url":"adguard-browser-extension/features/other-features/#about","content":"在「关于」部分中，用户可以找到有关当前版本的信息、EULA 和隐私政策的链接以及 GitHub 上浏览器扩展存储库的链接。  "},{"title":"安装方式","type":0,"sectionRef":"#","url":"adguard-browser-extension/installation/","content":"","keywords":""},{"title":"在 Google 浏览器或 Chromium 内核浏览器上安装 AdGuard AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-google-浏览器或-chromium-内核浏览器上安装-adguard-adguard-浏览器扩展","content":"在 Chrome Web Store 打开本扩展页面并点击「添加到 Chrome」。  在打开的对话框内，点击「添加扩展」。  "},{"title":"在 Opera 浏览器上安装 AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-opera-浏览器上安装-adguard-浏览器扩展","content":"打开 addons.opera.com 页面。  点击「添加到 Opera」。 "},{"title":"在 Firefox 浏览器上安装 AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-firefox-浏览器上安装-adguard-浏览器扩展","content":"打开 addons.mozilla.org 网页。  点击「添加到 Firefox」。 "},{"title":"在 Yandex 浏览器上安装 AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-yandex-浏览器上安装-adguard-浏览器扩展","content":"点击位于浏览器右上角的浏览器设置按钮，然后选择下拉菜单内的「附件」。 下滚以查找 AdGuard，然后点击「安装」。  "},{"title":"在 Microsoft Edge 上安装 AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-microsoft-edge-上安装-adguard-浏览器扩展","content":"在 Edge 浏览器插件商店中找到 AdGuard 浏览器扩展，然后点击「获取」。  在打开的对话框内，点击「添加扩展」。  或者，用户还可以从 Chrome Web 应用店安装适用于 Edge 的 AdGuard 浏览器扩展。 在 Edge 浏览器中打开 Chrome 的网页，在页面顶部的横幅上选择「允许来自其他应用商店的扩展程序」（Allow extensions from other stores）。  在弹出的对话框中，点击「允许」（Allow）。  点击「添加到 Chrome」（Add to Chrome）。  在打开的对话框窗口内，点击「添加扩展」以安装 AdGuard 浏览器扩展。  "},{"title":"在 Safari 浏览器上安装 AdGuard 浏览器扩展​","type":1,"pageTitle":"安装方式","url":"adguard-browser-extension/installation/#在-safari-浏览器上安装-adguard-浏览器扩展","content":"适用于 Safari 的 AdGuard 不是一般意义上的浏览器扩展。 您可以在知识库文章中阅读更多相关信息， 或者您可以从本网页下载安装文件。 "},{"title":"隐身模式","type":0,"sectionRef":"#","url":"adguard-browser-extension/features/stealth-mode/","content":"隐身模式 信息 这篇文章是关于 AdGuard 浏览器扩展，它只能保护用户的浏览器。 要全面保护设备，请下载 AdGuard 应用程序。 「隐身模式」旨在确保个人敏感数据免受在线跟踪器和欺诈者的侵害。 在隐身模式下，用户可以阻止网站看到网络搜索记录，还可以自动删除第三方和网站自己的 Cookie 等。 我们有一篇文章专门介绍这些功能。 注意 由于技术限制，部分的「隐身模式」选项可以在应用程序里使用，但无法在浏览器扩展中使用。","keywords":""},{"title":"受浏览器保护的网页","type":0,"sectionRef":"#","url":"adguard-browser-extension/protected-pages/","content":"","keywords":""},{"title":"Chromium 浏览器限制​","type":1,"pageTitle":"受浏览器保护的网页","url":"adguard-browser-extension/protected-pages/#chromium-浏览器限制","content":"基于 Chromium 的浏览器（如 Google 浏览器）会维护一个不允许扩展程序访问的受限域名列表。 这些域名包括： clients.google.comclients[0-9]+.google.comsb-ssl.google.com以 chrome://、chrome-extension://、https://chrome.google.com/webstore/ 开头的 URLPDF 文件禁用 Javascript 的页面安全警告页面错误页面，如 404 错误和网络错误以 view-source: 或 data: 开头的 URL "},{"title":"Firefox 浏览器限制​","type":1,"pageTitle":"受浏览器保护的网页","url":"adguard-browser-extension/protected-pages/#firefox-浏览器限制","content":"同样，Firefox 浏览器也有自己的一组不允许运行扩展程序的受限域名。 这些受限域名包括： accounts-static.cdn.mozilla.netaccounts.firefox.comaddons.cdn.mozilla.net --addons.mozilla.orgapi.accounts.firefox.comcontent.cdn.mozilla.netdiscovery.addons.mozilla.orginstall.mozilla.orgoauth.accounts.firefox.comprofile.accounts.firefox.comsupport.mozilla.orgsync.services.mozilla.com "},{"title":"修改 Firefox 浏览器的限制​","type":1,"pageTitle":"受浏览器保护的网页","url":"adguard-browser-extension/protected-pages/#修改-firefox-浏览器的限制","content":"更改高级设置可能会影响 Firefox 浏览器的稳定性和安全性。 仅推荐高级用户更改设置。 如果您已了解相关风险，但仍希望启用受保护页面中被禁止的扩展程序，请按照以下步骤操作： 点击菜单按钮 →「扩展与主题」→「扩展程序」。单击要在受限制网站上启用的扩展（本例中为 AdGuard）。在「在受限站点上运行」中选择「允许」。 或者，您也可以： 打开一个新标签页，在地址栏中输入 about:config。按「返回」。 您可能会收到警告。 在这种情况下，请单击「接受风险并继续」。搜索 extensions.webextensions.restrictedDomains。 如果您找不到此首选项，可以直接创建。 只需选择「Boolean」类型，然后单击「+」添加即可。单击该首选项旁边的切换按钮，将其值更改为「false」。重启 Firefox 浏览器。 有关这方面的更多信息，请阅读 Mozilla 支持网站的文章。 "},{"title":"安装","type":0,"sectionRef":"#","url":"adguard-content-blocker/installation/","content":"安装 信息 这篇文章是关于 AdGuard 内容拦截器，它只能保护三星浏览器或 Yandex 浏览器。 如果需要全面保护设备，请下载 AdGuard 应用程序。 AdGuard 内容拦截器可在五个商店上购买：Google Play、三星 Galaxy 商店、华为商店、Aptoide 和 F-Droid。 要从 Google Play 安装 AdGuard 内容拦截器，请搜索「AdGuard 内容拦截器」并点击「安装」。 注意 注意：AdGuard 内容拦截器可在两种浏览器中使用：Yandex 浏览器和三星浏览器。 安装完成后，点击「打开」运行应用。 如果用户在设备上已安装适当的浏览器，应用程序将要求您启用 AdGuard。 如果没有一个适当的浏览器，用户会被提示选择并安装一个。 安装浏览器后，用户可以启动 AdGuard 内容拦截器，并在浏览器里拦截广告和跟踪器。","keywords":""},{"title":"应用管理","type":0,"sectionRef":"#","url":"adguard-for-android/features/app-management/","content":"","keywords":""},{"title":"“无问题”与“有问题”的应用​","type":1,"pageTitle":"应用管理","url":"adguard-for-android/features/app-management/#无问题与有问题的应用","content":"过滤开启时，大部分应用都可正常工作。 对于此类应用，它们的流量经过 AdGuard 路由，默认进行过滤。 某些应用程序（如下载管理器、收音机、UID 1000 和 1001 的系统应用程序（如 Google Play 服务））存在“问题”，通过 AdGuard 路由时可能会发生异常。 这就是在尝试路由或过滤所有应用程序时，用户可能会看到以下警告的原因。  要确保设备上安装的所有应用程序正常运行，我们强烈建议您只通过 AdGuard 路由“无问题”的应用程序。 您可以在「设置」→「常规」→「高级」→「低级设置」→「保护」→「排除应用」中查看不建议过滤的应用程序的完整列表。 "},{"title":"功能概览","type":0,"sectionRef":"#","url":"adguard-content-blocker/overview/","content":"功能概览 信息 这篇文章是关于 AdGuard 内容拦截器，它只能保护三星浏览器或 Yandex 浏览器。 如果需要保护整个设备，请下载 AdGuard 应用程序 AdGuard 有两款 Android 应用：即 AdGuard Android 版和 AdGuard 内容拦截器。 AdGuard Android 版的功能更广泛：可拦截浏览器和应用内的广告，跟踪器及烦人的内容，使用域名级别的过滤器拦截，还支持用户规则。 AdGuard 内容拦截器的功能有限。 由于应用商店的政策，完整的广告拦截器无法引入 Google Play。 Google Play 禁止“拦截或干扰其它应用托管广告的应用”。 因此，AdGuard Android 版只能在 AdGuard 的官方网站上下载。 作为替代方案，Google 向开发人员提供内容拦截 API。 该 API 有严格的限制且当前仅有两个浏览器支持：即 Yandex 浏览器和三星浏览器。 其它 AdGuard 产品支持的许多复杂过滤规则不适用于此 API。 AdGuard 内容拦截器的设计符合 Google Play 政策框架。 与其它 AdGuard 产品比，AdGuard 内容拦截器的广告拦截功能较少： AdGuard 内容拦截器仅工作在支持内容拦截技术的浏览器内。 当前有两个浏览器：即 Yandex 浏览器和三星浏览器。在现有技术内，AdGuard 内容拦截器的功能有限：如无法拦截应用或其它浏览器内的广告和跟踪器，没有过滤日志且不支持域名级别的过滤。 不过，AdGuard 内容拦截器有 35 个过滤器，可在两个支持的浏览器内拦截广告，跟踪器和烦人的内容。 用户也可通过选择「针对特定语言的过滤器」或添加自定义规则以自定义广告拦截。 AdGuard 内容拦截器是一款免费开源的软件。 在 GitHub 上可以查看源代码。 为了获得更好更可定制的广告拦截体验，请尝试使用功能齐全的 Android 应用。 AdGuard Android 版可在官网下载。","keywords":""},{"title":"How to export logs from the background page","type":0,"sectionRef":"#","url":"adguard-browser-extension/solving-problems/logs/","content":"","keywords":""},{"title":"Exporting logs from the background page in the extension​","type":1,"pageTitle":"How to export logs from the background page","url":"adguard-browser-extension/solving-problems/logs/#exporting-logs-from-the-background-page-in-the-extension","content":""},{"title":"Chrome 浏览器​","type":1,"pageTitle":"How to export logs from the background page","url":"adguard-browser-extension/solving-problems/logs/#chrome-浏览器","content":"Open AdGuard Browser Extension and, if possible, repeat the actions that led to the error. Note the exact time when the error occurred. Navigate to chrome://extensions. Enable Developer mode. Click background.html. Open the tab Console. Open the context menu and select Save as…. "},{"title":"Firefox 浏览器​","type":1,"pageTitle":"How to export logs from the background page","url":"adguard-browser-extension/solving-problems/logs/#firefox-浏览器","content":"Open AdGuard Browser Extension and, if possible, repeat the actions that led to the error. Note the exact time when the error occurred. Navigate to about:addons. Click Debug Add-ons. Click Inspect. Go to the tab Console. Click Save all Messages to File. "},{"title":"Sending logs​","type":1,"pageTitle":"How to export logs from the background page","url":"adguard-browser-extension/solving-problems/logs/#sending-logs","content":"注意 AdGuard is committed to protecting your privacy. We strictly follow our Privacy Policy and do not collect any private information about users. Before sending your logs to the support team, please review the file as it may contain additional information that you don’t want to share. If it contains such personal information, we recommend that you delete it first. Now that you have collected the logs, please follow these steps to submit them to our development team: Report the bug on GitHub.Send your archive with logs and playback time to devteam@adguard.com and add a link to your GitHub issue. You can also upload the archive to Google Drive and add the link to it instead of attaching the file. "},{"title":"免费版和完整版","type":0,"sectionRef":"#","url":"adguard-for-android/features/free-vs-full/","content":"免费版和完整版 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 AdGuard Android 版有免费版和付费版两个版本。 付费版扩展 AdGuard 的功能范围： 「拦截应用内的广告」功能让用户拦截非浏览器应用内的广告。 您可以在应用管理内指定要过滤的应用程序。 注意 AdGuard 使用自己的无广告媒体播放器拦截 YouTube 视频内的广告。 要打开媒体播放器，请先启用 YouTube 应用，然后与 AdGuard 共享视频。 这是免费功能。 「跟踪保护」功能通过拦截跟踪请求、在线计数器、UTM 标签、分析系统等元素增强个人隐私。 有关跟踪保护的更多信息 「安全浏览」在用户访问危险网站前发出警告。 有关安全浏览的更多信息 「自定义过滤器和用户规则」让用户添加自己的过滤规则和第三方过滤器以精细调整广告拦截。 有关过滤器的更多信息 「用户脚本」让用户扩展浏览器的功能范围，使用 AdGuard Extra 防止广告被重新注入。 有关用户脚本的更多信息 要获得这些功能，您可以购买许可证。 如何激活许可证","keywords":""},{"title":"助手","type":0,"sectionRef":"#","url":"adguard-for-android/features/assistant/","content":"","keywords":""},{"title":"如何访问助手​","type":1,"pageTitle":"助手","url":"adguard-for-android/features/assistant/#如何访问助手","content":"在 Android 设备上，从屏幕顶部向下滑动以打开通知栏。找到并「展开」AdGuard 通知。  点击「助手」。  "},{"title":"如何使用助手​","type":1,"pageTitle":"助手","url":"adguard-for-android/features/assistant/#如何使用助手","content":"打开助手后，用户会看到两个标签：「应用程序」和「网站」。 它们分别包含最近使用的应用程序和网站列表。  "},{"title":"应用程序标签​","type":1,"pageTitle":"助手","url":"adguard-for-android/features/assistant/#应用程序标签","content":"选择应用程序后，我们以 Chrome 浏览器为例，您将看到可执行的选项。  最新活动​ 您将进入 AdGuard 应用程序，查看有关 Chrome 浏览器的最近1万次请求的详细信息。  App 数据统计信息​ 您将进入 AdGuard 应用程序，查看有关 Chrome 浏览器的详细统计信息： 在 Chrome 浏览器中拦截的广告和跟踪器数量通过阻止 Chrome 浏览器的广告或跟踪请求而保存的数据Chrome 浏览器发送请求的公司 应用管理​ 您将进入 AdGuard 应用程序屏幕，在此可以禁用该应用程序的 AdGuard 保护。 防火墙设置​ 您将进入 AdGuard 屏幕，在这里用户可以更改应用程序的防火墙设置，这意味着您可以管理应用程序的互联网连接。 "},{"title":"网站标签​","type":1,"pageTitle":"助手","url":"adguard-for-android/features/assistant/#网站标签","content":" 选择网站（我们以 google.com 为例），用户会看到可以执行的选项。  添加到白名单​ 点击此选项立即将 “google.com” 添加到白名单，并且 AdGuard 将不再对其进行过滤（这意味着网站无法阻止广告和跟踪器）。 最新活动​ 您将进入 AdGuard 应用程序，查看向 google.com 的最近1万次请求的详细信息。  网站统计信息​ 您将进入 AdGuard 应用程序，查看 google.com 的详细统计信息： 拦截的 google.com 广告和跟踪请求的数量通过阻止对 google.com 的广告和跟踪请求而保存的数据向 google.com 发送请求的应用程序有关 google.com 子域的信息 "},{"title":"与 AdGuard VPN 整合","type":0,"sectionRef":"#","url":"adguard-for-android/features/integration-with-vpn/","content":"与 AdGuard VPN 整合 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 Android 版 AdGuard 创建本地 VPN 以过滤流量。 因此，在启用 Android 版 AdGuard 时，用户不能启动其他 VPN 服务。 不过，AdGuard 和 AdGuard VPN 都有集成模式，可以一起运作。 在集成模式下，AdGuard VPN 作为一个出站代理服务器，通过该服务器，AdGuard 广告拦截程序路由流量。 这允许 AdGuard 创建一个 VPN 界面并在本地进行广告和跟踪器拦截，而AdGuard VPN 通过远程服务器路由所有流量。 禁用 AdGuard VPN 后，AdGuard 停止将其用作出站代理。 如果用户禁用 AdGuard，AdGuard VPN 将通过自己的 VPN 界面路由流量。 如果您安装了 AdGuard 广告拦截程序和 AdGuard VPN，广告拦截程序会检测到 VPN 服务并自动启用「与 AdGuard VPN 集成」。 反过来也是一样的。 请注意，如果您已启用集成模式，您将无法从 AdGuard VPN 管理应用程序排除项和连接到 DNS 服务器。 您可以通过「设置」→「过滤」→「网络」→「代理」→「通过代理运行的应用」指定要通过 VPN 隧道路由的应用程序。 选择 DNS 服务器，请打开「AdGuard」→「保护」→「DNS 保护」→「DNS 服务器」。","keywords":""},{"title":"烦人元素拦截","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/annoyance-blocking/","content":"烦人元素拦截 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 跟踪保护模块可通过点击底部屏幕的「保护」标签（屏幕底部左起第二个图标）并选择「烦人元素拦截」访问。 此功能是基于 AdGuard 的烦人元素过滤器之上且允许用户拦截弹窗，在线协助窗口，Cookie 通知，移动应用下载提示以及那些非广告影响用户在线体验的烦人元素。 了解更多关于烦人元素过滤器的信息","keywords":""},{"title":"广告拦截","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/ad-blocking/","content":"广告拦截 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 广告拦截模块可通过点击底部屏幕的「保护」标签（屏幕底部左起第二个图标）并选择「广告拦截」访问。 该功能通过应用广告拦截和特定语言过滤器来阻止广告。 要了解广告拦截的机制，可以阅读专门的文章。 基本保护可有效拦截大多数网站上的广告。 如果要自定义广告拦截，可以执行以下操作： 开启适当的特定语言过滤器，它们包含拦截特定语言网站上的广告的过滤规则 添加网站到白名单，AdGuard 不会过滤这些网站。 创建用户规则，AdGuard 将应用它们到指定的网站上。 了解关于创建自己过滤规则的更多详情","keywords":""},{"title":"防火墙","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/firewall/","content":"","keywords":""},{"title":"全局防火墙规则​","type":1,"pageTitle":"防火墙","url":"adguard-for-android/features/protection/firewall/#全局防火墙规则","content":"该设置让用户控制整个设备的互联网连接。  这些规则应用到设备上的所有应用程序，除非您设置自定义规则。 "},{"title":"自定义防火墙规则​","type":1,"pageTitle":"防火墙","url":"adguard-for-android/features/protection/firewall/#自定义防火墙规则","content":"用户可以控制特定应用程序的上网权限，限制用户认为不值得信任的应用程序的权限，或者相反，解除对那些你想规避全局防火墙规则的应用程序的阻止。 打开「自定义防火墙规则」。 在「具有自定义规则的应用」下，点击「添加应用」。 选择您想要设置单独规则的应用程序。 在「可用的自定义规则」中，选择要配置的规则并点击「+」。 相应规则会随之出现在「已应用的自定义规则」中。 如您需要拦截特定类型的连接，请切换到左侧。 如您要允许它，请保持开启状态。 自定义规则会优先于全局规则：即您在「全局防火墙规则」内所在的更改不会影响此应用。 要从「自定义规则」移除规则或应用，请将其滑动到左侧。 "},{"title":"Notifications​","type":1,"pageTitle":"防火墙","url":"adguard-for-android/features/protection/firewall/#notifications","content":"If enabled, this feature notifies you when an app tries to break one of the Firewall rules set for that app (for example, to access mobile data when it shouldn’t). You can turn notifications on and off for all apps or for each app separately. Tap the notification to access the app’s Firewall settings, or temporary disable all Firewall rules for that app by tapping the corresponding button in the notification. You can also mute all Firewall notifications for the app by tapping the Mute button in the notification for that app. Note that if notifications for multiple apps would be displayed, they will be bundled into a single notification instead. "},{"title":"浏览安全","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/browsing-security/","content":"浏览安全 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 浏览安全模块可以通过点击底部屏幕的「保护」标签（屏幕底部左起第二个图标）并选择「浏览安全」访问。 浏览安全功能还能保护用户免受恶意软件和钓鱼网站的侵害。 该功能还会警告用户有关潜在的恶意软件。 如果用户要访问一个危险网站，浏览安全功能发出以下警告： 危险 请注意：Android 版 AdGuard 不是一款防病毒程序。 它既无法阻止病毒下载，也无法删除已下载的病毒。 要全面保护设备，我们建议将 AdGuard 与杀毒软件结合使用。 浏览安全功能是安全的：AdGuard 无法查看用户访问什么网站。 应用程序使用哈希前缀而不是 URL 来检查网站的安全性。 在本文了解更多有关浏览安全功能的工作原理。","keywords":""},{"title":"快捷操作","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/firewall/quick-actions/","content":"快捷操作 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 快速操作可在「防火墙」模块内找到，具体操作为，点击「保护」标签（屏幕顶部左起第二个图标），然后选择「防火墙」即可。 快速操作是基于「最近活动」（可在「统计」内找到）的请求之上. 此部分显示最近连接到互联网的应用。 如果您发现有某个应用程序根本不应该连接互联网，或者您最近没有使用过某个应用程序，可以立即阻止其访问权限。 启用「防火墙」模块后，才能设置连接权限。","keywords":""},{"title":"跟踪保护","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/tracking-protection/","content":"跟踪保护 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 跟踪保护模块可通过点击底部屏幕的「保护」标签（屏幕底部左起第二个图标）并选择「跟踪保护」访问。 「跟踪保护」（以前被称为「隐身模式」）可防止网站收集个人数据，如 IP 地址、浏览器和操作系统信息、屏幕分辨率以及用户访问或重定向的页面。 使用该功能用户还可以阻止识别 Cookie。网站用这些 Cookie 来标记浏览器、保存个人设置和用户偏好，或识别在下次访问时识别他。 「跟踪保护」有三个预先配置的隐私保护级别（「标准」、「高」和「强」）和一个用户自定义级别（「自定义」）。 以下是预配置级别的功能： 标准 「拦截跟踪器」 此功能使用「AdGuard 防跟踪保护过滤器」，保护用户免受在线计数器和网络分析工具的侵扰。 「要求网站不进行跟踪」 此功能将向用户访问的网站发送 Global Privacy Control 和 Do Not Track 信号，要求网页应用程序禁用跟踪用户的活动。 「移除 X-Client-Data 头部」 此功能禁止 Chrome 浏览器向 Google 域名（包括 DoubleClick 和 Google Analytics）发送有关其版本和修改的信息。 高 「拦截跟踪器」 此功能使用「AdGuard 防跟踪保护过滤器」，保护用户免受在线计数器和网络分析工具的侵扰。 「从 URL 中删除跟踪参数」 此功能使用「AdGuard URL 跟踪过滤器」从网页 URL 中删除跟踪参数，例如 utm_* 和 fb_ref。 「隐藏您的搜索记录」 此功能隐藏用户对访问网站的查询，防止搜索引擎曝光。 「要求网站不进行跟踪」 此功能将向用户访问的网站发送 Global Privacy Control 和 Do Not Track 信号，要求网页应用程序禁用跟踪用户的活动。 「自销毁第三方 Cookies」 此功能将第三方 Cookie 的寿命限制为180分钟。 警告 此功能会强制第三方 Cookie 过期，然后将其全部删除。 这包括用户通过社交网络或其他第三方服务进行的登录。 有些网站可能会要求用户定期重新登录，或遇到其他与 Cookie 有关的问题。 要仅阻止跟踪 Cookie，请使用 「标准」保护级别。 「移除 X-Client-Data 头部」 此功能禁止 Chrome 浏览器向 Google 域名（包括 DoubleClick 和 Google Analytics）发送有关其版本和修改的信息。 强（以前被称为「终极」） 「拦截跟踪器」 此功能使用「AdGuard 防跟踪保护过滤器」，保护用户免受在线计数器和网络分析工具的侵扰。 「从 URL 中删除跟踪参数」 此功能使用「AdGuard URL 跟踪过滤器」从网页 URL 中删除跟踪参数，例如 utm_* 和 fb_ref。 「隐藏您的搜索记录」 此功能隐藏用户对访问网站的查询，防止搜索引擎曝光。 「要求网站不进行跟踪」 此功能将向用户访问的网站发送 Global Privacy Control 和 Do Not Track 信号，要求网页应用程序禁用跟踪用户的活动。 「自销毁第三方 Cookies」 此功能将第三方 Cookie 的寿命限制为180分钟。 警告 此功能会强制第三方 Cookie 过期，然后将其全部删除。 这包括用户通过社交网络或其他第三方服务进行的登录。 有些网站可能会要求用户定期重新登录，或遇到其他与 Cookie 有关的问题。 要仅阻止跟踪 Cookie，请使用 「标准」保护级别。 「拦截 WebRTC」 该功能拦截 WebRTC，这是一个已知的漏洞，即使用户使用代理或 VPN，也会泄露真实 IP 地址。 「拦截推送 API」 此功能防止浏览器接收来自服务器的推送消息。 「拦截定位 API」 此功能可防止浏览器访问 GPS 数据并确定用户的位置。 「隐藏第三方 Referer」 此功能防止第三方知道用户访问的网站. 它隐藏包含初始页面 URL 的 HTTP 标头，代之以默认或自定义标头，用户可以进行设置。 「隐藏 User-Agent」 该功能可移除 User-Agent 标头中的识别信息，信息通常包括浏览器名称和版本、操作系统和语言设置。 「移除 X-Client-Data 头部」 此功能禁止 Chrome 浏览器向 Google 域名（包括 DoubleClick 和 Google Analytics）发送有关其版本和修改的信息。 用户可以在「跟踪保护」中调整设置，并进行自定义配置。 每个设置都有说明，可以帮助您了解其作用。 进一步了解「跟踪保护」设置的作用，请谨慎使用，因为有些设置会干扰网站和浏览器扩展的功能。","keywords":""},{"title":"有 Root 权限的设备","type":0,"sectionRef":"#","url":"adguard-for-android/features/rooted/","content":"有 Root 权限的设备 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 由于 Android 操作系统的安全措施，AdGuard 的一些功能只能在有 Root 权限的设备上使用。 以下是具体列表： 大多数应用程序中的「HTTPS 过滤」需要将 CA 证书安装到系统存储上，因为大多数应用程序不信任用户存储中的证书。 只有在 Root 设备上才能将证书安装到系统存储区。「自动代理」路由模式需要 Root 权限，因为 Android 对系统范围的流量过滤有限制。「手动代理」路由模式在 Android 10 及以上版本需要 Root 权限，因为不再可能确定与 AdGuard 过滤的连接相关联的应用程序的名称。","keywords":""},{"title":"DNS 保护功能","type":0,"sectionRef":"#","url":"adguard-for-android/features/protection/dns-protection/","content":"DNS 保护功能 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序。 DNS 保护模块可通过点击底部屏幕的「保护」标签（屏幕底部左起第二个图标）并选择「DNS 保护」访问。 提示 DNS 保护功能的工作原理与常规广告和跟踪器拦截不同。 用户可以在专门文章中了解更多有关功能工作原理的信息。 「DNS 保护」让用户借助选定的 DNS 服务器、DNS 过滤器和用户规则过滤 DNS 请求： 一些 DNS 服务器有拦截列表，可阻止潜在有害域名的 DNS 请求。 除了 DNS 服务器，AdGuard 还可以使用特殊的 DNS 过滤器自行过滤 DNS 请求。 软件包含大量广告和跟踪域名，发送到这些域名的请求被重新路由到一个黑洞服务器。 用户还可以创建用户规则来屏蔽和解除域名的拦截。 用户可以查阅关于 DNS 过滤规则语法的文章。 DNS 服务器​ 使用该设置用户可以选择 DNS 服务器以解析 DNS 请求、拦截广告和跟踪器，以及加密 DNS 流量。 点击服务器可阅读其完整描述并选择协议。 如果没有找到所需的服务器，可以手动添加所需要的服务器。说明如下： 点按「添加 DNS 服务器」，输入服务器地址（或多个地址） 或者，用户也可以从已知 DNS 提供商列表中选择 DNS 服务器，然后点击「添加到 AdGuard」。 如果您使用私人 AdGuard DNS 服务器，可以从仪表盘将其添加到 AdGuard。 默认选择「自动 DNS」。 它根据 AdGuard 和设备设置设置 DNS 服务器。 如果启用「与 AdGuard VPN 集成」或 SOCKS5 代理，软件连接到「AdGuard DNS 无过滤」或用户指定的服务器。 在其他情况下，软件将连接到设备设置中选择的 DNS 服务器。 DNS 过滤器​ 本部分让用户添加自定义 DNS 过滤器和 DNS 过滤规则。 在 filterlists.com 上可以查看更多过滤器。","keywords":""},{"title":"设置","type":0,"sectionRef":"#","url":"adguard-for-android/features/settings/","content":"","keywords":""},{"title":"通用​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#通用","content":"此部分可帮助用户管理本应用的外观和行为：可以设置颜色主题和语言，管理通知等。 如您想帮助 AdGuard 团队检测应用崩溃并研究可用性，您可以开启「自动报告崩溃」和「发送技术和交互数据」。  用户可在「应用和过滤器更新」下配置自动更新过滤器，以及选择应用更新通道。 选择「稳定版」可试用正式发布版本，选择「测试版」或「Nightly」可提前使用最新功能。  "},{"title":"高级设置​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#高级设置","content":"「自动化」让用户通过任务程序管理 AdGuard。 「看门狗功能」可帮助用户保护 AdGuard 免于被系统禁用（阅读有关 Android 省电模式的更多信息）。 您输入的数值将是看门狗检查的间隔时间（以秒为单位）。 「日志级别」定义应记录哪些有关应用程序运行的数据。 默认情况下，应用程序会收集有关其事件的数据。 「调试」级别记录更多事件，有时 AdGuard 团队要求启用调试级别，因为它们可以帮助支持团队更好地了解问题原因。 了解有关收集和发送日志的更多信息。  「低级设置」部分适用于专家用户。 了解有关低级设置的更多信息  "},{"title":"过滤​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#过滤","content":"此部分允许用户管理 HTTPS 过滤设置、过滤器和用户脚本，以及设置代理服务器。  "},{"title":"过滤器​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#过滤器","content":"AdGuard 应用过滤器中的规则以阻止广告、跟踪器和其他干扰。 「保护」的大部分功能基于 AdGuard 过滤器。 如果启用「基本保护」，它将自动打开 AdGuard 基础过滤器和 AdGuard 移动广告过滤器。 在关闭两个过滤器的情况下，「基本保护」也将被禁用。  默认启用的过滤器足以保证 AdGuard 的正常运行。 不过，如果用户想自定义广告拦截，可以使用其他 AdGuard 或第三方过滤器。 要管理广告拦截请选择某个类别并启用自己想要的过滤器。 要添加自定义过滤器，请点击「自定义过滤器」→「添加自定义过滤器」，然后输入 URL 或文件路径。 注意 启动的过滤器数量过多，会导致一些网站无法正常运行。 了解有关过滤器的更多信息 "},{"title":"用户脚本​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#用户脚本","content":"用户脚本是用 JavaScript 编写的迷你程序，用于扩展一个或多个网站的功能。 要安装用户脚本，需要一个特殊的用户脚本管理器。 AdGuard 有这样的功能，让用户通过 URL 或文件添加用户脚本。  AdGuard Extra​ AdGuard Extra 是一个自定义用户脚本，可拦截复杂广告和将广告重新注入网站的机制。 禁用 AMP​ 禁用 AMP 是一个用户脚本，用于禁用 Google 搜索结果页面上的加速移动页面。 "},{"title":"网络​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#网络","content":"HTTPS 过滤​ 要拦截大多数网站和应用程序中的广告和跟踪器，AdGuard 需要过滤 HTTPS 流量。 了解有关 HTTPS 过滤的更多信息。 安全证书​ 要管理加密的流量，AdGuard 在设备上安装 CA 证书。 这是安全的：流量在本地过滤，并且 AdGuard 验证连接的安全性。 在旧版本的 Android 系统上，证书会自动安装。 在 Android 11 及更高版本中，用户需要手动安装证书。 安装说明 用户存储中的 CA 证书足以过滤浏览器和某些应用程序中的 HTTPS 流量。 不过，有些应用程序只信任系统存储中的证书。 要过滤 HTTPS 流量，需要将 AdGuard 的 CA 证书安装到系统存储中。 说明 进行 HTTPS 过滤的应用程序​ 本部分包含 AdGuard 过滤 HTTPS 流量的应用程序列表。 请注意，只有在用户存储和系统存储都有 CA 证书的情况下，才能对所有应用程序应用设置。 进行 HTTPS 过滤的网站​ 此设置允许用户管理 AdGuard 应过滤 HTTPS 流量的网站。 HTTPS 过滤允许 AdGuard 过滤请求和响应的内容，但我们从不收集或存储这些数据。 不过，要提高安全性，我们将包含潜在敏感信息的网站排除在 HTTPS 过滤之外。 用户还可以选择模式，将您认为必要的网站添加到排除项中： 将特定网站排除在 HTTPS 过滤之外仅对添加到排除项的网站过滤 HTTPS 流量 默认情况下，我们无法过滤带有扩展验证 (EV) 证书的网站，如金融网站。 如果需要，用户还可以启用「过滤带 EV 证书的网站」。 代理​ 用户可以设置 AdGuard 通过代理服务器路由所有设备的流量。 设置出站代理的说明 如果您的 VPN 提供商允许，还可以设置第三方 VPN 与 AdGuard 一起工作。 在「通过代理运行的应用」下，用户可以选择通过指定代理传输流量的应用程序。 如果启用「与 AdGuard VPN 集成」，此设置将发挥 AdGuard VPN 应用程序排除的作用，允许用户指定通过 AdGuard VPN 隧道路由的应用程序。 路由模式​ 本设置允许用户选择流量过滤方法。 「本地 VPN」通过本地创建的 VPN 过滤流量。 这是最可靠的模式。 由于 Android 的限制，这也是唯一一种可用于非 Root 设备的全系统流量过滤方法。 注意 「本地 VPN」模式不允许 AdGuard 与其他 VPN 同时运行。 要在 AdGuard 工作时启用其他 VPN，需要将其重新配置为代理模式，并在 AdGuard 中设置出站代理。 在 AdGuard VPN 里，「集成模式」自动启动 。 「自动代理」是一种无需使用 VPN 的替代流量路由选择方法。 一个显著的优点是它可以与 VPN 并行运作。 此模式需要 Root 访问权限。 「手动代理」在特定端口上设置代理服务器，然后在 Wi-Fi 设置中进行配置。 此模式需要 Android 10 及以上系统的 Root 访问权限。 "},{"title":"许可证​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#许可证","content":"在「许可证」中，可以找到有关许可证的信息并进行管理： 购买 AdGuard 许可证以激活完整版功能。登录 AdGuard 账号或输入许可证密钥以激活许可证。如果尚未使用许可证，请激活 7 天试用期通过三点菜单（:）刷新许可证状态打开 AdGuard 账号管理许可证。重置许可证。在您已达到此许可证可绑定的设备数量限制，并希望申请另一个许可证的情况下。  "},{"title":"支持​","type":1,"pageTitle":"设置","url":"adguard-for-android/features/settings/#支持","content":"如果用户对 AdGuard Android 版有任何问题或建议，请了解本部分。 我们建议在联系支持人员之前先查阅「常见问题」或本知识库。  如果您发现没有被拦截的广告，请通过「报告错误拦截」报告错误。 对于意外的应用程序行为，请选择「报告错误」。 如果可以的话，请详细描述遇到的问题并上载应用程序日志记录。 描述问题的方法 如需提出建议，请使用「功能请求」。 注意 GitHub 是报告错误和建议新功能的另一种方式。 说明和软件源链接 "},{"title":"统计","type":0,"sectionRef":"#","url":"adguard-for-android/features/statistics/","content":"","keywords":""},{"title":"请求​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#请求","content":"此部分显示已拦截的广告、跟踪器数量以及请求数量合计。 用户可按数据类型过滤请求：移动数据，Wi-Fi 或所有数据。 「最近活动」，即曾经的「过滤日志」，显示由 AdGuard 最近处理的 10000 个请求。 点击三点菜单(⋮)，然后点击「自定义」以按照状态（「常规」、「已拦截」、「已修改」或「已加入白名单」）或来源（「第一方」或「第三方」）过滤请求。 您可点击所需请求以查看详细信息即一键拦截或取消拦截规则。 "},{"title":"数据使用量​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#数据使用量","content":"本部分显示所选择数据类型（移动数据、Wi-Fi 或全部）的已下载和已上传数据量以及已保存流量。 点击「已节省」、「已上传」或「已下载」以查看一段时间内数据使用情况曲线图。 "},{"title":"应用程序​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#应用程序","content":"此部分显示您设备上安装的所有应用程序的统计信息。 用户可按已拦截的广告数量，已拦截的跟踪器数量或发送的请求数量排序应用。 点击「查看所有应用程序」以展开设备上已安装的应用列表，可按广告、跟踪器或请求排序。  点击应用后，您将看到其完整的统计信息：包括发送的请求，联系域名和公司。 "},{"title":"公司​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#公司","content":"此部分显示设备联系过的公司。 这是什么意思？ AdGuard 检测设备发送请求所到的域名并判断它们属于哪些公司。 您可以在 GitHub 上查看公司数据库。 "},{"title":"DNS 统计数据​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#dns-统计数据","content":"此部分显示 DNS 保护处理的请求数据。 用户可以通过数字和图表查看发送的请求总数以及被 AdGuard 拦截的请求数量。 您还可以查看有关所节省的流量和下载/上传数据的统计数字。 "},{"title":"电池使用情况​","type":1,"pageTitle":"统计","url":"adguard-for-android/features/statistics/#电池使用情况","content":"此部分显示过去 24 小时内 AdGuard 使用的设备资源统计信息。 这些数据可能与设备设置中显示的统计数据不同。 这种情况的原因是系统将所有过滤应用程序的流量都归于 AdGuard。 因此，设备显示的 AdGuard 消耗的资源比实际要多。 阅读有关电池和流量消耗问题的更多信息。 "},{"title":"安装","type":0,"sectionRef":"#","url":"adguard-for-android/installation/","content":"","keywords":""},{"title":"系统要求​","type":1,"pageTitle":"安装","url":"adguard-for-android/installation/#系统要求","content":"操作系统版本： Android 7.0 或更高版本 RAM： 至少 2GB 可用磁盘空间： 500MB "},{"title":"安装​","type":1,"pageTitle":"安装","url":"adguard-for-android/installation/#安装","content":"虽然大部分用于安卓系统的应用程序可以通过谷歌商店分发，但是 AdGuard 不在里面。谷歌禁止通过谷歌商店分发网络层的广告拦截程序，即，在其他应用程序里屏蔽商业广告的应用程序。 您可以在我们的博客中找到有关 Google 限制性政策的更多信息。 由于上述原因，您只可以手动安装适用于安卓的 AdGuard。 为了在移动设备上使用该应用程序，您需要执行以下操作。 在设备上下载应用程序。 用户可以通过以下几种方式执行此操作： 前往我们的网站并点击「下载」按钮打开浏览器并输入以下的网址：https://adguard.com/apk或扫描此二维码： 允许安装未知来源的应用程序。 文件下载完成后，点击通知中的「打开」。 将出现一个弹出窗口。 点击「设置」，导航至「安装未知应用程序」，然后为您用于下载文件的浏览器授予权限。 安装应用程序。 浏览器获得必要权限后，系统会询问您是否要安装 AdGuard 应用程序。 点击「安装」。 然后，用户将被要求阅读 AdGuard 的 许可协议和隐私政策。 您还可以参与应用程序的改进过程。 为此，请选中「自动发送崩溃报告」和「发送技术和交互数据」复选框。 然后点击「继续」。 创建本地 VPN。 为了过滤设备上的所有流量而不是通过远程服务器路由，AdGuard 需要建立 VPN 连接。 启用 HTTPS 过滤。 这不是一个强制选项，但我们建议打开它以获得最佳的广告拦截质量。 如果设备上安装 Android 7-9，在本地 VPN 设置后，系统会提示用户安装 Root 证书并配置 HTTPS 过滤。 点击「立即安装」后，将出现提示，要求您使用密码或指纹验证证书安装。 如果设备上安装 Android 10 及以上系统，那么在创建本地 VPN 后，用户将看到应用程序主界面，底部有一个建议启用 HTTPS 过滤的提示栏：点击 启用 ，然后按照下一个界面的说明操作，或者查看有关证书安装的文章了解更多信息。 "},{"title":"卸载/重新安装 AdGuard​","type":1,"pageTitle":"安装","url":"adguard-for-android/installation/#卸载重新安装-adguard","content":"如果需要卸载移动设备上的 AdGuard，请打开「设置」并选择「应用程序」（Android 7）或 「应用程序和通知」（Android 8+）。 在已安装的应用程序列表内找到 AdGuard 并点击「卸载」。  要重新安装 AdGuard，只需再次下载 apk 文件，然后按照安装部分所述步骤操作即可。 无需事先卸载。 "},{"title":"使用的流量与电池消耗的问题","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/battery/","content":"","keywords":""},{"title":"电池使用情况​","type":1,"pageTitle":"使用的流量与电池消耗的问题","url":"adguard-for-android/solving-problems/battery/#电池使用情况","content":"您可转到「统计数据」→「电池使用情况」以访问它。  以上图表显示有最近24小时内 AdGuard 电池的使用量。点击图标上的绿线可以按每一个小时查看关于流量使用的更详细信息。 除此之外，还有相关数据的信息以及简短技术说明。 "},{"title":"AdGuard 真实电池消耗是多少？​","type":1,"pageTitle":"使用的流量与电池消耗的问题","url":"adguard-for-android/solving-problems/battery/#adguard-真实电池消耗是多少","content":"首先，我们从理论角度看此问题并附上必要数据的链接。 Android 设备使用厂商提供的 Power Profile 来计算流量使用量：https://source.android.com/devices/tech/power/values.html Power Profile 的主要部分是一组用于定义设备每个组件的电池消耗的值，以 mAh 为单位：https://source.android.com/devices/tech/power/values.html 例如，从链接的表格中可以看到： wifi.active= 31mA 是由 WiFi 数据交换引起的额外消耗（以 mAh 为单位）。 radio.active= 100-300mA 是因移动网络数据交换而导致的额外消耗（以 mAh 为单位）。 cpu.active= 是指由 CPU 工作引起的 100-200mA 额外消耗（以 mAh 为单位）。 AdGuard 本身几乎不消耗任何流量，因此为评估电池资源消耗，让我们忽略「移动/WiFi 数据包」，重点关注「CPU」。 以下是消耗量计算的公式： “CPU TIME (ms)” X “cpu.active” / (60 60 1000) = “POWE 将实际数据写入公式中。 让我们以第二张截图中「CPU 总计」数据为例，将其转换为毫秒：506000 2GHz 的 cpu.active 系数大约等于 225mAh 最终结果 506000 225 / (60 60 * 1000) = 31,625mAh "},{"title":"结论​","type":1,"pageTitle":"使用的流量与电池消耗的问题","url":"adguard-for-android/solving-problems/battery/#结论","content":"实际消耗量比 Android 统计的消耗量小很多倍。 消耗量应为 31-40mAh，而非 220mAh。 另一方面，浏览器的消耗不应该是 66mAh，而是大约 200mAh。 "},{"title":"Android TV 版 AdGuard 安装方式","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/adguard-for-android-tv/","content":"","keywords":""},{"title":"通过浏览器安装 Android TV 版 AdGuard​","type":1,"pageTitle":"Android TV 版 AdGuard 安装方式","url":"adguard-for-android/solving-problems/adguard-for-android-tv/#通过浏览器安装-android-tv-版-adguard","content":"在 Android TV 上安装 TV Bro 浏览器。 下载并安装 Android TV 版 AdGuard： 在 Android TV 上打开已安装的 TV Bro 浏览器。在浏览器地址栏中，输入 “https://agrd.io/tvapk”，然后按「Enter」或点击链接。浏览器将开始自动下载 Android TV 版 AdGuard 的安装文件。下载完成后，在浏览器控制栏中选择「下载」，然后选择下载的文件。如果出现警告消息，请允许从浏览器安装文件。返回浏览器，打开「下载」，然后点击下载的文件。在出现的系统窗口中，点击「安装」，然后点击「完成」或「打开」。 完成了！Android TV 版 AdGuard 安装成功。 启动 Android TV 版 AdGuard： 安装完成后，在 Android TV 上已安装的应用程序列表中找到 AdGuard 应用程序。单击 AdGuard 图标，启动应用程序。按照屏幕上的说明完成设置。 "},{"title":"通过 ADB 安装 Android TV 版 AdGuard​","type":1,"pageTitle":"Android TV 版 AdGuard 安装方式","url":"adguard-for-android/solving-problems/adguard-for-android-tv/#通过-adb-安装-android-tv-版-adguard","content":"确保您的计算机上安装了 Android 调试桥（ADB）。 如果没有，您可以按照 XDA Developers 上的说明进行操作：ADB 安装指南。 下载 Android TV 版 AdGuard。 在电视设置中，转到「系统」→「关于」，然后按版本号七次以解锁开发人员选项。 启用「USB 调试」。 写下 Android TV 的 IP 地址： 在 Android TV 上，进入「设置」。选择「系统」→「关于」。查找「网络」，然后根据连接类型选择「Wi-Fi」或「以太网」。转到网络部分并找到「IP 地址」。 记下该 IP 地址。 通过 ADB 连接到 Android TV： 打开计算机上的终端或命令提示符。输入 adb connect 命令和电视机的 IP 地址。这将建立连接。 通过 ADB 安装 Android TV 版 AdGuard： 在终端中，输入命令 adb install Downloads/adguard_tv.apk。 如有必要，请将 Downloads/adguard_tv.apk 替换为您的路径。等待终端中出现指示应用程序安装成功的消息。 "},{"title":"Android 应用程序的已知兼容性问题","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/compatibility-issues/","content":"","keywords":""},{"title":"Problems caused by extending restricted settings","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/extending-restricted-settings/","content":"Problems caused by extending restricted settings 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序 In an effort to improve user privacy, Google has expanded the restriction settings in Android 15. More settings, such as App usage access, now require an additional permission to be enabled. Since the Firewall and Detect Samsung Pay features require the App usage access setting to be enabled for them to work properly, you may have experienced problems using them. To resolve these issues, please follow the steps below: 注意 AdGuard has a strict no-logging policy, which means that we do not collect your data or send it to third parties. We only ask for access to data without which the application cannot function. On your Android device, open the Settings app.Tap Apps.Tap AdGuard If you can't find it, first tap See all apps or App info. Tap More (⁝) → Allow restricted settings. Follow the on-screen instructions. All done! Now the Firewall and Detect Samsung Pay features will work correctly.","keywords":""},{"title":"VPN 应用程序​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#vpn-应用程序","content":"如果在「本地 VPN」过滤模式下使用 AdGuard，您将无法同时运行其他 VPN 应用程序。 要解决这个问题，我们建议执行以下操作： 使用 AdGuard VPN。「集成模式」允许两个应用程序同时运行。配置 VPN 应用程序，使其充当出站代理，并使用第三方应用程序的参数设置本地出站代理。切换到「自动代理」模式。 执行此操作后，AdGuard 将不再使用本地 VPN，而是重新配置 iptables。切换到「手动代理」模式。 为此，请转至「设置」→「过滤」→「网络」→「路由模式」 兼容性 「自动代理」模式只能在有 Root 权限的设备上启用。 使用「手动代理，在运行 Android 10 或更高版本的设备上也需要 Root 权限。 "},{"title":"私人 DNS​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#私人-dns","content":"Android Pie 中引入了私有 DNS 功能。 在 Q 版本之前，私有 DNS 不会破坏 AdGuard DNS 过滤逻辑，并且经由 AdGuard 的 DNS 转发工作正常。 但从 Q 版本开始，私有 DNS 功能会迫使应用程序重定向流量至系统解析器，不通过 AdGuard 。 有关更多详细信息，请参阅 Android 开发日志。 要解决私有 DNS 的问题，请使用 $network 规则。 有些设备制造商会隐藏私有 DNS 设置，并将「自动模式」设为默认模式。 因此，禁用私有 DNS 是不可能的，但我们可以通过使用 $network 规则来进行阻止，使系统认为上游服务器无效。 例如，如果系统默认使用 Google DNS，我们可以添加 |8.8.4.4^$network 和 |8.8.8.8^$network 规则来阻止 Google DNS。 "},{"title":"不支持的浏览器​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#不支持的浏览器","content":""},{"title":"UC 浏览器：UC 浏览器、适用于 x86 的 UC 浏览器、UC Mini、UC 浏览器 HD​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#uc-浏览器uc-浏览器适用于-x86-的-uc-浏览器uc-miniuc-浏览器-hd","content":"要过滤 HTTPS 流量，AdGuard 要求用户将证书添加到设备的受信任用户证书中。 不幸的是，UC 系列浏览器不信任用户证书，因此 AdGuard 无法执行 HTTPS 过滤。 要解决此问题，请将证书移至系统证书存储 兼容性 需要 Root 权限。 "},{"title":"海豚浏览器：海豚浏览器、海豚浏览器极速版​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#海豚浏览器海豚浏览器海豚浏览器极速版","content":"在「手动代理」模式下运行时，AdGuard 无法过滤其流量，因为此浏览器会忽略系统代理设置。 使用「本地 VPN」过滤模式可以解决这个问题。 "},{"title":"Opera mini：Opera mini、Opera mini 与 Yandex​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#opera-miniopera-miniopera-mini-与-yandex","content":"Opera mini 默认通过压缩代理驱动流量，AdGuard 无法同时解压缩和过滤流量。 目前没有解决方案。 "},{"title":"Puffin 浏览器：Puffin 浏览器、Puffin 浏览器 Pro​","type":1,"pageTitle":"Android 应用程序的已知兼容性问题","url":"adguard-for-android/solving-problems/compatibility-issues/#puffin-浏览器puffin-浏览器puffin-浏览器-pro","content":"Puffin 浏览器默认通过压缩代理来驱动流量，AdGuard 无法同时解压并过滤流量。 目前没有解决方案。 "},{"title":"如何收集 HAR 文件","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/har/","content":"","keywords":""},{"title":"什么是 HAR 文件？​","type":1,"pageTitle":"如何收集 HAR 文件","url":"adguard-for-android/solving-problems/har/#什么是-har-文件","content":"HAR（HTTP ARchive）格式是 JSON 格式的存档文件，用于记录 Web 浏览器与站点的交互。 HAR 格式的规范定义了 HTTP 交易的存档数据，浏览器使用该数据来导出其加载的网页的详细信息。 您可以在 softwareishard.com 网站上找到有关 HAR 文件格式及其使用规范的更详细说明。 "},{"title":"如何收集 HAR 文件​","type":1,"pageTitle":"如何收集 HAR 文件","url":"adguard-for-android/solving-problems/har/#如何收集-har-文件","content":"有时我们需要对文件进行分析以拦截由于某种原因难以再现的特定广告。 要获取 HAR 文件，请执行以下步骤： 打开 AdGuard 并转到「设置」（右下角的「⚙」图标）。点击「通用」→「高级」→「低级设置」。向下滚动并激活「过滤」部分中的「捕获 HAR」。打开应用程序并执行必要的操作来重现问题。关闭「捕获 HAR」。回到「高级设置」。点击「导出日志和系统信息」→「允许」（如有必要）→「保存」。 请将导出的日志记录发送给 AdGuard 客服支持。 注意 如果用户在信息中指定 HelpDesk 号或 GitHub 问题号，我们的支持团队会更快地处理您的问题。 "},{"title":"如何分析 HAR 文件​","type":1,"pageTitle":"如何收集 HAR 文件","url":"adguard-for-android/solving-problems/har/#如何分析-har-文件","content":"以下是我们可以推荐用于分析 HAR 文件的一些资源： HTTP Archive Viewer master 是一个 HAR 分析工具，可视化由 HTTP 跟踪工具创建的 HTTP Archive（HAR）日志文件。Fiddler 是一个 Web 调试代理，可让您捕获、检查、监控计算机和 Internet 之间的所有 HTTP(S) 流量、模拟请求和诊断网络问题。 "},{"title":"手动将安全证书安装到 Firefox 浏览器中","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/firefox-certificates/","content":"","keywords":""},{"title":"方法 1​","type":1,"pageTitle":"手动将安全证书安装到 Firefox 浏览器中","url":"adguard-for-android/solving-problems/firefox-certificates/#方法-1","content":"注意 该方法在 Android 版 Firefox 浏览器 90.0 及以上的版本可用。 要让 AdGuard 证书在 Firefox 浏览器中受信任，请执行以下操作： 运行浏览器。 转到「设置」→「关于 Firefox」。 点击 Firefox 浏览器徽标五次。 导航到「设置」→「Secret Settings」。 开启「Use third party CA certificates」。 "},{"title":"方法 2​","type":1,"pageTitle":"手动将安全证书安装到 Firefox 浏览器中","url":"adguard-for-android/solving-problems/firefox-certificates/#方法-2","content":"注意 此方法仅在有 Root 权限的设备上有效。 安装和配置 ADB； 在 Windows 平台上， Samsung 用户可能需要安装此实用程序。 启用「开发者模式」并开启「USB 调试」： 打开手机的「设置」；前往「系统」部分（设置中最后一项）。 在此部分中找到子项「关于手机」；点击「版本号」7次。 之后，您会收到通知称您已处于开发者模式（可能会要求您输入设备的解锁密码）；打开「系统设置」→「开发者选项」→ 下滑并启用「USB 调试」→ 在仔细阅读警告内容后在「允许 USB 调试」窗口中确认启用。 安装 Firefox 浏览器（发布版）； 打开「AdGuard 设置」（右下角的齿轮图标）→「过滤」→「网络」→「HTTPS 过滤」→「安全证书」→「Firefox 说明」→「安装旧版本」； 使用 adb shell su 和 cd data/data/... 打开 data/data/org.mozilla.firefox/files/mozilla 文件夹，找 xxxxxxx.default 文件并记住其名称； 在指定文件夹里我们需要两个文件： cert9.dbkey4.db 我们需要将这些文件移到发生安全证书问题的浏览器的一个文件夹中： data/data/org.mozilla.&lt;browser_name&gt;/files/mozilla/yyyyyy.default 完整命令如下所示： adb shell sucp -R data/data/org.mozilla.firefox/files/mozilla/xxxxxxxxxx.default/cert9.db data/data/org.mozilla.&lt;browser_name&gt;/files/mozilla/yyyyyyyyyy.defaultcp -R data/data/org.mozilla.firefox/files/mozilla/xxxxxxxxxx.default/key4.db data/data/org.mozilla.&lt;browser_name&gt;/files/mozilla/yyyyyyyyyy.default 如果您收到系统通知权限被拒绝，您需要先将指定文件移至无权限目录。 然后再将它们移动至 Firefox 浏览器特定的文件夹里。 完整命令的样式大致如下： adb shell sucp -R data/data/org.mozilla.firefox/files/mozilla/xxxxxxxx.default/cert9.db sdcard/Downloadcp -R data/data/org.mozilla.firefox/files/mozilla/xxxxxxxxx.default/key4.db sdcard/Downloadcp -R sdcard/Download/cert9.db data/data/org.mozilla.&lt;browser_name&gt;/files/mozilla/yyyyyyyyyy.defaultcp -R sdcard/Download/key4.db data/data/org.mozilla.&lt;browser_name&gt;/files/mozilla/yyyyyyyyyy.default 如果 adb shell su 无效，请先尝试先使用 adb shell，然后再使用 su。 "},{"title":"将 CA 证书移至 Root 设备的系统证书区","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/https-certificate-for-rooted/","content":"","keywords":""},{"title":"如何在系统存储中安装 AdGuard 证书​","type":1,"pageTitle":"将 CA 证书移至 Root 设备的系统证书区","url":"adguard-for-android/solving-problems/https-certificate-for-rooted/#如何在系统存储中安装-adguard-证书","content":"打开「AdGuard」→「设置」→「过滤」→「网络」→「HTTPS 过滤」→「安全证书」。 如果您还没有任何证书，将 AdGuard Personal CA 安装到用户存储中。 这样 AdGuard 就可以过滤浏览器中的 HTTPS 流量。 将 AdGuard Intermediate CA 安装到用户存储中。 您需要它来运行 adguardcert Magisk 模块，该模块可以让用户将证书移动到系统存储中。 安装最新版本的 adguardcert Magisk 模块。 打开「Magisk」→「模块」→「从存储安装」并选择下载的 adguardcert 文件。 这样 AdGuard Personal CA 就从用户存储移到了系统存储。 点击「重启」。 转移证书后，系统存储中的 AdGuard Personal CA 可让您在应用程序中过滤 HTTPS 流量，而用户存储中的 AdGuard Intermediate CA 则可让您在基于 Chromium 的浏览器中过滤 HTTPS 流量（原因见下文）。 "},{"title":"Chrome 和基于 Chromium 的浏览器的已知问题​","type":1,"pageTitle":"将 CA 证书移至 Root 设备的系统证书区","url":"adguard-for-android/solving-problems/https-certificate-for-rooted/#chrome-和基于-chromium-的浏览器的已知问题","content":"对于系统存储中的证书，Chrome 和其他基于 Chromium 的浏览器需要证书透明度（CT）日志。 CT 日志不包含 HTTPS 过滤应用程序签发的证书信息。 因此，AdGuard 需要在用户存储中增加一个证书，以过滤这些浏览器中的 HTTPS 流量。 "},{"title":"Bromite 浏览器​","type":1,"pageTitle":"将 CA 证书移至 Root 设备的系统证书区","url":"adguard-for-android/solving-problems/https-certificate-for-rooted/#bromite-浏览器","content":"除上述问题外，Bromite 浏览器默认不信任用户存储中的证书。 要在此浏览器中过滤 HTTPS 流量，请打开 Bromite，进入 chrome://flags，并将「允许用户证书」设置为「开启」。 此方法适用于有 Root 权限的设备和未 Root 权限的设备。 "},{"title":"收集调试日志的方式","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/log/","content":"","keywords":""},{"title":"收集调试日志​","type":1,"pageTitle":"收集调试日志的方式","url":"adguard-for-android/solving-problems/log/#收集调试日志","content":"为了收集调试日志并将其转发给我们，您要完成以下操作步骤： 转至「设置」→「常规」→「高级」。点击「日志记录级别」并设置为「调试」。重现问题并尝试记住问题发生的确切时间。稍等片刻，然后返回「设置」并选择「支持」标签。 点击「报告错误」并填写必填字段。 不要忘记选中「发送日志记录和系统信息」复选框。 最后，点击「发送」。 如果您有兴趣跟踪问题的解决流程并与开发人员进行对话，我们建议您在完成前三个步骤后采取以下步骤： 稍等片刻，然后返回「高级」屏幕，通过 「导出日志和系统信息」以导出日志。 然后按照这些指示说明在 GitHub 上报告错误。在 GitHub 上创建问题后，将日志文件发送至 devteam@adguard.com。 包括错误发生的时间并附加指向您的问题或其编号的链接（它在标题旁边显示为 #number）。 或者，您可以将日志文件上传到 Google Drive 并将其发送至 devteam@adguard.com。 将文件链接添加到您的 GitHub 问题。 "},{"title":"如何让 AdGuard 保持后台运行","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/background-work/","content":"","keywords":""},{"title":"Asus​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#asus","content":"关于 Asus 设备的信息仍远未详尽，所以存在的问题可能比此处列出的要多。 当我们了解更多信息时，我们将更新文章内容。 Asus 设备后台工作的潜在问题主要来自「Power Master」这一优化程序。 此程序是预装的，其默认设置非常强大，例如可以阻止应用程序启动，以及在屏幕关闭时中断后台任务。 为了确保应用程序能在后台处理正常运行，请进行如下设置： 进入「Mobile Manager」→「Power Master」→「设置」或「省电选项」→ 取消选中「暂停清理」。 进入「Mobile Manager」→「Power Master」→「设置」或「省电选项」→ 取消选中「自动拒绝应用自启动」 或者，用户可以不完全取消「自动拒绝应用自启动」，而是转到「设置」→「省电选项」→「自启动管理」→「AdGuard」，然后取消选中。 "},{"title":"小米​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#小米","content":"小米（特别是 MIUI 系统）是在后台运行方面限制最多的系统之一。 众所周知，小米的系统会限制后台进程，具有非标准权限，还缺乏适当的文档。 有时应用程序就是无法在小米手机上正常运行，而且我们对此还无能为力。 如果您在各种小米设备上遇到有关 AdGuard 后台工作的问题，您可以尝试执行以下操作。 "},{"title":"MIUI 12.0.8+​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#miui-1208","content":"要让 AdGuard 应用程序成功在后台运行，请执行以下操作： 在「设置」→「应用程序」→「管理应用程序」→ 向下滚动找到「AdGuard」，将「自动启动」设置为「开」。  下滑并点击「省电模式」，然后设置为「无限制」。  在 其他权限，将所有可能的权限设置为「开”」。 运行「安全中心」应用。 点击屏幕右上角的齿轮图标。  在功能设置中点击「优化加速」。  点击「锁定任务管理」。  在「锁定任务管理」界面中，将 AdGuard 应用程序的开关设置为打开。  完成！ 您已成功锁定 AdGuard 应用程序。 "},{"title":"MIUI 12​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#miui-12","content":"打开「设置」→「应用设置」→「应用管理」→「AdGuard」。  将自启动设置为「开」将「其他权限」中所有可能的权限设置为「开」。将省电模式设置为「无限制」  现在从屏幕底部向上滑动，启动后台应用管理器，找到 AdGuard 应用程序。  按住它，直到弹出一个特殊菜单。 选择锁定图标。  之后锁定图标应该会显示在后台应用窗口的上方。  "},{"title":"MIUI 10-11​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#miui-10-11","content":"为了能让应用程序在后台运行，请按照以下步骤来设置： 将自启动设置为「开」  「设置」→「电池与性能」→ 关闭「省电模式」功能  然后打开「应用程序省电」配置 →「AdGuard」→「无限制」  "},{"title":"所有型号​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#所有型号","content":"如果小米设备仍不断中断 AdGuard 应用程序，请执行以下步骤： 电源管理​ 请开启： 「设置」→「高级设置」→「电源管理」→ 将「电源计划」调至「性能」「设置」→「高级设置」→「电源管理」→「受保护应用」，即 AdGuard 需要被保护。「设备设置」→「应用」→「AdGuard」→「电池」→「耗电提示」和「熄屏后继续运行」「设置」→「其他设置」→「电池与性能」→「应用耗电管理」，在这里： 将省电模式切换为「关闭」选择以下选项：「后台省电」→「选择应用程序」→「AdGuard」→「后台配置」→「无限制」 应用程序省电​ 选择「安全中心」→「电池」→「应用程序省电」→「AdGuard」设置为「无限制」 应用程序锁定​ 要设置 AdGuard 在小米设备的后台工作，请注意电池和权限。 点击「最近任务」按钮，然后向下轻扫 AdGuard 以显示菜单（如截图所示）： 点击「锁定」图标。 这将阻止小米自动关闭 AdGuard。 如图所示： 转到「电池」 选择「省电」应用程序 查找并选择「AdGuard」 设置如下「后台配置」： 转到「权限」 选择「自启动」 确保启用了 AdGuard 的自启动功能： "},{"title":"Samsung​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#samsung","content":"在许多 Samsung 设备上，任何 3 天未使用的应用程序将无法从后台启动。 您应该尽可能关闭「自适应电池」和「睡眠应用程序」选项，以防止出现这种情况。 请注意，在更新应用程序或操作系统后，这些设置一般会恢复为默认值，需要您重新关闭。 "},{"title":"Android 11+​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#android-11","content":"在 Android 11 上，三星会默认阻止应用程序（包括 AdGuard）在后台运行，除非您将应用排除在电池优化之外。 为了确保 AdGuard 不会在后台被中断： 在最近任务中锁定 AdGuard 打开「最近的应用程序」。找到 AdGuard。长按 AdGuard 应用程序的图标。 要保持 AdGuard 正常工作： 打开「设置」→「应用程序」→「AdGuard」→「电池」→「耗电优化」 在下拉菜单中，选择「全部」。 然后在列表中找到 AdGuard，并将其状态设置为「不优化」（在某些机型上，可能需要关闭开关）。 在某些设备上，相关设置的名称和位置可能会不同。 可能的路径包括： 「设置」→「应用程序」→ 菜单（⁝）→「特殊访问」→「耗电优化」→ 在列表中找到 AdGuard 并取消选中。 禁用自动优化。 具体操作： 打开「电池」→ 菜单（⁝） → 选择「自动」→ 关闭此处所有设置。 同样，具体路径可能会有所不同，例如，在某些设备上，您应该转到： 手机「设置」→「设备维护」→ 点击菜单（⁝）→「高级」→「禁用自动优化」和「优化设置」。 如果您的手机有的话，请禁用自适应电池： 打开手机「设置」→「电池」→「更多电池设置」→ 关闭「自适应电池」。 禁用睡眠应用程序（此设置的具体名称及路径可能因设备而异）： 打开手机「设置」→「电池」→「后台使用限制」→ 禁用「睡眠未使用的应用」。 "},{"title":"Android 9 或 10​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#android-9-或-10","content":"打开「手机设置」→「设备维护」→ 点击「电池」条目→ 点击菜单（⁝）→「设置」并取消选择「睡眠未使用应用」和「自动停用未使用应用」。 打开「手机设置」→「应用程序」→ 点击「Android 睡眠伴侣」条目→「电池」→ 将 AdGuard 的「后台限制」设置为「应用可在后台耗电」。 从睡眠应用程序中删除 AdGuard。 具体操作： 前往「手机设置」→「设备维护」 点击「电池」 点击菜单（⁝）→「设置」 点击「睡眠应用程序」 使用垃圾桶图标唤醒 AdGuard "},{"title":"更早版本的 Samsung 手机​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#更早版本的-samsung-手机","content":"对于早期的 Samsung 设备，没有很大必要设置后台操作，但如果您的 AdGuard 应用程序在一段时间后被关闭或从最近的任务中消失，请执行以下操作： 点击「最近任务」按钮，点击「其他设置」图标。 如图所示： 点击「锁定应用」： 点击锁定图标 "},{"title":"华为​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#华为","content":"在非标准后台进程限制方面，华为及其定制安卓系统 EMUI 属于市场上最难处理的。 在默认设置下，几乎所有在后台运行的应用程序都会遇到问题并最终崩溃。 "},{"title":"在某些 EMUI 8、9 和 10 设备（华为 P20、华为 P20 Lite、华为 Mate 10…）上启动应用。​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#在某些-emui-89-和-10-设备华为-p20华为-p20-lite华为-mate-10上启动应用","content":"此功能可能不适用于所有设备，或者路径可能不同。 打开手机「设置」→「电池」→「应用启动管理」。 关闭「全部自动管理」 将 AdGuard 设置为「手动管理」并开启所有开关。 禁用「启动管理器」，它会防止应用程序在手机启动后自动运行。 打开「设置」→「全部」→「启动管理器」→ 关闭 AdGuard 的开关 此外，为了确保后台进程的可靠性，您可能需要卸载「省电精灵」，详情如下。 "},{"title":"EMUI 9+ 设备和省电精灵​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#emui-9-设备和省电精灵","content":"注意 在搭载 EMUI 9+（Android P+）的手机上，有一个叫省电精灵的任务杀手应用，它会强制退出所有不在华为白名单上的的应用，并且未向用户提供任何配置选项。 请参阅下面的卸载方法。 华为设备在破坏应用程序方面上极具创造力。 除了下文介绍的所有非标准电源管理措施外，他们还在 Android Pie 的 EMUI 9 中直接引入了一个任务杀手应用。 它叫「省电精灵」，可以杀死所有不在其白名单上的应用程序。 用户还不能在预置的白名单上添加自定义应用程序。 这意味着除了卸载省电精灵之外，没有其他方法可以在华为设备上实现应用的正确程序功能。 很不幸，它是一个系统应用程序，只能使用 ADB（Android 调试桥）才能完全卸载。 来源 XDA 论坛. 用户需要执行以下操作： 这一点尚未得到证实，但您也许可以直接在手机设置 →「应用」中禁用省电精灵。 如果您的设备设置中有此项设置，您可以跳过以下步骤。 但是，每次重新启动设备时用户都需要重新禁用应用程序。 如果没有此项设置，请按照此说明操作： 在计算机上安装 ADB； 用数据线连接手机； 启用开发人员选项； 在手机的开发人员选项中启用「USB 调试」； 在计算机上运行以下命令： adb shell pm uninstall --user 0 com.huawei.powergenie adb shell pm uninstall -k --user 0 com.huawei.android.hwaps 如果 AdGuard 仍在被系统杀，请再尝试运行以下命令： adb shell pm stopservice hwPfwService "},{"title":"EMUI 6+ 设备（以及部分 EMUI 5 设备）​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#emui-6-设备以及部分-emui-5-设备","content":"手机设置 →「高级设置」→「电源管理」→ 将「电源计划」改为「性能」；手机设置 →「高级设置」→「电源管理」→「受保护应用」→ 将 AdGuard 设置为「受保护」；手机设置 →「应用」→「我的应用」→「电池」→ 「耗电提示」设置为[取消选中]，「熄屏后继续运行」设置为 [选中]；手机设置 →「应用」→「高级」（位于底部）→「忽略优化」→ 点击「已允许」→「所有应用」→ 在列表中找到 AdGuard 并设置为「允许」。 Huawei P9 Plus​ 打开设备「设置」→「应用程序」→「设置」→「特殊访问权限」→ 选择「忽略电池优化」→ 将 AdGuard 设置为「允许」。 "},{"title":"Huawei P20、Huawei Honor 9 Lite、Huawei Mate 9 Pro​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#huawei-p20huawei-honor-9-litehuawei-mate-9-pro","content":"打开设备「设置」→「电池」→「应用启动管理」→将 AdGuard 设为「手动管理」并确保开启每个选项。 "},{"title":"Huawei P20、Huawei P20 Lite、Huawei Mate 10​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#huawei-p20huawei-p20-litehuawei-mate-10","content":"手机「设置」→「电池」→「应用启动管理」→将 AdGuard 设为「手动管理」并确保开启每个选项。 此外，为了确保后台进程的可靠性，您可能需要按上文所述卸载省电精灵。 "},{"title":"早期华为​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#早期华为","content":"旧的华为设备最容易设置，只需两步操作即可将 AdGuard 锁定在后台，这样就可以免于被省电计划或后台杀手终止进程。 点击「最近任务」按钮。 点击锁定图标： 此外，为了更有效地设置 AdGuard 的后台工作，用户要打开设备设置并执行以下操作： 打开「设置」→「电源管理」→ 将「电源计划」调至「性能」；然后在「电源管理」中选择「受保护应用」，并检查 AdGuard 是否受保护；在设置中点开「应用」然后点击「AdGuard」→ 选择「电池」→ 启用「耗电提示」和「熄屏后继续运行」；然后在「应用程序」中打开「设置」（位于底部）→「特殊访问」→ 选择「忽略电池优化」→ 点击「允许」→「所有应用」→ 在列表中找到 AdGuard 并设置为「拒绝」。 "},{"title":"魅族​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#魅族","content":"在后台进程限制方面，魅族的做法与华为和小米几乎相同。 因此，您可以通过调整以下设置来避免 AdGuard 和其他应用程序的后台工作被禁用： 打开「高级设置」→ 选择「电源管理」→ 将「电源计划」调至「性能」；然后在「电源管理」中选择「受保护应用」，并检查 AdGuard 是否受保护；打开「应用」然后点击「AdGuard」→ 选择「电池」→ 启用「耗电提示」和「熄屏后继续运行」。 "},{"title":"Nokia​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#nokia","content":"搭载 Android 9+ 的诺基亚设备禁用了 Evenwell Power saver，这就是杀死后台进程的罪魁祸首。 如果 AdGuard 在 Nokia 手机上仍然被杀后台，请查看旧指令。 "},{"title":"Nokia 1（Android Go）​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#nokia-1android-go","content":"在计算机上安装 ADB； 用数据线连接手机； 启用开发人员选项； 在手机的开发人员选项中启用「USB 调试」； 通过以下 ADB 命令卸载 com.evenwell.emm 软件包： adb shell pm uninstall --user 0 com.evenwell.emm "},{"title":"Nokia 3.1 和 5.1​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#nokia-31-和-51","content":"这些设备上有一个叫 DuraSpeed 的任务杀手，它会终止所有后台应用程序。 它无法通过常规方式卸载或禁用。 这些操作需要 ADB，即便如此，禁用后 DuraSpeed 也会在重启时再次启用。 您需要使用像 MacroDroid 这样的任务管理器来自动禁用 DuraSpeed。 在计算机上安装 ADB； 用数据线连接手机； 启用开发人员选项； 在手机的开发人员选项中启用「USB 调试」； 输入以下命令，授予 MacroDroid（或您选择的自动化应用程序）写入全局设置存储的能力： adb shell pm grant com.arlosoft.macrodroid android.permission.WRITE_SECURE_SETTINGS 创建一个在设备启动时触发的任务，执行以下操作： 系统设置：类型为 Global（全局），名称为 setting.duraspeed.enabled，值为 -1系统设置：类型为 System（系统），名称为 setting.duraspeed.enabled，值为 -1系统设置：类型为 Global（全局），名称为 setting.duraspeed.enabled，值为 0系统设置：类型为 System（系统），名称为 setting.duraspeed.enabled，值为 0 注意 您需要全局和系统两种类型设置。 截图仅以全局为例。 ::: "},{"title":"其他 Nokia 机型​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#其他-nokia-机型","content":"打开手机「设置」→「应用」→「查看所有应用」。 点击右上角菜单 →「显示系统应用」。 在列表中找到「Power saver 应用」，选择后并点击「强制关闭」。 它会停止一段时间，但某个时候还会重新启动。 从现在开始，AdGuard 应该能正常工作并使用标准 Android 电池优化，直到 Power Saver 重新启动。 对于更精通技术的用户来说，还有一种一劳永逸的解决方案： 在计算机上安装 ADB； 用数据线连接手机； 启用开发人员选项； 在手机的开发人员选项中启用「USB 调试」； 通过以下 ADB 命令卸载 com.evenwell.powersaving.g3 软件包： adb shell pm uninstall --user 0 com.evenwell.powersaving.g3 "},{"title":"OPPO​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#oppo","content":"有时在您关闭屏幕时，后台服务会被终止（包括辅助服务，需要重新启用）。 目前，解决这一问题的办法是： 打开安全中心 → 点击「隐私权限」→「启动管理器」并允许 AdGuard 在后台运行。 其他解决方案： 将 AdGuard 固定到最近使用的应用中在安全应用程序的「启动管理器」和「浮动应用列表」（com.coloros.safecenter / com.coloros.safecenter.permission.Permission）中启用 AdGuard关闭电池优化 "},{"title":"一加​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#一加","content":"搭载 OxygenOS 的设备问题最多，其中包括操作系统特有的缓存清理和可用 RAM，以及操作系统优化。 此外，如果您一段时间不使用，OxygenOS 会中断 AdGuard 的工作。 要避免这些不必要的后果，请按以下步骤操作。 "},{"title":"锁定应用程序​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#锁定应用程序","content":"打开「设置」 「电池」→「电池优化」 找到 AdGuard 点击并选择「不优化」选项 点击「完成」保存设置 打开最近应用菜单（如截图所示）： 锁定 AdGuard 应用程序： 警告 在某些一加手机种，还有个叫应用自启动和深度优化的功能，这个功能很大程度上会防止应用在后台运行。 请为 AdGuard 禁用它。 "},{"title":"电池优化​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#电池优化","content":"打开设备设置 →「电池」→「电池优化」→ 切换到「所有应用程序」列表（顶部菜单）→ 选择 AdGuard → 启动「不优化」。 打开设备设置 →「电池」→「电池优化」→ 三点菜单（⁝）→「高级优化」→ 禁用深度优化 "},{"title":"应用自启动​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#应用自启动","content":"应用自启动（在某些一加手机中）会从本质上阻止应用程序在后台运行。 请为 AdGuard 禁用它。 "},{"title":"增强/高级优化​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#增强高级优化","content":"对于一加 6 及以上版本： 打开「系统设置」→「电池」→「电池优化」→ 三点菜单（⁝）→「高级优化」禁用「深度优化」/「自适应电池」禁用「睡眠待机优化」。 一加会尝试了解睡眠时间，然后在这些时间里关闭手机的网络连接。 此设置会阻止推送通知。 对于一加 6 以下： 「系统设置」→「电池」→「电池优化」→ 三点菜单（⁝）→ 关闭「高级优化」。 "},{"title":"最近应用的清除行为​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#最近应用的清除行为","content":"通常情况下，当用户扫走一个应用程序时，它不会关闭。 然而在一加上，可能是另一种情况。 最近应用清除行为管理器可能设置为划走关闭应用程序就会杀死后台。 要将其调回「正常」模式： 打开「设置」→「高级设置」→「最近应用管理」→ 切换至「正常清除」。 "},{"title":"Sony​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#sony","content":"Sony 是第一家引入非标准后台进程优化的移动操作系统开发商。 它被称为「Stamina mode」，启用后会立即中断所有后台进程。 解决方法： 打开「设置」→「电池」→ 禁用「Stamina mode」（耐用模式）  在 Android 11+ 中，用户还应该禁用和 STAMINA 模式同屏的「自适应电池」设置。 您还需要将 AdGuard 从省电功能中排除： 「系统设置」→「应用和通知」→「高级」→「特殊应用访问权限」→「省电功能」→ 将 AdGuard 切换为「除外」 "},{"title":"WIKO​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#wiko","content":"WIKO 设备在非标准后台进程优化方面存在问题。 要让 AdGuard 在后台运作，请执行以下操作： 打开「手机助手」→「电池」→ 关闭「Eco 模式」返回并进入「手动模式」点击右上角的齿轮图标 →「后台应用白名单」→ 选择「AdGuard」 "},{"title":"基于 Android 设备： Pixel /Nexus /Nubia /Essential​","type":1,"pageTitle":"如何让 AdGuard 保持后台运行","url":"adguard-for-android/solving-problems/background-work/#基于-android-设备-pixel-nexus-nubia-essential","content":"Android 原生操作系统通常不会干预在后台运行的应用程序，但如果您遇到任何问题，需要打开「始终在线 VPN」模式。 前往「设置」→「网络和互联网」 点击「VPN」并选择「AdGuard」 设置「始终在线 VPN」模式 "},{"title":"如何收集系统日志","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/logcat/","content":"","keywords":""},{"title":"从设备捕获错误报告​","type":1,"pageTitle":"如何收集系统日志","url":"adguard-for-android/solving-problems/logcat/#从设备捕获错误报告","content":"要从设备获取错误报告，请执行以下操作： 确保您已开启 开发者选项。 在「开发者选项」内，点击「获取错误报告」。 选择您要的错误报告类型并点击「报告」。 注意 稍等片刻，您就会看到错误报告已准备就绪的通知（见图 2）。 ::: ![错误报告 *mobile](https://cdn.adtidy.org/public/Adguard/kb/newscreenshots/En/Android3.1/bugreporteen.png)  要分享错误报告，请点击通知。 将此日志发送给我们的支持团队。 注意 如果您在反馈的信息中指定 HelpDesk 号或 GitHub 问题号，我们的支持团队会更快地处理您的问题。 ::: "},{"title":"通过 Logcat 捕获错误报告​","type":1,"pageTitle":"如何收集系统日志","url":"adguard-for-android/solving-problems/logcat/#通过-logcat-捕获错误报告","content":"在 Android 7 及更低版本的设备上，错误报告无法自动发送。 然后，用户可以通过 Logcat 进行手动捕获，Logcat 是一个标准 Android 命令行工具，可转储系统消息日志。 请按此说明操作： 第一部分：准备设备 将设备切换到开发者模式。 打开手机「设置」→「关于」→ 点击 7 次版本号。 打开「开发者选项」。 启用「USB 调试」。 将每个「日志缓冲区」的大小增加到 4MB。 在完成第二部分（从设备中获取日志）之前，4MB 应该足以存储我们需要的日志； 第二部分：复现问题 在完成第一部分后，复现问题非常重要。 复现问题。 记住/写下复现的日期和时间，并将其包含在稍后发送给我们支持人员的电子邮件中。 第三部分：获取日志 用 USB 数据线将设备连接到电脑。 下载 Android SDK 平台工具。 从「下载」部分选择适合您的操作系统的下载链接。 点击链接后，将下载一个 ZIP 文件。 您可以从 ZIP 文件中提取 ADB（Android 调试桥接器）文件，并将其存储到任何您想存的地方。 测试 ADB 是否正常工作：使用 USB 数据线将 Android 设备连接到电脑，打开命令提示符、PowerShell 或者终端并运行以下命令： adb 设备 成功结果的示例： 然后运行以下命令（插入对应路径）： adb logcat -v threadtime -d &gt; C:\\Program Files\\platform-tools\\logs.txt 将创建的 txt 文件以及复现问题的时间（来自第二部分）通过电子邮件发送给我们的支持团队：support@adguard.com。 "},{"title":"ROOT 用户的替代方法​","type":1,"pageTitle":"如何收集系统日志","url":"adguard-for-android/solving-problems/logcat/#root-用户的替代方法","content":"下载并运行 Logcat。 在菜单中选择「记录」。 选择日志文件的名称或直接点「OK」。 现在您可以点击首页 键，CatLog 将继续在后台记录日志。 复现问题。 打开 CatLog，然后点击「停止记录」。 将此日志发送给我们的支持团队。 注意 如果您在反馈的信息中指定 HelpDesk 号或 GitHub 问题号，我们的支持团队会更快地处理您的问题。 "},{"title":"Android 11+ 设备上的证书安装","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/manual-certificate/","content":"Android 11+ 设备上的证书安装 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解工作原理，请下载 AdGuard 应用程序。 为了能够过滤 HTTPS 流量（这点很重要，因为大多数广告都使用 HTTPS），AdGuard 需要在设备的用户存储空间中安装证书。 旧版本的 Android 操作系统可以自动完成，但在 Android 11 及更高版本上，用户必须手动安装。 请按照以下步骤安装 AdGuard 证书： 当您看到「HTTPS 过滤已关闭」的通知时，点击「启用」。 然后您将看到三个画面，它们分别解释了： 为什么要过滤 HTTPS 流量过滤过程的安全性AdGuard 证书的必要性 连续点击「下一步」→「下一步」→「保存证书」。 在打开的「下载」文件夹底部点击「保存」。 保存后，点击「打开设置」。 点击「更多安全设置」→「加密和凭据」→「安装证书」→「CA 证书」。 您可能会看到一条警告。 如果有的话，请点击「仍然安装」并输入您的 PIN 码（如有必要）。 选择 AdGuard 证书文件。 它的名称应该类似于「adguard_1342_020322.crt」。 一切就绪！ 证书安装成功后，您就启用了 HTTPS 过滤。 请注意，以上提供的步骤基于 Google Pixel 7 智能手机。 如果您使用不同的 Android 设备，具体的菜单名称或选项可能会有所不同。 为方便导航，可考虑在设置搜索栏中输入「证书」或「凭证」搜索证书。 如您在手动安装证书期间遇到问题（例如，应用持续忽略已安装证书），可以尝试以下解决方案。 重启 AdGuard。再次尝试安装正确的证书（AdGuard Personal CA）。 如问题仍然存在使您无法安装证书，请联系我们的支持团队 support@adguard.com。","keywords":""},{"title":"多用户配置文件引起的问题","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/multiple-user-profiles/","content":"","keywords":""},{"title":"多用户配置文件引起的问题​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#多用户配置文件引起的问题","content":"在 Android 9 和更新的版本，如 AdGuard 是安装给设备上的多个用户配置，当您卸载本应用时可能会遇到问题。 当您从单个用户配置内卸载 AdGuard 时，本应用仍会出现在应用列表内，而且您无法卸载或重新安装它。 发生此种情况，是因为 AdGuard 安装给了设备上的不同用户配置。 如在移除尝试失败后重新安装 AdGuard，用户会看到错误讯息「您无法在此设备上安装本应用」。 要解决此问题，您需要为所有用户卸载本应用：转到「设置」→「所有应用」→「AdGuard」。 点击右上角的三个点菜单并选择「为所有用户卸载」。  "},{"title":"受限模式导致的一些问题​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#受限模式导致的一些问题","content":"拥有安卓7+操作系统的手机、笔记本或电视的用户可能会遇到使用受限模式（Restricted Mode）的配置文件导致的问题。 如您有遇到这种情况，AdGuard 与其他使用 VPN 的应用程序一样进行选择性过滤 VPN 流量时，受其限制。 因此，AdGuard 无法使用本地 VPN 模式开启保护。 除此之外，如您在设备上使用双开应用/应用分身帐户也会导致相似的问题。 以下是您可以规避该问题的操作。 "},{"title":"解决方法​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#解决方法","content":"解决该问题有三种方法： "},{"title":"方案 1：允许 AdGuard 使用 ADB​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#方案-1允许-adguard-使用-adb","content":"注意 此方法是自 AdGuard v3.5 nightly 6 起可用。 如您仍在使用旧版本，您可以在此处下载 nightly 版本。 启用「开发者模式」并开启「USB 调试」： 打开手机的「设置」；前往「系统」部分（设置中最后一项）。 在此部分中找到子项「关于手机」；点击「版本号」7次。 之后，您会收到通知称您已处于开发者模式（可能会要求您输入设备的解锁密码）；打开「系统设置」→「开发者选项」→ 下滑并启用「USB 调试」→ 在仔细阅读警告内容后在「允许 USB 调试」窗口中确认启用。 注意 如您遇到任何困难或其他问题，在此处可查看完整说明。 ::: 安装和配置 ADB； 在 Windows 平台上， Samsung 用户可能需要安装此实用程序。 用 USB 数据线 将设备连接至您已安装 ADB 的电脑或笔记本等设备上; 在您的 PC 上打开命令行： 如您使用的是 Windows，打开 Cmd.exe；如您使用的是 macOS，打开 Terminal ； 输入 adb shell pm grant com.adguard.android android.permission.INTERACT_ACROSS_USERS 的命令并点击回车键。 "},{"title":"方案 2：移除受限用户帐户​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#方案-2移除受限用户帐户","content":"在此可以查看如何在安卓设备上管理用户帐户的相关信息。 注意 在某些情况下，受限用户账户会自动创建，且无法删除。 例如，您在 Android 或 LG 设备上使用应用分身或双开应用功能时，将会自动创建受限用户账户。 您可以阅读以下内容以查看，在上面描述的情况下该如何解决问题。 "},{"title":"选项三：以本地 HTTP 代理模式使用AdGuard（需要 Root 权限）​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#选项三以本地-http-代理模式使用adguard需要-root-权限","content":"要启用此模式，请打开「AdGuard 设置」→「网络」→「过滤方式」→「本地 HTTP 代理」。 "},{"title":"LG 和 Samsung 设备​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#lg-和-samsung-设备","content":"LG 或三星手机的用户也可能会遇到相同的问题。 这可能是由双开应用/双 Messenger 账户功能（其本质是隐式创建了受限账户）引起的。 为了解决该问题，您需要禁用该功能。 "},{"title":"Samsung​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#samsung","content":"前往设置；点击高级功能；向下移动，点击双 Messenger 账户；禁用所有应用的「双 Messenger 账户」；锁定您的设备5分钟；解锁屏幕并重新试图创建 VPN 账号。 "},{"title":"LG​","type":1,"pageTitle":"多用户配置文件引起的问题","url":"adguard-for-android/solving-problems/multiple-user-profiles/#lg","content":"前往设置；选择常规标签钮；向下移动，点击双开应用；移除应用分身列表中的所有应用；重启您的设备。 "},{"title":"如何在韩国使用 Samsung Pay 和 AdGuard","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/samsungpay-with-adguard-in-south-korea/","content":"如何在韩国使用 Samsung Pay 和 AdGuard 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理， 请下载 AdGuard 应用程序。 有部分用户遇到了 AdGuard 运行时 Samsung Pay 无法正常运行的问题。 但是这个问题几乎只发生在韩国地区的 Android 设备上。 为什么会发生这样的问题呢？ 部分情况下 Samsung Pay 无法在有 VPN 服务的设备上运行，AdGuard 就是其中一种。 在默认情况下，AdGuard 使用本地的 VPN 服务来减少流量，这可能会导致 Samsung Pay 无法正常运行。 因此，韩国的用户在使用 Samsung Pay 进行付款时必须禁用 AdGuard。 启用「检测 Samsung Pay」功能可以避免这种问题的发生。 启用此功能后，只要用户打开 Samsung Pay 应用程序，AdGuard 就会暂停，并在 Samsung Pay 关闭时恢复。 注意 只有在 AdGuard 设置中选择本地 VPN 过滤模式，此功能才会生效。 如果使用另一种模式，Samsung Pay 也会正常运行，不会受到任何影响。 若要启用「检测 Samsung Pay」功能，请按照以下步骤操作： 转到「设置」→「通用」→「高级」→「低级设置」。 滚动到「检测 Samsung Pay」，然后将滑块向右移动。 点按「允许权限」，让 AdGuard 获取有关其他应用程序使用情况的信息。 我们需要这些权限来收集 Samsung Pay 运作的统计数字，以便使「检测 Samsung Pay」功能正常运行。 启用此功能后，当用户从 Samsung Pay 切换到 AdGuard 时，将会出现如屏幕截图所示的以下消息。 或者，用户也可以在「应用管理」中禁用 Samsung Pay 的过滤功能。 只需进入「应用管理」界面（底部第三个标签），在列表中找到 Samsung Pay，然后关闭「通过 AdGuard 路由流量」即可。","keywords":""},{"title":"如何设置出战代理","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/outbound-proxy/","content":"","keywords":""},{"title":"代理配置示例​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#代理配置示例","content":"这篇文章为用户讲述如何设置一些主流的代理，让它们与 AdGuard 一起运行。 "},{"title":"如何同时使用 AdGuard 和 Tor​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-tor","content":"打开 AdGuard 并转到「设置」→「过滤」→「网络」→「代理」。 通过 Google Play 下载「Orbot: Proxy with Tor」，或点击「配置 Tor® 整合」，然后单击「安装」。 打开 Orbot 并在应用程序的首页点击「开启」按钮。 返回 AdGuard 的「代理设置」页面。 点击「配置 Tor® 整合」按钮。 所有必填的字符串将会被预填写： 字符串\t数值代理分类\tSOCKS4 或 SOCKS5 代理主机\t127.0.0.1 代理端口\t9050 或者您可以点击「代理服务器」→「添加代理服务器」，手动输入这些值，然后将 Orbot 设置为默认代理。 启用主代理开关和 AdGuard 保护功能，通过代理路由设备的流量。 现在 AdGuard 会将所有流量通过 Orbot 代理发送。 如您禁用 Orbot 代理，那么您在 AdGuard 设置中禁用出战代理设置前，互联网连接将不可用。 "},{"title":"如何同时使用 AdGuard 和 PIA（Private Internet Access）​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-piaprivate-internet-access","content":"假设您已是 PIA VPN 的客户，且已将它安装在您的设备上。 打开 AdGuard 并转到「设置」→「过滤」→「网络」→「代理」→「代理服务器」。 点击「添加代理」按钮并输入以下的数据： 字符串\t数值代理分类\tSOCKS5 代理主机\tproxy-nl.privateinternetaccess.com 代理端口\t1080 您还需要填写「用户名/密码」字符串。 为此，请登录 PIA 网站的客户控制面板。 在「生成 PPTP/L2TP/SOCKS 密码」部分下面点击「生成密码」按钮。 您将会看到一串开始于「x」的用户名和随机密码。 将它们输入到 AdGuard「用户名」和「密码」。 点击「选择并保存」。 启用主代理开关和 AdGuard 保护功能，通过代理路由设备的流量。 "},{"title":"如何同时使用 AdGuard 和 TorGuard​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-torguard","content":"假设您已是 TorGuard 的客户，且已将它安装在设备上。 打开 AdGuard 并转到「设置」→「过滤」→「网络」→「代理」→「代理服务器」。 点击「添加代理」按钮并输入以下的数据： 字符串\t数值代理分类\tSOCKS5 代理主机\tproxy.torguard.org 或 proxy.torguard.io 代理端口\t1080 或 1085 或 1090 请在「用户名」和「密码」的相应空白处输入您的代理名称，以及您在 TorGuard 注册选择的代理密码。 点击「选择并保存」。 启用主代理开关和 AdGuard 保护功能，通过代理路由设备的流量。 "},{"title":"如何同时使用 AdGuard 和 NordVPN​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-nordvpn","content":"打开 AdGuard 并转到「设置」→「过滤」→「网络」→「代理」→「代理服务器」。 点击「添加代理」按钮并输入以下的数据： 字符串\t数值代理分类\tSOCKS5 代理主机\t此列表中的任何服务器 代理端口\t1080 在「用户名」和「密码」输入您的 NordVPN 的用户名和密码。 点击「选择并保存」。 启用主代理开关和 AdGuard 保护功能，通过代理路由设备的流量。 "},{"title":"如何同时使用 Adguard 和 Shadowsocks​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-shadowsocks","content":"假设您已是 Shadowsocks 的客户，且已将它安装在设备上。 注意 在设置之前，应将 Shadowsocks 应用程序从过滤中移除（进入「应用管理」→「Shadowsocks」→「通过 AdGuard 路由流量」），以避免无限循环和掉线。 打开 AdGuard 并转到「设置」→「过滤」→「网络」→「代理」→「代理服务器」。 点击「添加代理」按钮并输入以下数据： 字符串\t数值代理分类\tSOCKS5 代理主机\t127.0.0.1 代理端口\t1080 点击「选择并保存」。 启用主代理开关和 AdGuard 保护功能，通过代理路由设备的流量。 "},{"title":"如何同时使用 AdGuard 和 Clash​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#如何同时使用-adguard-和-clash","content":"假设您已是 Clash 的用户，且已将它安装在设备上。 打开 Clash 并转到「设置」→「网络」→「路由系统流量」并切换开关。 这将把 Clash 设置为代理模式。 打开 AdGuard 并转到「应用管理」。 选择「Clash For Android」并禁用「通过 AdGuard 路由流量」。 这将消除流量循环。 然后转到「设置」→「过滤」→「网络」→「代理」→「代理服务器」。 点击「添加代理」按钮并输入以下数据： 字符串\t数值代理分类\tSOCKS5 代理主机\t127.0.0.1 代理端口\t7891 "},{"title":"限制​","type":1,"pageTitle":"如何设置出战代理","url":"adguard-for-android/solving-problems/outbound-proxy/#限制","content":"即使用户配置 AdGuard 代理设置，也有一个因素会阻止流量通过出站代理路由。 如果用户没有设置应用程序本身通过 AdGuard 发送流量，这种情况就会发生。 要做到这一点，请进一步设置「应用管理」，选择应用程序，并打开「通过 AdGuard 路由流量」。 "},{"title":"在安全文件夹中安装证书","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/secure-folder/","content":"在安全文件夹中安装证书 信息 本文所述 AdGuard Android 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理， 请下载 AdGuard 应用程序。 如果您在 Android 系统上安装「安全文件夹」（这主要适用于 Samsung 设备），在安装 HTTPS 证书时可能会面临一些困难。 问题是，安全文件夹有自己的空间来存储证书。 不过，如果用户按照常规证书安装说明（此处有描述）进行操作，证书将安装到主内存中，不会对安全文件夹中的广告拦截器产生任何作用。 要解决这个问题并将 Android 版 AdGuard 证书安装到安全文件夹存储中，请按照以下说明进行操作： 安装应用程序并连接本地 VPN 后，在「HTTPS 过滤已关闭」消息旁边点击「ENABLE」。点击「下一个」→「下一个」→「立即保存」→「保存证书」。保存证书（在此阶段，用户可以重命名证书，以方便日后查找，这也是您需要做的）。弹出安装说明后，请不要点击「打开设置」。最小化应用程序并转到安全文件夹。点按三点菜单并转到「设置」→「其他安全设置」。点按「安全证书」→「从设备存储安装」→「CA 证书」→「仍然安装」。使用图形密钥/密码/指纹确认安装。查找并选择先前保存的证书，然后点击「完成」。返回 AdGuard 应用程序并导航回主屏幕。 您可能需要轻扫并重启应用，才能消除「HTTPS 过滤已关闭」的信息。完成！ 证书安装成功。","keywords":""},{"title":"Android 版 AdGuard 自动化方式","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/tasker/","content":"","keywords":""},{"title":"AdGuard 界面​","type":1,"pageTitle":"Android 版 AdGuard 自动化方式","url":"adguard-for-android/solving-problems/tasker/#adguard-界面","content":"目前有很多任务管理应用程序，例如 Tasker、AutomateIt 等等。 AdGuard 提供一个界面，允许这些应用程序设置各种自动化规则。  有了这个界面，任何应用程序都可以发送一条特殊 intent 消息（中文：“意图”），其中包含操作名称和一些必要的附加数据。 AdGuard 将查看 intent 消息并执行所需的操作。 "},{"title":"安全问题​","type":1,"pageTitle":"Android 版 AdGuard 自动化方式","url":"adguard-for-android/solving-problems/tasker/#安全问题","content":"让一些随机应用程序管理 AdGuard 的工作是否危险？ 是的，这就是密码会跟 intent 消息一起发送的原因。 此密码将由 AdGuard 自动生成，但用户当然可以随时更改它。 "},{"title":"可用操作​","type":1,"pageTitle":"Android 版 AdGuard 自动化方式","url":"adguard-for-android/solving-problems/tasker/#可用操作","content":"以下是 AdGuard 可以理解的包含在 intent 消息中的操作： start 开始保护，不需要额外的数据； stop 禁用保护，不需要额外的数据； pause 暂停保护。 这与 stop 的区别在于，当用户点击暂停保护时，会出现重新启动保护的通知。 无需额外数据； update 检查可用的过滤器和应用程序更新，不需要额外的数据；  dns_filtering 打开或关闭 DNS 过滤。 需要额外的标志： enable:true 或 enable:false 相应地启用或禁用 DNS 过滤。 fake_dns allows resolving DNS requests on the specified proxy server. This requires an extra flag: enable:true or enable:false enables or disables the Use FakeDNS setting, respectively. 注意 When the Use FakeDNS setting is enabled, DNS Protection will be automatically disabled. DNS requests won't be filtered locally.  dns_server 在 DNS 服务器之间切换时，需要包含额外的数据： server:adguard dns 切换到 AdGuard DNS 服务器； 注意 支持的提供商名称完整列表可在我们的已知 DNS 提供商列表中查看。 server:custom 切换到之前添加的名为 custom 的服务器； server:tls://dns.adguard.com 如果之前添加的服务器和提供商不包含具有相同地址的服务器，则创建一个新服务器并切换到该服务器。 否则，它会切换到相应的服务器。 You can add server addresses as IP ( regular DNS), sdns://… (DNSCrypt or DNS-over-HTTPS), https://… (DNS-over-HTTPS) or tls://... (DNS-over-TLS); server:1.1.1.1, tls://1.1.1.1 创建一个用逗号分隔地址的服务器并切换到它。 通过server:1.1.1.1, tls://1.1.1 添加服务器时，先前添加的服务器将被移除。 server:system 将 DNS 设置重置为默认的系统 DNS 服务器。  proxy_state 启用/禁用出站代理。 需要额外的标志： enable:true 或 enable:false 相应地激活或停用出站代理。  proxy_default 将之前添加的代理列表中的代理设置为默认代理，如果之前未添加服务器，则创建一个新的代理。 用户要指定其他数据： server:[name] 其中[name] 是列表中的出站代理名称。 或者也可以手动配置服务器参数： server:[type=…&amp;host=…&amp;port=…&amp;username=…&amp;password=…&amp;udp=…&amp;trust=…] proxy_remove 从先前添加的代理服务器列表中删除该代理服务器。 server:[name] 其中 [name] 是列表中的出站代理名称。 用户也可以手动配置移除参数： server:[type=…&amp;host=…&amp;port=…&amp;username=…&amp;password=…&amp;udp=…&amp;trust=…] 必填参数： [type] 代理服务器类型： HTTPSOCKS4SOCKS5HTTPS_CONNECT [host]，出站代理域名或 IP 地址； [port]，出站代理端口（1 到 65535 之间的整数）； 可选参数： [login and password] 仅在代理需要的情况下被使用。 设置 SOCKS4 时，该数据将被忽略； [udp] 仅适用于 SOCKS5 服务器类型并包含选项通过 SOCKS5 的 UDP。 有必要设置 true 或 false 值； [trust] 仅适用于 HTTPS_CONNECT 服务器类型，包括选项 Trust any certificates。 有必要设置 true 或 false 值。 示例 按名称设置：server:MyServer manually settings: server:host=1.2.3.4&amp;port=80&amp;type=SOCKS5&amp;username=foo&amp;password=bar&amp;udp=true 别忘记把密码作为附加项，并提及软件包名称和类别。 您需要为每个 intent 消息都这样做。 Extra: password:******* Package: com.adguard.android Class: com.adguard.android.receiver.AutomationReceiver 注意 在 v4.0 之前，该类被称为 com.adguard.android.receivers.AutomationReceiver 但是后来我们将其名称更改为 com.adguard.android.receiver.AutomationReceiver。 如果用户使用过该功能，请留意并使用新的名称。 "},{"title":"在没有通知的情况下执行​","type":1,"pageTitle":"Android 版 AdGuard 自动化方式","url":"adguard-for-android/solving-problems/tasker/#在没有通知的情况下执行","content":"如果不想接收通知，请在其中一个额外字段中添加 quiet: true。 "},{"title":"示例​","type":1,"pageTitle":"Android 版 AdGuard 自动化方式","url":"adguard-for-android/solving-problems/tasker/#示例","content":" "},{"title":"AdGuard and AdGuard Pro","type":0,"sectionRef":"#","url":"adguard-for-ios/adguard-and-adguard-pro/","content":"AdGuard and AdGuard Pro 信息 本文所述 AdGuard iOS 版是在系统级上保护设备的多功能的广告拦截器。 要了解其工作原理，请下载 AdGuard 应用程序 If you look for AdGuard in the App Store, you'll find two apps — AdGuard and AdGuard Pro. These apps are designed to block ads and trackers in Safari, other browsers, and apps, and to manage DNS protection. Don't be misled by their names, both apps block ads on smartphones and tablets by Apple. They used to differ in functionality due to the changing App Store review guidelines, but now these two apps are basically the same. If you have purchased AdGuard premium, there is no need to get AdGuard Pro, and vice versa.","keywords":""},{"title":"活动和统计数据","type":0,"sectionRef":"#","url":"adguard-for-ios/features/activity/","content":"","keywords":""},{"title":"统计数据​","type":1,"pageTitle":"活动和统计数据","url":"adguard-for-ios/features/activity/#statistics","content":"除了「活动」屏幕之外，用户还可以在主屏幕和小部件中找到全局统计数据。 "},{"title":"如何在 YouTube 应用中拦截广告","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/youtube-ads/","content":"","keywords":""},{"title":"在 AdGuard 应用内观看 YouTube​","type":1,"pageTitle":"如何在 YouTube 应用中拦截广告","url":"adguard-for-android/solving-problems/youtube-ads/#在-adguard-应用内观看-youtube","content":" 打开 YouTube 应用并播放您要观看的视频。 点击「共享」按钮。 从应用列表内选择 AdGuard。 完成！ 在新窗口内您便可观看无广告的视频。 "},{"title":"在浏览器内观看 YouTube​","type":1,"pageTitle":"如何在 YouTube 应用中拦截广告","url":"adguard-for-android/solving-problems/youtube-ads/#在浏览器内观看-youtube","content":"另外，用户也可在浏览器中观看 YouTube，如果安装并开启 AdGuard，就不会有广告。 "},{"title":"低级设置","type":0,"sectionRef":"#","url":"adguard-for-android/solving-problems/low-level-settings/","content":"","keywords":""},{"title":"如何进入低级设置​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#如何进入低级设置","content":"警告 更改「低级设置」可能会导致 AdGuard 的性能出现问题，也可能会断开网络连接或侵害安全和隐私。 如果您知道自己在设置什么，或者是我们的客户支持要求您这样做，请打开此部分。 要转到「低级设置」，请打开 AdGuard 应用并点击屏幕右下角的齿轮图标。 然后进入转到「常规」→「高级」→「低级设置」。 "},{"title":"低级设置​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#低级设置","content":"在 4.0 版的 AdGuard Android 版中，我们彻底重新设计了低级设置：将它们划分为主题块，使它们更加清晰，添加对输入值和其他安全阀的验证，删除并添加一些设置。 "},{"title":"DNS 保护功能​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#dns-保护功能","content":"后备上游​ 在配置的服务器不可用时，用户可以在此处指定要使用的后备 DNS 解析器。 共有三个选项：「自动 DNS」「无」和「自定义 DNS」。 如果用户未指定后备服务器，软件将使用「自动 DNS」，是指系统 DNS 或 AdGuard DNS。 「无」意味着没有后备服务器。 选择「自定义 DNS」，用户可以列出作为上游使用的 IPv4 和 IPv6 服务器地址。 后备域名​ 在这里，用户可以列出将直接转发到后备上游（如果存在）的域名。 检测搜索域名​ 如果启用此选项，AdGuard 将检测搜索域名并自动将它们转发到后备上游。 Bootstrap 上游​ DoH、DoT 和 DoQ 服务器的 Bootstrap DNS。 默认使用的是「自动 DNS」即系统 DNS 或 AdGuard DNS。 选择「自定义 DNS」，可以列出作为 Bootstrap 上游使用的 IPv4 和 IPv6 服务器地址。 adblock 规则的拦截模式​ 在这里，可以根据 adblock 规则语法（例如 ||example.org^）指定被 DNS 规则阻止的域名的响应类型。 用 REFUSED 响应返回 NXDOMAIN 响应响应自定义 IP 地址（可在此处指定 IPv4 和 IPv6 地址） host 规则的拦截模式​ 您可以在此处根据主机规则语法指定 DNS 规则阻止的域名响应类型（例如 &lt;ip&gt; &lt;domain&gt; 0.0.0.0 example.com）。 用 REFUSED 响应返回 NXDOMAIN 响应响应自定义 IP 地址（可在此处指定 IPv4 和 IPv6 地址） DNS 请求超时​ 用户可以指定 AdGuard 在使用后备服务器之前，等待选定 DNS 服务器响应的时间（以毫秒为单位）。 如果数值无效或为空，要使用的数值为 5000。 屏蔽的 TTL 应答​ 用户可以在这里指定请求响应阻塞时返回的 TTL（生存时间）值。 DNS 缓存大小​ 您可在此处指定缓存响应的最大数量。 默认值为 1000。 ECH 拦截​ 如果启用，AdGuard 会从 DNS 响应中去除 Encrypted Client Hello 参数。 忽略不可用的出站代理​ 如果启用此设置，AdGuard 将在出站代理不可用时直接发送 DNS 请求。 为 DNS-over-HTTPS 上游试用 HTTP/3​ 如果启用此设置，AdGuard 将使用 HTTP/3 加速 DoH 上游的 DNS 查询解析。 否则，AdGuard 将恢复其默认行为，并使用 HTTP/2 发送 DNS-over-HTTPS 的所有 DNS 请求。 SERVFAIL 故障响应​ 如果启用此设置，若所有上游（包括后备上游）都无法响应，AdGuard 将向客户端发送 SERVFAIL 响应。 对非后备域名使用后备功能​ 如果启用此设置，AdGuard 将对所有域名使用后备上游。 否则，只有在启用了相应选项的情况下，后备上游才会用于后备域和搜索域。 验证 DNS 上游​ 如果启用此设置，AdGuard 将在添加或更新自定义 DNS 服务器之前测试 DNS 上游。 Filter secure DNS​ If this setting is on, AdGuard will apply all enabled DNS filters and DNS user rules to encrypted DNS-over-HTTPS (DoH) traffic and not only to plain DNS. DoH traffic mostly comes from Chrome and other browsers that have a Secure DNS (or similar) setting. You can use Filter secure DNS in two different modes: Filter on the fly. In this mode, AdGuard applies all enabled DNS filters and DNS user rules to DoH traffic but doesn’t redirect it to the local DNS proxy. If a DNS server is specified in the browser’s settings, this server will handle the DoH traffic for this browser Redirect to DNS proxy. In this mode, AdGuard applies all enabled DNS filters and DNS user rules to DoH traffic by redirecting it to the local DNS proxy. The DNS server specified in the AdGuard’s DNS settings will handle all DoH traffic "},{"title":"过滤​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#过滤","content":"捕获 HAR​ 如果启用此设置，AdGuard 将捕获 HAR 文件。 它会在应用程序缓存目录内创建一个名为「har」的目录，并将 HAR 1.2 格式的所有已过滤 HTTP 请求信息储存在那里，这些信息可通过 Fiddler 程序进行分析。 仅将其用于调试目的！ "},{"title":"HTTPS 过滤​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#https-过滤","content":"Encrypted Client Hello​ 每一个加密的互联网连接都有一个未加密的部分， 就是发送的第一个数据包，包含用户要连接的服务器名称。 Encrypted ClientHello（ECH）的技术能够解决该问题，成功加密最后一位未加密的信息。 要使用该功能，请启用「Encrypted ClientHello」选项。 本功能使用本地 DNS 代理查找域名的 ECH 配置。 如果找到，将对 ClientHello 数据包进行加密。 OCSP 检查​ 如果启用此设置，AdGuard 将执行异步 OCSP 检查，以获取网站 SSL 证书的吊销状态。 如果在规定的超时时间内完成OCSP检查，AdGuard将立即阻止连接（如果证书被吊销）或建立连接（如果证书有效）。 如果验证时间过长，AdGuard 将允许连接，同时继续在后台检查证书状态。 如果证书被撤销，当前和将来该域名的连接将被阻止。 重定向 DNS-over-HTTPS 请求​ 如果启用此设置，除了无加密 DNS 请求外，AdGuard 还会将 DNS-over-HTTPS 请求重定向到本地 DNS 代理。 我们建议禁用后备上游，并仅使用加密的 DNS 服务器，以保护隐私。 过滤 HTTP/3​ 如果启用此设置，AdGuard 除过滤其他请求类型外，还会过滤通过 HTTP/3 发送的请求。 "},{"title":"出站代理​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#出站代理","content":"显示「过滤 DNS 请求」设置​ 如果启用此功能，「过滤 DNS 请求」开关将显示在「添加代理服务器」对话框中。 使用它可以过滤通过指定代理的 DNS 请求。 "},{"title":"防护​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#防护","content":"端口范围​ 用户可以在此处指定应过滤的端口范围。 记录已删除的 HTML 事件​ 如果启用此设置，AdGuard 将在「最近活动」中记录被阻止的 HTML 元素。 Scriplet 调试​ 如果启用此设置，Scriptlets 中的调试将被激活，浏览器日志将记录 Scriptlets 规则的应用情况。 排除的应用​ 您可以在此处列出要从 AdGuard 保护中排除的包名称和 UID。 QUIC 旁路包​ 用户可以在此处指定 AdGuard 应绕过 QUIC 流量的包名称。 网络更改时重新配置自动代理​ 如果启用此设置，当设备连接到另一个网络时，AdGuard 保护将重新启动，重新配置自动代理设置。 仅当「路由模式」设置为「自动代理」时，此设置才适用。 IPv6 过滤​ 如果启用此设置，AdGuard 将在 IPv6 网络接口可用时过滤 IPv6 网络。 无需进行过滤的 IPv4 范围​ 本节中列出的 IPv4 范围的过滤已禁用。 无需进行过滤的 IPv6 范围​ 本节所列 IPv6 范围的过滤功能已禁用。 出站套接字的 TCP 保活​ 如果启用此设置，AdGuard 将在指定时间段后发送保活探测，以确保 TCP 连接处于活动状态。 在这里，用户可以指定启动保活探测之前的空闲时间以及对无响应对等方进行保活探测之间的时间。 在尝试从服务器获取响应失败达到规定的次数后，系统会自动关闭 TCP 连接。 "},{"title":"本地 VPN 设置​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#本地-vpn-设置","content":"撤销 VPN 的恢复延迟​ 在这里，用户可以设置在 AdGuard 被第三方 VPN 应用程序撤销或删除 VPN 配置文件后尝试恢复 VPN 保护之前的延迟时间（以毫秒为单位）。 默认值为 5000 毫秒。 为撤销的 VPN 恢复重新安排延迟​ 用户可以在此处设置 AdGuard 在被第三方 VPN 应用程序撤销或删除 VPN 配置文件后重新安排 VPN 保护恢复之前的延迟时间（以毫秒为单位）。 默认值为 5000 毫秒。 最大传输单元（MTU）​ 用户可以在此处设置 VPN 接口的最大传输单元 （MTU）。 推荐范围是 1500–1900. 自动恢复 VPN 连接​ 如果启用此设置，AdGuard 的本地 VPN 将在因网络缺失、系留或低功耗模式而关闭后自动重新启用。 数据包捕获（PCAP）​ 如果启用此设置，AdGuard 将在应用程序缓存目录中创建文件 timestamp.pcap （例如 1682599851461.pcap）。 该文件列出了通过 VPN 传输的所有网络数据包，可以使用 Wireshark 程序进行分析。 将 Wi-Fi 网关接入 VPN 路由中​ 如果启用此设置，在使用 Wi-Fi 时，网关 IP 地址将添加到 VPN 路由中。 IPv4 地址​ 用户可以在此处输入将用于创建 TUN 接口的 IP 地址。 默认情况下，地址是 172.18.11.218。 强制路由 LAN IPv4​ 如果启用此设置，AdGuard 将过滤所有 LAN 连接，包括本地 IPv4 网络流量，即使启用了 路由所有 LAN IPv4 连接 选项。 路由所有 LAN IPv4 连接​ 如果启用此设置，AdGuard 将从简单网络过滤中排除局域网连接。 这对复杂的网络可能不起作用。 此设置仅适用于「强制路由 LAN IPv4」已禁用的情况。 IPv6 地址​ 用户可以在此处输入将用于创建 TUN 接口的 IP 地址。 默认情况下，地址是 2001:db8:ad:0:ff::。 "},{"title":"其它​","type":1,"pageTitle":"低级设置","url":"adguard-for-android/solving-problems/low-level-settings/#其它","content":"检测 Samsung Pay​ 如果启用此设置，在使用 Samsung Pay 时将暂停 AdGuard 保护。 韩国用户需要此功能，因为启用 AdGuard 后，他们在使用 Samsung Pay 时遇到了问题。 "},{"title":"助手","type":0,"sectionRef":"#","url":"adguard-for-ios/features/assistant/","content":"","keywords":""},{"title":"助手​","type":1,"pageTitle":"助手","url":"adguard-for-ios/features/assistant/#assistant","content":" 助手是一款工具，可帮助用户从浏览器管理 Safari 中的过滤，而无需切换回应用程序。 要查看设置，请执行以下操作：打开 Safari，然后点击方框中的箭头符号。 然后向下滚动到 AdGuard/AdGuard Pro（取决于您使用的应用程序），点击它就会出现一个包含多个选项的窗口： 在此页面上启用。 关闭开关可将当前域名添加到白名单中。屏蔽此页面上的元素。 点击元素进入「元素屏蔽」模式：选择页面上的任意元素，点击「+」或「-」调整大小，必要时进行预览，然后点击复选标记图标确认。 所选元素将从页面中隐藏，软件在用户规则中添加相应的规则。 移除或禁用它可还原更改。在此页面上报告问题。 打开网络报告工具，只需轻点几下，就能向我们的支持团队发送报告。 如果您发现页面上有遗漏的广告或错误的屏蔽，请使用该功能。 提示 在 iOS 15 设备上，可通过 AdGuard Safari Web 扩展使用助手功能，该扩展增强 AdGuard iOS 版的功能，使用户充分利用 iOS 15 的优势。 有了这个网络扩展，AdGuard 可以应用高级过滤规则，从而拦截更多广告。 "},{"title":"高级保护","type":0,"sectionRef":"#","url":"adguard-for-ios/features/advanced-protection/","content":"","keywords":""},{"title":"启用方式​","type":1,"pageTitle":"高级保护","url":"adguard-for-ios/features/advanced-protection/#启用方式","content":"要启用「高级保护」，请点击屏幕底部左侧第二个图标打开「保护」选项卡，选择「高级保护」模块，通过切换开关滑块激活该功能，然后按照以下说明进行操作。 注意 「高级保护」仅适用于 iOS 15 及更高版本。 If you are using earlier versions of iOS, you will see the YouTube ad blocking module in the app instead of the Advanced protection.  "},{"title":"AdGuard VPN 兼容模式","type":0,"sectionRef":"#","url":"adguard-for-ios/features/compatibility-with-adguard-vpn/","content":"","keywords":""},{"title":"如何启用兼容模式​","type":1,"pageTitle":"AdGuard VPN 兼容模式","url":"adguard-for-ios/features/compatibility-with-adguard-vpn/#如何启用兼容模式","content":"如果您在安装 AdGuard VPN 时已经安装了 AdGuard 广告拦截程序，那么兼容模式会自动开启使得同系列应用程序同时运行。 如果您先安装了 AdGuard VPN，然后才决定试用 AdGuard 广告拦截程序，请按照以下步骤操作以同时使用两款应用。 打开 AdGuard VPN iOS 版，选择屏幕右下角的「⚙ 设置」。点击「应用程序设置」，选择「操作模式」。将 VPN 模式切换为集成模式。 注意 在「集成模式」下，AdGuard VPN 的「排除项」和「DNS 服务器」功能不可用。 "},{"title":"DNS 保护功能","type":0,"sectionRef":"#","url":"adguard-for-ios/features/dns-protection/","content":"","keywords":""},{"title":"DNS 实现​","type":1,"pageTitle":"DNS 保护功能","url":"adguard-for-ios/features/dns-protection/#dns-implementation","content":" 此部分有两个选项：AdGuard 和本地实现。 基本上，这是两种设置 DNS 的方法。 在本地实现中，DNS 由系统而非应用程序处理。 这意味着 AdGuard 不必创建本地 VPN。 遗憾的是，这无法帮助用户规避系统限制并与其他基于 VPN 的应用程序一起使用 AdGuard。如果启用了任何 VPN，则本机 DNS 将被忽略。 因此，用户将无法在本地过滤流量或使用我们全新的 DNS-over-QUIC 协议 (DoQ)。 "},{"title":"DNS 服务器​","type":1,"pageTitle":"DNS 保护功能","url":"adguard-for-ios/features/dns-protection/#dns-servers","content":"在 DNS 保护屏幕上下一个部分是 DNS 服务器。 该部分显示当前选择的 DNS 服务器和加密类型。 要更改设置，请点击按钮进入 DNS 服务器界面。  服务器的速度、使用的协议、可信度、日志记录策略等等。 默认情况下，AdGuard 会建议几个最流行的 DNS 服务器（包括 AdGuard DNS）。 点击任意以更改加密类型（如果服务器所有者提供此类选项）或查看服务器的主页。 我们添加了一些标签，如 No logging policy、Ad blocking、Security 以帮助用户做出选择。 此外，在屏幕底部还有一个添加自定义 DNS 服务器的选项。 它支持常规、DNSCrypt、DNS-over-HTTPS、DNS-over-TLS 和 DNS-over-QUIC 服务器。 用于 DNS-over-HTTPS 的 HTTP 基本认证​ 该功能将 HTTP 协议的身份验证功能引入没有内置身份验证功能的 DNS。 如果要限制特定用户访问自定义 DNS 服务器，DNS 中的身份验证就非常有用。 要启用此功能，请执行以下操作： 在 AdGuard DNS 中，转到「服务器设置」→「设备」→「设置」，然后将 DNS 服务器更改为具有身份验证的服务器。 单击「拒绝其他协议」将移除其他协议使用选项，只启用 DNS-over-HTTPS 身份验证，并防止第三方使用。 复制生成的地址。  在 AdGuard iOS 版中，转到「保护」→「DNS 保护」→「DNS 服务器」，然后将生成的地址粘贴到「添加自定义 DNS 服务器」字段中。 保存并选择新配置。 要检查设置是否正确，请访问我们的诊断页面。 "},{"title":"网络设置​","type":1,"pageTitle":"DNS 保护功能","url":"adguard-for-ios/features/dns-protection/#network-settings","content":" 用户还可以在网络设置上掌握 DNS 安全性。 「过滤移动数据」和「过滤 Wi-Fi」启用或禁用相应网络类型的 DNS 保护。 再往下，在「Wi-Fi 特例」，用户可以将特定 Wi-Fi 网络排除在 DNS 保护之外（例如，如果用户使用 AdGuard Home，您可能希望将家庭网络排除在外）。 "},{"title":"DNS 过滤​","type":1,"pageTitle":"DNS 保护功能","url":"adguard-for-ios/features/dns-protection/#dns-filtering","content":"DNS 过滤让用户通过 AdGuard DNS 过滤器、添加自定义 DNS 过滤器以及使用 DNS 黑名单/白名单来自定义 DNS 流量。 如何访问设置： 「保护」（底部菜单栏中的盾牌图标）→「DNS 保护」→「DNS 过滤」。  DNS 过滤器​ 与 Safari 中的过滤器类似，DNS 过滤器也是根据特殊语法编写的规则集。 AdGuard 将监控 DNS 流量并阻止与一项或多项规则匹配的请求。 用户可以使用过滤器，比如 AdGuard DNS 过滤器或添加主机文件作为过滤器。 可同时添加多个过滤器。 要了解如何操作，请阅读说明。 白名单和黑名单​ 除 DNS 过滤外，用户还可以将单个域名添加到黑名单或白名单中，从而自己管理 DNS 过滤。 黑名单甚至支持相同的 DNS 语法，并且两者都可以被导入和被导出，就像 Safari 内容拦截中的白名单一样。 "},{"title":"低级设置","type":0,"sectionRef":"#","url":"adguard-for-ios/features/low-level-settings/","content":"","keywords":""},{"title":"拦截 IPv6​","type":1,"pageTitle":"低级设置","url":"adguard-for-ios/features/low-level-settings/#blockipv6","content":"对于发送以获取 IPv6 地址的任何 DNS 查询，我们的应用程序将返回空响应（就好像该 IPv6 地址不存在一样）。 现在可以设置不返回 IPv6 地址。 此时，该功能的描述变得过于技术性：配置或禁用 IPv6 是高级用户的专有领域。 如果您是其中之一，您可能已经知道这个功能是什么，如果不是，就没必要深入了解这些细节了。 "},{"title":"Bootstrap 和 Fallback（后备）服务器​","type":1,"pageTitle":"低级设置","url":"adguard-for-ios/features/low-level-settings/#bootstrap-fallback","content":"Fallback 是指备用 DNS 服务器。 如果用户选择的 DNS 服务器发生问题，需要 fallback 功能设置备用 DNS 服务器，直到主服务器响应。 使用 Bootstrap 时，情况要复杂一些。 为了让 AdGuard iOS 版使用自定义安全 DNS 服务器，我们的应用程序需要首先获取其 IP 地址。 为此，默认情况下使用系统 DNS，但有时由于各种原因无法使用。 在这种情况下，可以使用 Bootstrap 获取所选安全 DNS 服务器的 IP 地址。 以下两个示例说明自定义 Bootstrap 服务器何时可能有所帮助： 当系统默认 DNS 服务器不返回安全 DNS 服务器的 IP 地址，且无法使用安全 DNS 服务器时。当我们的应用程序和第三方 VPN 同时使用，且无法使用系统 DNS 作为引导时。 "},{"title":"其他功能","type":0,"sectionRef":"#","url":"adguard-for-ios/features/other-features/","content":"","keywords":""},{"title":"深色主题​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#深色主题","content":"  该设置位于「设置」→「通用」屏幕的顶部，可让用户在深色和浅色主题之间切换。 "},{"title":"小工具​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#小工具","content":" AdGuard 支持小工具，可快速访问 Safari 内容拦截和 DNS 保护开关，还可显示全局请求统计。 "},{"title":"仅通过 Wi-Fi 自动更新​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#仅通过-wi-fi-自动更新","content":"如果启用此设置，AdGuard 将仅使用 Wi-Fi 进行后台过滤器更新. "},{"title":"颠倒白名单​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#颠倒白名单","content":"Safari 过滤的另一种模式，它可以解除对除列表中指定网站以外的所有地方的广告屏蔽。 默认禁用。 "},{"title":"高级模式​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#高级模式","content":"高级模式解锁高级设置。 除非您知道自己在做什么，或者事先咨询过技术支持人员，否则我们不建议您乱动它们。 "},{"title":"重置统计信息​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#重置统计信息","content":"此选项会清除所有的统计数据，例如访问次数等等。 "},{"title":"重置设置​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#重置设置","content":"该选项将要重置您的所有设置。 "},{"title":"支持​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#支持","content":"使用此选项可以联系支持人员、报告错过的广告（尽管为了方便起见，我们建议使用助手功能或 AdGuard 的 Safari Web 扩展）、导出日志或提出功能请求。 "},{"title":"关于​","type":1,"pageTitle":"其他功能","url":"adguard-for-ios/features/other-features/#关于","content":"包含应用程序的当前版本以及各种很少需要的选项和链接。 "},{"title":"Safari 防护","type":0,"sectionRef":"#","url":"adguard-for-ios/features/safari-protection/","content":"","keywords":""},{"title":"内容拦截器​","type":1,"pageTitle":"Safari 防护","url":"adguard-for-ios/features/safari-protection/#content-blockers","content":"内容拦截器是过滤规则的“容器”，实际作用是拦截广告和跟踪。 iOS 版 AdGuard 包含六种内容阻止程序：常规、隐私、社交、安全、自定义和其他。 以前，Apple 只允许每个内容拦截器包含最多50万个过滤规则，但随着 iOS 15 的发布，上限已增至150万个。 所有内容拦截器、它们的状态、它们当前包含的主题过滤器以及使用的过滤规则总数都可以在相应屏幕上的「高级设置」（点击右下角的齿轮图标 →「常规」→「高级设置」→「内容拦截器」）。  提示 保持启用所有内容拦截器，以获得最佳过滤质量。 "},{"title":"过滤器​","type":1,"pageTitle":"Safari 防护","url":"adguard-for-ios/features/safari-protection/#filters","content":"内容拦截器的工作基于过滤器，有时也称为过滤器列表。 每个过滤器都对应一个过滤规则的列表。 如果用户在浏览时启用广告拦截器，它就会根据这些过滤规则不断检查所访问的页面和页面上的元素，并拦截任何符合规则的内容。 制定的规则可阻止广告、跟踪器等。 所有过滤器均按主题类别分组。 要查看这些类别的完整列表（不要与内容拦截器混淆），请通过点击盾牌图标打开「保护」部分，然后转到「Safari 保护」→「过滤器」。  共有 8 个类别，每个类别都包含多个过滤器，这些过滤器都有一个共同的目的，即阻止广告、社交媒体小工具、Cookie 通知、保护用户免受在线诈骗。 要确定哪些筛选器适合您的需要，请阅读它们的说明，并根据标签进行导航 (ads、privacy、recommended 等等)。 注意 启用的过滤器越多，并不能保证广告越少。 同时启用大量不同的过滤器会降低广告拦截的质量。 默认情况下，自定义过滤器类别为空，供用户按 URL 添加过滤器。 用户可以在互联网上找到过滤器，也可以尝试自己创建一个。 "},{"title":"用户规则​","type":1,"pageTitle":"Safari 防护","url":"adguard-for-ios/features/safari-protection/#user-rules","content":"用户可以添加新规则，手动输入规则，也可以使用 Safari 中的 AdGuard 手动阻止工具。 使用此工具可以自定义 Safari 过滤，而无需添加整个过滤器列表。 了解关于创建自己过滤规则的更多详情。 但请注意，其中许多功能无法在 iOS 上的 Safari 中运行。  "},{"title":"白名单​","type":1,"pageTitle":"Safari 防护","url":"adguard-for-ios/features/safari-protection/#allowlist","content":"「Safari 保护」屏幕的第三部分。 如果用户想在某个网站上禁用广告拦截，白名单将有所帮助。 它让用户将域名和子域名添加到黑名单中。 AdGuard iOS 版具有导入/导出功能，因此可以轻松地将一台设备的白名单转移到另一台设备。 "},{"title":"How to block YouTube ads","type":0,"sectionRef":"#","url":"adguard-for-ios/solving-problems/block-youtube-ads/","content":"","keywords":""},{"title":"如何在 YouTube 应用中拦截广告​","type":1,"pageTitle":"How to block YouTube ads","url":"adguard-for-ios/solving-problems/block-youtube-ads/#如何在-youtube-应用中拦截广告","content":"Open the YouTube app.Choose a video and tap Share.Tap More, then select Block YouTube Ads (by AdGuard). AdGuard will open its ad-free video player. "},{"title":"如何在 Safari 中拦截 YouTube 广告​","type":1,"pageTitle":"How to block YouTube ads","url":"adguard-for-ios/solving-problems/block-youtube-ads/#如何在-safari-中拦截-youtube-广告","content":"提示 Make sure you've given AdGuard access to all websites. You can check it in Safari → Extensions → AdGuard. Then open AdGuard and enable Advanced protection. 在 Safari 中打开 youtube.comChoose a video and tap Share.Tap Block YouTube Ads (by AdGuard). AdGuard will open its ad-free video player. "},{"title":"安装","type":0,"sectionRef":"#","url":"adguard-for-ios/installation/","content":"","keywords":""},{"title":"系统要求​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#系统要求","content":""},{"title":"iPhone​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#iphone","content":"要求 iOS 11.2 或更高版本。 "},{"title":"iPad​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#ipad","content":"要求 iPadOS 11.2 或更高版本。 "},{"title":"iPod touch​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#ipod-touch","content":"要求 iOS 11.2 或更高版本。 "},{"title":"AdGuard iOS版的安装过程​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#adguard-ios版的安装过程","content":"AdGuard iOS版是 App Store 中的一款应用程序。 To install it on your device, open the App Store and tap the Search icon on the bottom of the screen.  Type adguard in the search bar and tap the string adGuard which will be among search results.  On the opened page of the App Store tap GET under the string AdGuard - adblock&amp;privacy and then tap INSTALL. 为了完成安装过程，您可能会看到要求输入您的苹果 ID 和密码的弹窗。 输入您的 ID 和密码后，请等待安装成功完成。  "},{"title":"AdGuard Pro iOS版的安装过程​","type":1,"pageTitle":"安装","url":"adguard-for-ios/installation/#adguard-pro-ios版的安装过程","content":"AdGuard Pro 是 AdGuard iOS版的付费版本。AdGuard Pro 为用户提供更多功能（与启用高级版的 AdGuard 应用程序相同）。 To install it on your device run the App Store application and tap the Search icon on the bottom of the screen.  Type adguard in the search form, and then tap the string adGuard pro - adblock which will be shown among search results.  On the opened page of the App Store tap the button with the cost of the license under the string AdGuard Pro - adblock, and then tap BUY. 为了完成安装过程，您可能会看到要求输入您的苹果 ID 和密码的弹窗。 输入您的 ID 和密码后，请等待安装成功完成。  您要输入 AdGuard 个人账号的用户身份信息以激活许可。 为执行此操作，用户至少要有一个许可。 "},{"title":"How to avoid compatibility problem with FaceTime","type":0,"sectionRef":"#","url":"adguard-for-ios/solving-problems/facetime-compatibility-issues/","content":"How to avoid compatibility problem with FaceTime 信息 本文适用于 iOS 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理， 请下载 AdGuard 应用程序。 It turned out that Full-Tunnel mode might interfere not only with compatibility with other VPN applications, but also with FaceTime. Some users have encountered the problem that FaceTime does not work on the device when the AdGuard app for iOS is in Full-Tunnel mode. It is likely but not guaranteed that FaceTime will work when AdGuard is in Full-Tunnel mode without VPN icon because it is also incompatible with other VPN apps and unstable. If you want to use FaceTime and make sure that video/audio calls don't stop working, use Split-Tunnel mode. To enable it, follow the instructions: Go to AdGuard for iOS Settings → General settings.Enable Advanced mode and go to the Advanced settings section that appears right after.Open Tunnel mode and select Split-Tunnel. Done! Now there should be no problems with FaceTime compatibility.","keywords":""},{"title":"Low-level Settings guide","type":0,"sectionRef":"#","url":"adguard-for-ios/solving-problems/low-level-settings/","content":"","keywords":""},{"title":"How to reach the Low-level settings​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#how-to-reach-the-low-level-settings","content":"警告 更改「低级设置」可能会导致 AdGuard 的性能出现问题，也可能会断开网络连接或侵害安全和隐私。 如果您知道自己在设置什么，或者是我们的客户支持要求您这样做，请打开此部分。 To go to Low-level settings, tap the gear icon at the bottom right of the screen to open Settings. Select the General section and then toggle on the Advanced mode switch, after that the Advanced settings section will appear below. Tap Advanced settings to reach the Low-level settings section. "},{"title":"低级设置​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#低级设置","content":""},{"title":"Tunnel mode​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#tunnel-mode","content":"There are two main tunnel modes: Split and Full. Split-Tunnel mode provides compatibility of AdGuard and so-called &quot;Personal VPN&quot; apps. In Full-Tunnel mode no other VPN can work simultaneously with AdGuard. There is a specific feature of Split-Tunnel mode: if DNS proxy does not perform well, for example, if the response from the AdGuard DNS server was not returned in time, iOS will &quot;amerce&quot; it and reroute traffic through DNS server, specified in iOS settings. No ads are blocked at this time and DNS traffic is not encrypted. In Full-Tunnel mode only the DNS server specified in AdGuard settings is used. If it does not respond, the Internet will simply not work. Enabled Full-Tunnel mode may cause the incorrect performance of some programs (for instance, Facetime), and lead to problems with app updates. By default, AdGuard uses Split-Tunnel mode as the most stable option. There is also an additional mode called Full-Tunnel (without VPN icon). This is exactly the same as Full-Tunnel mode, but it is set up so that the VPN icon is not displayed in the system line. "},{"title":"Blocking mode​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#blocking-mode","content":"In this module you can select the way AdGuard will respond to DNS queries that should be blocked: Default — respond with zero IP address when blocked by adblock-style rules; respond with the IP address specified in the rule when blocked by /etc/hosts-style rulesREFUSED — respond with REFUSED codeNXDOMAIN — respond with NXDOMAIN codeUnspecified IP — respond with zero IP addressCustom IP — respond with a manually set IP address "},{"title":"Block IPv6​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#block-ipv6","content":"By moving the toggle to the right, you activate the blocking of IPv6 queries (AAAA requests). AAAA-type DNS requests will not be resolved, hence only IPv4 queries can be processed. "},{"title":"Blocked response TTL​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#blocked-response-ttl","content":"Here you can set the period for a device to cache the response to a DNS request. During the specified time to live (in seconds) the request can be read from the cache without re-requesting the DNS server. "},{"title":"Bootstrap servers​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#bootstrap-servers","content":"For DNS-over-HTTPS, DNS-over-TLS, and DNS-over-QUIC a bootstrap server is required for getting the IP address of the main DNS server. If not specified, the DNS server from iOS settings is used as the bootstrap server. "},{"title":"Fallback servers​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#fallback-servers","content":"Here you can specify an alternate server to which a request will be rerouted if the main server fails to respond. If not specified, the system DNS server will be used as the fallback. It is also possible to specify none, in this case, there will be no fallback server set and only the main DNS server will be used. "},{"title":"Background app refresh time​","type":1,"pageTitle":"Low-level Settings guide","url":"adguard-for-ios/solving-problems/low-level-settings/#background-app-refresh-time","content":"Here you can select the frequency at which the application will check for filter updates while in the background. Note that update checks will not be performed more often than the specified period, but the exact intervals may not be respected. "},{"title":"How to enable system-wide filtering in AdGuard for iOS","type":0,"sectionRef":"#","url":"adguard-for-ios/solving-problems/system-wide-filtering/","content":"","keywords":""},{"title":"关于系统层面上的过滤​","type":1,"pageTitle":"How to enable system-wide filtering in AdGuard for iOS","url":"adguard-for-ios/solving-problems/system-wide-filtering/#关于系统层面上的过滤","content":"系统层面上的过滤是指不仅在 Safari 浏览器里，而且在其它应用程序和浏览器里屏蔽广告及跟踪器。 This article will tell you how to enable it on your iOS device. On iOS, the only way to block ads and trackers system-wide is to use DNS filtering. First, you have to enable DNS protection. 具体操作： Open AdGuard for iOS.Tap Protection icon (the second icon in the bottom menu bar).Turn DNS protection switch on.  Now, if your purpose is to block ads and trackers system-wide, you have three options: Use AdGuard DNS filter (Protection (the shield icon in the bottom menu) → DNS protection → DNS filtering → DNS filters → AdGuard DNS filter).Use AdGuard DNS server (Protection (the shield icon in the bottom menu) → DNS protection → DNS server → AdGuard DNS) or another blocking DNS server to your liking.Add a custom DNS filter/hosts file to your liking. The first and third option have several advantages: You can use any DNS server at your discretion and you are not tied up to a specific blocking server, because the filter does the blocking.You can add multiple DNS filters and/or hosts files (although using too many might slow down AdGuard).  "},{"title":"How to add custom DNS filter/hosts file​","type":1,"pageTitle":"How to enable system-wide filtering in AdGuard for iOS","url":"adguard-for-ios/solving-problems/system-wide-filtering/#how-to-add-custom-dns-filterhosts-file","content":"You can add any DNS filter or hosts file you like. For the sake of the example, let's add OISD Blocklist Big. Copy this link: https://big.oisd.nl (it's a link for OISD Blocklist Big filter)Open Protection (the shield icon in the bottom menu) → DNS protection → DNS filtering → DNS filters.Tap Add a filter.Paste the link into the filter URL field.Tap Next → Add.  Add any number of other DNS filters the same way by pasting a different URL at step 4. 在这里您可以找到各种过滤器以及它们的链接。 "},{"title":"How to activate premium features","type":0,"sectionRef":"#","url":"adguard-for-ios/solving-problems/premium-activation/","content":"How to activate premium features 信息 本文适用于 iOS 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理， 请下载 AdGuard 应用程序。 There are two options to activate premium features on AdGuard for iOS app: Purchase a subscription. Just tap the Get Premium plaque anywhere in the app and follow the on-screen instructions. All you'll need to do is enter your Apple ID password and confirm the purchase. You can choose between a monthly, yearly and lifetime subscriptions. Use an AdGuard license (you can purchase it at the AdGuard website). Log into your AdGuard personal account via the app: go to AdGuard app → Settings → License screen and tap the Login button there. You'll be asked to enter your AdGuard Personal account credentials*. After you do, if you have any valid license key in your account, it will be automatically picked up to activate Premium in your AdGuard for iOS app. As an alternative, you can just enter a valid license key in the e-mail field leaving password field blank to activate Premium features. 注意 AdGuard Pro for iOS (our other iOS app) can only be purchased from App Store.","keywords":""},{"title":"浏览器助手","type":0,"sectionRef":"#","url":"adguard-for-mac/features/browser-assistant/","content":"","keywords":""},{"title":"工作原理​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-mac/features/browser-assistant/#工作原理","content":"AdGuard 浏览器助手是一个浏览器扩展。 它让用户快速管理 AdGuard 应用程序： 启用或禁用特定网站的保护功能（网站名称下的切换按钮）禁用保护 30 秒禁用保护（右上角的暂停图标）手动拦截广告打开过滤日志报告错误拦截打开 AdGuard 设置查看网站证书并管理 HTTPS 过滤（网站名称旁边的锁定图标） "},{"title":"安装方式​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-mac/features/browser-assistant/#安装方式","content":"安装 AdGuard Mac 版时，系统会提示您为默认浏览器安装浏览器助手。 如果跳过此步骤，可以稍后安装。 设置步骤如下： 开启 AdGuard 菜单。单击齿轮图标并选择「首选项」。切换到「助手」选项卡。单击默认浏览器旁边的「获取扩展」。从浏览器的扩展商店安装助手。  在网站进行设置： 打开助手页面。在浏览器名称下，选择「安装」。从浏览器的扩展商店安装助手。 注意 在少数情况下，浏览器可能与助手不兼容。 要从浏览器管理 AdGuard，可以安装旧版浏览器助手。 "},{"title":"旧版浏览器助手​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-mac/features/browser-assistant/#旧版浏览器助手","content":"旧版助手是 AdGuard 浏览器助手的先前版本。 这是一个无需额外安装的用户脚本。 虽然旧版助手工作出色，但它也有几个缺点： 功能比扩展版少。用户必须等待用户脚本插入网页，有时它不会立即加载。无法隐藏页面上的助手图标。 我们建议用户仅在新助手不可用的情况下使用旧版助手。 "},{"title":"Safari Web extension","type":0,"sectionRef":"#","url":"adguard-for-ios/web-extension/","content":"","keywords":""},{"title":"What it does​","type":1,"pageTitle":"Safari Web extension","url":"adguard-for-ios/web-extension/#what-it-does","content":"By default, Safari provides only basic tools to content blockers. These tools don't allow the level of performance that can be found in content blockers on other operating systems (Windows, Mac, Android). For example, AdGuard apps on other platforms can use such effective weapons against ads as CSS rules, CSS selectors, and scriptlets. Unfortunately, these instruments are absolutely irreplaceable when dealing with more complex cases such as pre-roll ads on YouTube, for example. AdGuard's Safari Web extension compliments AdGuard by giving it the ability to employ these types of filtering rules. Besides that, AdGuard's Safari Web extension can be used to quickly manage AdGuard for iOS right from the browser. Tap the Extensions button — it's the one with a jigsaw icon, depending on your device type it may be located to the left or to the right of the address bar. Find AdGuard in the list and tap it.  On iPads AdGuard's Safari Web extension is accessible directly by tapping the AdGuard icon in the browser's address bar. You will see the following list of options: Enabling/disabling protection on the website. Turning the switch off will disable AdGuard completely for the current website and add a respective exclusion rule. Turning the switch back on will resume protection for the website and delete the rule. Any such change will require some time to take effect. Blocking elements on the page manually. Tap the Block elements on this page button to prompt a pop-up for element blocking. Select any element on the page you want to hide, adjust the selection zone, then preview changes and confirm the removal. A corresponding filtering rule will be added to AdGuard (that you can later disable or delete to revert the change). Report an issue. Swipe up to bring out the Report an issue button. Use it to report a missed ad or any other problem that you encountered on the current page. "},{"title":"How to enable AdGuard's Safari Web extension​","type":1,"pageTitle":"Safari Web extension","url":"adguard-for-ios/web-extension/#how-to-enable-adguards-safari-web-extension","content":"注意 AdGuard's Safari Web extension requires access to the web pages' content to operate, but doesn't use it for any purpose other than blocking ads. "},{"title":"In the iOS settings​","type":1,"pageTitle":"Safari Web extension","url":"adguard-for-ios/web-extension/#in-the-ios-settings","content":"The Web extension is not a standalone tool and requires AdGuard for iOS. If you don't have AdGuard for iOS installed on your device, please install it first and complete the onboarding process to prepare it for work. Once done, open Settings → Safari → Extensions.   Find ALLOW THESE EXTENSIONS section and then find AdGuard among the available extensions.  Tap it, then toggle the switch. On the same screen, set the All Websites permission for AdGuard to either Allow or Ask. If you choose Allow, you won't have to give permission every time you visit a new website. If you are unsure, choose Ask to grant permissions on a per-site basis.  "},{"title":"In Safari​","type":1,"pageTitle":"Safari Web extension","url":"adguard-for-ios/web-extension/#in-safari","content":"Alternitavely, you can also turn AdGuard extension on from the Safari browser. Tap the Extensions button (if you don't see it next to the address bar, tap the aA icon).  Then find the Manage Extensions option in the list and tap it. In the opened window turn on the switch next to AdGuard.   If you use this method, you may have to go to Safari settings to grant AdGuard extension the necessary permissions anyway. You should now be able to see AdGuard among the available extensions. Tap it and then the yellow i icon. Enable Advanced protection by tapping the Turn on button and confirming the action. 注意 If you use AdGuard for iOS without Premium subscription, you won't be able to enable Advanced protection. Alternatively, you can enable Advanced protection directly from the app, in the Protection tab (second from the left in the bottom icon row). AdGuard's Safari Web extension only works on iOS versions 15 and later. "},{"title":"浏览器扩展","type":0,"sectionRef":"#","url":"adguard-for-mac/features/extensions/","content":"","keywords":""},{"title":"AdGuard 助手（旧版）​","type":1,"pageTitle":"浏览器扩展","url":"adguard-for-mac/features/extensions/#adguard-助手旧版","content":"本用户脚本让用户从浏览器管理 AdGuard 保护。 新版助手是一个浏览器扩展，可以从浏览器商店安装，而旧版助手是一个用户脚本，不需要额外安装。 这两种助手都有一些共同的功能： 启用或禁用特定网站的保护功能禁用保护 30 秒手动拦截广告报告错误拦截 不过，新版助手更加先进。 新版助手还可以管理所有网站的 AdGuard 保护、检查网站证书、管理 HTTPS 过滤，以及打开过滤日志或应用程序设置。 我们建议用户仅在新助手不可用的情况下使用旧版助手。 "},{"title":"AdGuard Extra​","type":1,"pageTitle":"浏览器扩展","url":"adguard-for-mac/features/extensions/#adguard-extra","content":"当常规规则不够用时，此用户脚本可以拦截最复杂的广告。 它还能防止网站规避广告拦截器并重新插入被拦截的广告。 我们建议用户始终保持 AdGuard Extra 启用状态。 要安装用户脚本，请单击「+」。 您可以在 greasyfork.org 上查看用户脚本。 "},{"title":"DNS","type":0,"sectionRef":"#","url":"adguard-for-mac/features/dns/","content":"","keywords":""},{"title":"DNS 保护功能​","type":1,"pageTitle":"DNS","url":"adguard-for-mac/features/dns/#dns-保护功能","content":"「DNS」部分包含一个功能选项，即「DNS 保护」，它具有多项配置： 提供商过滤器黑名单白名单  如果用户启用「DNS 保护」，DNS 流量将由 AdGuard 管理。 "},{"title":"提供商​","type":1,"pageTitle":"DNS","url":"adguard-for-mac/features/dns/#提供商","content":"在「提供商」下，用户可以选择一个 DNS 服务器来加密 DNS 流量，并在必要时阻止广告和跟踪器。 我们推荐 AdGuard DNS。 要设置更高级的配置，可以设置私有 AdGuard DNS 服务器或点击左下角的「+」图标添加自定义服务器。 "},{"title":"过滤器​","type":1,"pageTitle":"DNS","url":"adguard-for-mac/features/dns/#过滤器","content":"DNS 过滤器在 DNS 级别应用广告拦截规则。 这种过滤不如常规的广告拦截精确，但对于拦截整个域名特别有用。 要添加 DNS 过滤器，请单击「+」。 了解更多 DNS 过滤器请访问 filterlists.com。 "},{"title":"黑名单​","type":1,"pageTitle":"DNS","url":"adguard-for-mac/features/dns/#黑名单","content":"此列表中的域名将被拦截。 要添加域名，请单击「+」。 用户可以使用专用语法添加域名或 DNS 过滤规则。 要导出或导入黑名单，请打开上下文菜单。 "},{"title":"白名单​","type":1,"pageTitle":"DNS","url":"adguard-for-mac/features/dns/#白名单","content":"该列表中的域名不会被过滤。 要添加域，请单击「+」。 要导出或导入白名单，请打开上下文菜单。 "},{"title":"过滤器","type":0,"sectionRef":"#","url":"adguard-for-mac/features/filters/","content":"","keywords":""},{"title":"过滤器​","type":1,"pageTitle":"过滤器","url":"adguard-for-mac/features/filters/#过滤器","content":" 过滤器列表是使用专用语法编写的规则集。 AdGuard 解释并执行这些规则，以拦截广告、跟踪器和其他烦人的内容。 有些过滤器（如 AdGuard 基础过滤器、跟踪保护过滤器或 EasyList）已预装，其他过滤器可额外安装。 我们推荐用户启用以下过滤器： AdGuard 基础过滤器AdGuard 跟踪保护过滤器和 AdGuard URL 跟踪过滤器AdGuard 恼人广告过滤器语言过滤器 这些过滤器对于拦截大多数广告、跟踪器和恼人的元素非常重要。 要进行更高级的广告拦截，用户可以使用自定义过滤器和用户规则。 要添加过滤器，请单击列表左下角的「+」。 要启用过滤器，请选择其复选框。 "},{"title":"用户规则​","type":1,"pageTitle":"过滤器","url":"adguard-for-mac/features/filters/#用户规则","content":"在 AdGuard Mac 版中，用户规则位于「过滤器」中。 要创建规则，请单击「+」。 要启用规则，请选择其复选框。 要导出或导入规则，请打开上下文菜单。  "},{"title":"主窗口","type":0,"sectionRef":"#","url":"adguard-for-mac/features/main/","content":"主窗口 信息 本文介绍了 Mac 版的 AdGuard，它是一款多功能广告拦截器，可在系统级别保护设备。 要了解其工作原理，请下载 AdGuard 应用程序 用户可以在 AdGuard 主窗口启用或禁用 AdGuard 保护。 此外，主窗口还提供应用统计信息的快速概览：包括安装或上次重置统计信息以来 AdGuard 拦截的广告、跟踪器和其他威胁。 用户还可以通过点击齿轮图标来访问设置、检查应用程序和过滤器更新、联系支持及管理许可证。","keywords":""},{"title":"网络","type":0,"sectionRef":"#","url":"adguard-for-mac/features/network/","content":"","keywords":""},{"title":"常规​","type":1,"pageTitle":"网络","url":"adguard-for-mac/features/network/#常规","content":" "},{"title":"自动过滤应用程序流量​","type":1,"pageTitle":"网络","url":"adguard-for-mac/features/network/#自动过滤应用程序流量","content":"默认情况下，AdGuard 在大多数浏览器中拦截广告和跟踪器（Tor 浏览器是个例外）。 此设置还允许 AdGuard 屏蔽应用程序中的广告。 要管理过滤后的应用程序，请单击「应用程序」。 "},{"title":"过滤 HTTPS 协议​","type":1,"pageTitle":"网络","url":"adguard-for-mac/features/network/#过滤-https-协议","content":"此设置让 AdGuard 过滤目前大多数网站和应用程序使用的安全 HTTPS 协议。 默认情况下，包含潜在敏感信息（例如银行服务）的网站不会被过滤。 要管理 HTTPS 排除项，请单击「排除项」。 默认情况下，AdGuard 不过滤具有 Extended Validation（EV）证书的网站。 如果需要，用户还可以启用「过滤带 EV 证书的网站」。 "},{"title":"出站代理​","type":1,"pageTitle":"网络","url":"adguard-for-mac/features/network/#出站代理","content":"用户可以设置 AdGuard 通过代理服务器路由所有设备的流量。 "},{"title":"HTTP 代理​","type":1,"pageTitle":"网络","url":"adguard-for-mac/features/network/#http-代理","content":"用户可以将 AdGuard 用作 HTTP 代理服务器。 这样就可以过滤连接到代理的其他设备上的流量。 确保 Mac 和其他设备连接到同一网络，并在要通过代理服务器路由的设备上输入代理端口（通常在网络设置中）。 要同时过滤 HTTPS 流量，请将 AdGuard 代理证书传输到此设备。 了解有关安装代理证书的更多信息。 "},{"title":"常规","type":0,"sectionRef":"#","url":"adguard-for-mac/features/general/","content":"","keywords":""},{"title":"如何打开应用设置​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#如何打开应用设置","content":"To configure AdGuard for Mac, click the gear icon in the upper right corner of the main window and select Preferences.  "},{"title":"常规​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#常规","content":" "},{"title":"不拦截搜索广告和网站自我推销广告​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#不拦截搜索广告和网站自我推销广告","content":"此功能可防止 AdGuard 阻止搜索广告和网站上的自我推销。 例如，当用户在网上购物时，想要查看某些网站提供的折扣时，该功能就非常有用。 用户可以将自我推销和搜索广告排除在过滤之外，而不是将这些网站添加到白名单中。 "},{"title":"启动特定语言过滤器​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#启动特定语言过滤器","content":"该功能可检测用户访问的网站语言，并自动激活相应的过滤器，以实现更准确的广告拦截。 如果用户经常更换语言，这一功能尤其有用。 "},{"title":"AdGuard 随系统启动运行​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#adguard-随系统启动运行","content":"重启电脑后，该功能会自动启动 AdGuard。 这有助于保持 AdGuard 保护处于激活状态，而无需手动打开应用程序。 "},{"title":"隐藏菜单栏的图标​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#隐藏菜单栏的图标","content":"该功能从菜单栏中隐藏 AdGuard 图标，但会保持 AdGuard 在后台运行。 如果要禁用 AdGuard，请单击主窗口菜单中的「退出 AdGuard」。 "},{"title":"白名单​","type":1,"pageTitle":"常规","url":"adguard-for-mac/features/general/#白名单","content":"添加到此列表的网站不会被过滤。 用户还可以从「用户规则」转到白名单中的网站。 "},{"title":"隐身模式","type":0,"sectionRef":"#","url":"adguard-for-mac/features/stealth/","content":"","keywords":""},{"title":"高级隐私保护​","type":1,"pageTitle":"隐身模式","url":"adguard-for-mac/features/stealth/#高级隐私保护","content":" 「高级隐私保护」通过删除 Cookie、UTM 标签、在线计数器和分析系统来保护个人隐私。 它不让网站收集 IP 地址、设备和浏览器参数、搜索查询及其他个人信息。 了解更多关于隐身模式的设置。 "},{"title":"安全","type":0,"sectionRef":"#","url":"adguard-for-mac/features/security/","content":"","keywords":""},{"title":"钓鱼和恶意保护​","type":1,"pageTitle":"安全","url":"adguard-for-mac/features/security/#钓鱼和恶意保护","content":" AdGuard 拥有一个欺诈、网络钓鱼和恶意域名的数据库。 如果用户启用「钓鱼和恶意保护」，AdGuard 在您每次访问危险网站前发出警告。 即使网站只有一部分是危险的，AdGuard 也会对其进行检查并显示警告。 请放心，您的隐私是安全的。 AdGuard 检查的是哈希前缀而不是 URL，因此它并不知道用户访问哪些网站。 了解更多有关 AdGuard 的安全检查。 注意 AdGuard 不是杀毒软件。 它无法阻止用户下载可疑文件或删除已经存在的病毒。 "},{"title":"Advanced Settings guide","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/advanced-settings/","content":"","keywords":""},{"title":"如何转到高级设置​","type":1,"pageTitle":"Advanced Settings guide","url":"adguard-for-mac/solving-problems/advanced-settings/#如何转到高级设置","content":"警告 Changing Advanced Settings may cause problems with AdGuard's performance, break the Internet connection, or compromise your security and privacy. Make changes to this section only if you are sure of what you are doing or our support team has asked you to do it. To find Advanced Settings, open AdGuard, click the gear icon, select Advanced, then select Advanced Settings. "},{"title":"高级设置​","type":1,"pageTitle":"Advanced Settings guide","url":"adguard-for-mac/solving-problems/advanced-settings/#高级设置","content":"network.extension.exclude.domains The listed domains will be excluded from filtering in the Network Extension mode. Use a comma or line break to separate values. network.extension.exclude.ports The listed ports will be excluded from filtering in the Network Extension mode. Use a comma or line break to separate values. network.extension.route.exclude The listed routes will be excluded from filtering in the Network Extension mode. Set routes using an IP address or destination CIDR. Separate values with commas or line breaks. network.extension.http.downgrade.bundleids Here you can specify a list of applications for which the HTTP/2 protocol will be downgraded to HTTP/1.1 in the Network Extension filtering mode. The bundle ID should be separated by a comma or a line break. network.extension.monterey.force.split.tunnel Here you can prohibit AdGuard from using the &quot;default route&quot; which is enabled by default in the Network Extension mode on macOS Monterey. AdGuard uses &quot;default route&quot; to disable iCloud Private Relay and Protect Mail Activity, as it cannot operate in unison with them. You will find more information about the problem in this article. network.extension.dns.redirect.exclude.bundleids Here you can specify a list of applications that make DNS queries directly not via system DNS resolver (for example, some VPN clients or DNS filtering applications). DNS filtering will be disabled for them in the Network Extension mode. The bundle IDs should be separated by a comma or line break. network.dns.filter.secure.request Redirects secure DNS requests to a local DNS proxy, if there is one available. network.https.ocsp.check By setting true, you enable HTTPS certificate revocation checking. network.tcp.keepalive.enabled Periodically sends TCP packets over an idle connection to ensure that it remains active and to renew NAT timeouts. network.tcp.keepalive.interval.seconds Idle time, in seconds, before sending a keepalive probe. If 0 is specified, the system will use the default value. network.tcp.keepalive.timeout.seconds Time, in seconds, before sending another keepalive probe to an unresponsive peer. If 0 is specified, the value selected by the system will be used. network.https.ech.enabled Uses a local DNS proxy to look for configs in the ECH Config Lists. If found, encrypts ClientHellos. network.https.enforce.certificate.transparency Verifies the authenticity of all certificates for the domain based on Chrome Certificate Transparency Policy. network.https.filter.http3.enabled By setting true, you allow AdGuard to filter traffic sent over HTTP/3, the latest version of the HTTP protocol based on QUIC. network.filtering.localnetwork By setting true, you enable local network filtering. network.filtering.localhost By setting true, you enable LoopBack filtering. dns.proxy.bootstrap.ips Here you can enter the IP addresses of the DNS servers that will be used to determine the address of the encrypted DNS server. dns.proxy.fallback.ips Here you can specify a list of IP addresses of DNS servers that will be used as backups in case the encrypted DNS server fails to respond. dns.proxy.fallback.on.upstreams.failure.enabled Normal queries will be redirected to a fallback upstream if all normal upstreams fail. dns.proxy.detect.search.domains This option enables automatic detection of the local network domain, which will be automatically redirected to the fallback DNS server instead of the main DNS server. dns.proxy.fallback.domains Here you can list domains for which the fallback DNS server will be used instead of the main DNS server. dns.proxy.adblockrules.blocking.mode Here you can specify the type of DNS server response to blocked requests, corresponding to ad-blocker-style rules. 0 — respond with REFUSED1 — respond with NXDOMAIN2 — respond with 0.0.0.0 or the addresses specified in dns.proxy.blocking.response.IPv4.address and/or dns.proxy.blocking.response.IPv6.address dns.proxy.hostrules.blocking.mode Here you can specify the type of DNS server response to blocked requests, corresponding to hosts rules: 0 — respond with REFUSED1 — respond with NXDOMAIN2 — respond with 0.0.0.0 or the addresses specified in dns.proxy.blocking.response.IPv4.address and/or dns.proxy.blocking.response.IPv6.address dns.proxy.blocking.response.IPv4.address Here you can specify the IPv4 address that will be returned in response to blocked &quot;A&quot; requests when dns.proxy.adblockrules.blocking.mode or dns.proxy.hostrules.blocking.mode is set to the response type &quot;ADDRESS&quot;. dns.proxy.blocking.response.IPv6.address Here you can specify the IPv6 address that will be returned in response to blocked &quot;AAAA&quot; requests when dns.proxy.adblockrules.blocking.mode or dns.proxy.hostrules.blocking.mode is set to the response type &quot;ADDRESS&quot;. dns.proxy.block.AAAA.requests Here you can enable IPv6 DNS query blocking. dns.proxy.blocked.response.TTL.in.seconds Here you can specify the TTL (time to live) value that will be returned in response to a blocked request. dns.proxy.parallel.upstream.queries.enabled All upstreams are queried simultaneously. The first response is returned. dns.proxy.servfail.on.upstreams.failure.enabled Responds to upstream failure with a SERVFAIL packet. dns.proxy.http3.enabled Enables HTTP/3 for DNS-over-HTTPS upstreams to accelerate connection. dns.proxy.block.encrypted.client.hello.response Removes the Encrypted Client Hello parameters from responses. stealth.antidpi.http.split.fragment.size Adjusts the size of the HTTP request fragmentation. 有效值：1–1500。 If an invalid size is specified, the system will use the default value. stealth.antidpi.clienthello.split.fragment.size This option specifies the size of TCP packet fragmentation, which helps avoid deep packet inspection. 有效值：1–1500。 If an invalid size is specified, the system will use the default value. stealth.antidpi.http.space.juggling Adds extra space between the HTTP method and the URL and removes space after the &quot;Host:&quot; field. stealth.antidpi.split.delay.millisecond Here you can specify the delay, in milliseconds, after sending the first fragment, if fragmentation is performed. subscription.link.interception.userscript Activate this feature if you want AdGuard to automatically intercept the URLs of userscripts and open the installation window. subscription.link.interception.filter Activate this feature if you want AdGuard to automatically intercept subscription URLs (for example, abp:subscribe, etc.) and open the custom filter setup window. "},{"title":"How to install AdGuard on macOS High Sierra and above","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/high-sierra-compatibility/","content":"How to install AdGuard on macOS High Sierra and above 信息 This article is about AdGuard for Mac, a multifunctional ad blocker that protects your device at the system level. 要了解其工作原理， 请下载 AdGuard 应用程序。 During the Installation of AdGuard on macOS High Sierra (or later versions) you may see a message: &quot;System Extension Blocked&quot;. This is a new security mechanism that appeared in High Sierra, it requires you to explicitly allow the installation of a third-party system extension. To complete the installation of AdGuard you have to manually allow loading the extension in System Preferences → Security &amp; Privacy → General. Click the &quot;Allow&quot; button, and after that you will be able to proceed with the installation as normal.","keywords":""},{"title":"安装/卸载","type":0,"sectionRef":"#","url":"adguard-for-mac/installation/","content":"","keywords":""},{"title":"系统要求​","type":1,"pageTitle":"安装/卸载","url":"adguard-for-mac/installation/#系统要求","content":"Operating system version: macOS 10.15 (64 bit) or higher RAM： 至少 2 GB 浏览器： Safari、Google Chrome、Opera、Yandex.Browser 和其他在 macOS 上可用的浏览器 可用磁盘空间： 120 MB "},{"title":"安装过程​","type":1,"pageTitle":"安装/卸载","url":"adguard-for-mac/installation/#安装过程","content":"To install AdGuard for Mac on your computer, launch your browser, type adguard.com in the address bar, and press Download on the page that opens.  Wait for AdguardInstaller.dmg to download and double-click its icon in the list of downloaded files on the Dock panel.  AdGuard 图标将出现在您的桌面上。 单击它打开安装应用程序，然后在打开的窗口中双击 AdGuard 图标。  当您第一次启用 AdGuard 时，您的操作系统将会提示您：该应用程序是从互联网下载的 App。 点击打开。  在下一步，请点击安装。  请等待安装程序完成安装所需要的文件。  以使用应用程序，需要输入 macOS 账号的用户名和密码。 Enter the password when prompted in the dialogue box and press OK.  现在，您将看到一个快速安装向导，您可以在其中根据需要配置保护。 您可以马上开始设置（来试试吧！） 或暂时无设置需求（先保持这样）。  完成啦！AdGuard 已成功安装到您的 Mac！ "},{"title":"卸载​","type":1,"pageTitle":"安装/卸载","url":"adguard-for-mac/installation/#卸载","content":""},{"title":"一般卸载方式​","type":1,"pageTitle":"安装/卸载","url":"adguard-for-mac/installation/#一般卸载方式","content":"首先，请您点击相应的图标以打开 'Finder'：  前往应用程序。 在列表中找到 AdGuard，右键它并选择移到废纸篓。  "},{"title":"进阶卸载方式​","type":1,"pageTitle":"安装/卸载","url":"adguard-for-mac/installation/#进阶卸载方式","content":"除非您知道如何操作或有我们技术支持专门为您推荐使用进阶方式卸载应用程序，我们不推荐您使用该方式。 另外，先执行「标准卸载」的所有步骤。 之后，删除以下 AdGuard 文件： /Library/Application Support/AdGuard Software/com.adguard.mac.adguard（文件夹）~/Library/Preferences/com.adguard.mac.adguard.plist（文件）~/Library/Group\\Containers/TC3Q7MAJXF.com.adguard.mac（文件夹）/Library/LaunchDaemons/com.adguard.mac.adguard.adguard-pac.daemon.plist（文件）/Library/LaunchDaemons/com.adguard.mac.adguard.adguard-tun-helper.daemon.plist（文件）/Library/Logs/com.adguard.mac.adguard/com.adguard.mac.adguard-pac.daemon.log（文件）。/Library/Logs/com.adguard.mac.adguard/com.adguard.mac.adguard.adguard-tun-helper.daemon.log（文件） To do so, open the Terminal app, then enter and execute the following commands: sudo rm -R &quot;/Library/Application Support/AdGuard Software/com.adguard.mac.adguard&quot; rm -R &quot;$HOME/Library/Application Support/com.adguard.mac.adguard&quot; rm $HOME/Library/Preferences/com.adguard.mac.adguard.plist rm -R &quot;$HOME/Library/Group Containers/TC3Q7MAJXF.com.adguard.mac&quot; find &quot;$HOME/Library/Application Support&quot; -name &quot;com.adguard.browser_extension_host.nm.json&quot; -delete sudo rm /Library/LaunchDaemons/com.adguard.mac.adguard.adguard-pac.daemon.plist sudo rm /Library/LaunchDaemons/com.adguard.mac.adguard.adguard-tun-helper.daemon.plist sudo rm /Library/Logs/com.adguard.mac.adguard/com.adguard.mac.adguard.adguard-pac.daemon.log sudo rm /Library/Logs/com.adguard.mac.adguard/com.adguard.mac.adguard.adguard-tun-helper.daemon.log 运行活动监控器应用程序。 通过搜索查找 cfprefsd 进程。 退出在用户态下运行的进程（不是在 root 权限运行的）。 为了退出，请点击进程，然后在左上角点击 X。 Confirm the action in the dialogue window. AdGuard 卸载完成。 "},{"title":"iCloud Private Relay and AdGuard","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/icloud-private-relay/","content":"","keywords":""},{"title":"Problem description in a nutshell​","type":1,"pageTitle":"iCloud Private Relay and AdGuard","url":"adguard-for-mac/solving-problems/icloud-private-relay/#problem-description-in-a-nutshell","content":"By default, AdGuard uses the &quot;default route&quot; which disables iCloud Private Relay. Currently, AdGuard and iCloud Private Relay cannot work at the same time. AdGuard cannot block ads because iCloud Private Relay encrypts traffic before AdGuard can filter network connections. When iCloud Private Relay is active, any filtering (including local filtering) becomes impossible. Thus, AdGuard can't filter traffic or perform DNS filtering in Safari. Yet, AdGuard still filters traffic in other browsers. To keep using iCloud Private Relay, consider installing AdGuard for Safari. The same applies to using any VPN apps on Mac: you have to choose between using iCloud Private Relay or a VPN service. "},{"title":"In detail​","type":1,"pageTitle":"iCloud Private Relay and AdGuard","url":"adguard-for-mac/solving-problems/icloud-private-relay/#in-detail","content":"AdGuard for Mac now uses macOS built-in socket filtering based on the network extensions API. This new and rather buggy mechanism replaced good old Kernel extensions. Over the last 1.5 years, we've reported more than 20(!) bugs to Apple regarding their new filtering method. The network extensions API has a VPN-like configuration with a list of route-like entries. On Big Sur, AdGuard developed &quot;split-tunnel&quot; rules to avoid creating the &quot;default route&quot; rule because it causes problems on early Big Sur releases. On Monterey, iCloud Private Relay got introduced. Privacy features of the Mail app also use Private Relay servers. As a consequence, AdGuard can't work together with iCloud Private Relay and the Mail app privacy features: iCloud Private Relay is applied to connections at the library level — before they reach the socket level, where AdGuard operates.iCloud Private Relay uses QUIC, which AdGuard can't filter in filtered apps because HTTP/3 filtering is not yet available.Consequently, AdGuard blocks QUIC, including iCloud Private Relay traffic — otherwise, ad blocking is impossible.When you use iCloud Private Relay and switch AdGuard into the &quot;split-tunnel&quot; mode, you can't open websites in Safari.To work around this issue for Monterey, we apply the &quot;default route&quot; rule. When Private Relay sees that rule, it disables itself automatically. So, AdGuard works seamlessly on Monterey, but iCloud Private Relay gets disabled. network.extension.monterey.force.split.tunnel restores the &quot;Big Sur&quot; behavior, but this option may break access to websites due to (3) and (4). We keep searching for a solution to this issue. One of the options is implementing HTTP/3 filtering. "},{"title":"Recommended solution​","type":1,"pageTitle":"iCloud Private Relay and AdGuard","url":"adguard-for-mac/solving-problems/icloud-private-relay/#recommended-solution","content":"We recommend using AdGuard together with a more traditional VPN service such as AdGuard VPN. "},{"title":"Alternative solution​","type":1,"pageTitle":"iCloud Private Relay and AdGuard","url":"adguard-for-mac/solving-problems/icloud-private-relay/#alternative-solution","content":"You can prevent AdGuard from using the &quot;default route&quot; by disabling the &quot;default route&quot;. It can be done via Advanced Settings → network.extension.monterey.force.split.tunnel.  Bear in mind that, in this case, you'll face the issues described above. "},{"title":"Launch issues on macOS","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/launch-issues/","content":"","keywords":""},{"title":"Launch issues on macOS 11 and higher​","type":1,"pageTitle":"Launch issues on macOS","url":"adguard-for-mac/solving-problems/launch-issues/#launch-issues-on-macos-11-and-higher","content":"If you have problems launching AdGuard for Mac on Big Sur and Monterey operating systems, please use this instruction: Reboot Mac and enter recovery mode.Disable SIP (Launch Terminal from the Utilities menu and type csrutil disable).Reboot Mac.Close the AdGuard app, open Terminal and type systemextensionsctl reset.Reboot Mac and enter recovery mode.Enable SIP (Launch Terminal from the Utilities menu and type csrutil enable).Launch the AdGuard app and enable protection. "},{"title":"Launch issues on macOS 10​","type":1,"pageTitle":"Launch issues on macOS","url":"adguard-for-mac/solving-problems/launch-issues/#launch-issues-on-macos-10","content":"If you have problems launching AdGuard for Mac on Sierra, Mojave and Catalina operating systems, please use this instruction: Open Terminal and enter command ls -@lOae /private/var/db/KernelExtensionManagement.Check that the restricted flag is not present (like on the screenshot). Reboot your Mac in recovery mode.Open Utilities → Terminal.Enter csrutil disable.Enter administrator password.Reboot your Mac.Open Terminal and enter the following command: sudo chflags restricted /private/var/db/KernelExtensionManagement.Reboot your Mac in recovery mode.Open Utilities → Terminal → Enter csrutil enable → Enter administrator password → Reboot your Mac.Enable AdGuard protection. "},{"title":"Installation problems solving","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/installation-issues/","content":"","keywords":""},{"title":"\"Installation failed\" error in macOS Catalina​","type":1,"pageTitle":"Installation problems solving","url":"adguard-for-mac/solving-problems/installation-issues/#installation-failed-error-in-macos-catalina","content":"During the installation you can face an error like this:  Follow this instruction to solve the problem: Restart your MacAs your Mac restarts, press and hold down the Command(⌘) + R keys immediately upon hearing the startup chime. Hold the keys until the Apple logo appears to get the computer into Recovery mode.From the top bar select Utilities → Terminal, and execute this command: csrutil disableRestart the Mac and log into Administrator's profileOpen the Finder window and select from the top bar Go → Go to Folder and type ~/private/Create a folder named tmp and type in your passwordLaunch AdGuard installation As the installation is completed, restart your Mac in Recovery mode using the instruction above and execute csrutil enable command in Terminal to enable system protection. "},{"title":"Compatibility issues with different macOS versions","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/big-sur-issues/","content":"","keywords":""},{"title":"Currently existing problems​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#currently-existing-problems","content":"Every year Apple releases a new version of macOS, introducing innovative solutions and adding new useful features. But some of them, such as Network Extensions API (Big Sur) or iCloud Private Relay (Monterey), cause some problems to many applications, AdGuard not being an exception. In this article we go over the known issues specific to each macOS version and possible ways to solve them. "},{"title":"Monterey 12: currently existing problems​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#monterey-12-currently-existing-problems","content":"These problems aren't fixed by Apple yet, or fixed only partially. Compatibility with iCloud Private Relay​ Currently, AdGuard and iCloud Private Relay cannot work at the same time. AdGuard has no ability to block ads because iCloud Private Relay encrypts traffic before AdGuard can filter network connections. When iCloud Private Relay is active, any filtering (including local filtering) becomes impossible. Thus, AdGuard can't filter traffic or perform DNS filtering in Safari. That's why by default, AdGuard uses the &quot;default route&quot; which disables iCloud Private Relay. For a deeper understanding of this problem, read this article. Recommended solution We recommend using AdGuard together with a more traditional VPN service such as AdGuard VPN. Alternative solution You can prevent AdGuard from using the &quot;default route&quot; by disabling it. It can be done via Advanced Settings → network.extension.monterey.force.split.tunnel. Note that enabling this setting will cause the problems described above.  Compatibility with Protect Mail Activity​ Apple's Mail app now uses a proxy to hide a user's IP address when downloading images from emails. However, it won't work if there's an active VPN connection. As it treats AdGuard as a VPN, it won't preload images automatically. For a deeper understanding of this problem, read this article. Recommended solution At this point, we recommend using a more traditional VPN service, such as AdGuard VPN, instead of the newer Apple privacy features. "},{"title":"Monterey 12, Big Sur 11.6 and later: currently existing problems​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#monterey-12-big-sur-116-and-later-currently-existing-problems","content":"These problems aren't fixed by Apple yet, or fixed only partially. Compatibility with Cisco AnyConnect​ AdGuard will not work together with Cisco AnyConnect while in the Network Extension mode. You have to switch AdGuard to Automatic Proxy mode. To do so, follow this instruction. Compatibility with Flutter​ This problem is solved in Flutter 2.2, released in June 2021. But to fix it for applications developed in Flutter, you need to wait for updates. If you use Flutter alongside AdGuard in &quot;Network Extension&quot; mode (or any other &quot;Transparent Proxy&quot;-type app) in Monterey or Big Sur, you will run into problems: projects won't open and Flutter will be effectively broken. We have already reported this bug to Apple. Meanwhile, you can use these temporary solutions: Use AdGuard in Automatic Proxy mode. Disable SIP and switch AdGuard to Kernel Extension mode as explained here. VPN apps with legacy API​ Despite AdGuard is displayed as a VPN in system settings, it shouldn't cause any conflicts when working alongside other VPN-based apps. However, if you're using a VPN-based app that was downloaded from outside App Store, there's a chance it uses the old VPN API and you have to exclude it from filtering: Open AdGuard's menu.Select Preferences....Switch to the Network tab.Click the Applications... button.Find the app you want to exclude and uncheck the checkbox next to it.  "},{"title":"Already fixed problems​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#already-fixed-problems","content":"These problems have been fixed by Apple by now but can be encountered in the older versions of macOS Big Sur. "},{"title":"Compatibility with Little Snitch 5​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#compatibility-with-little-snitch-5","content":"At this moment, Network Extension mode in AdGuard isn't compatible with Little Snitch 5. When both are running, there's a chance to encounter issues with various apps' behavior, even if they aren't filtered by AdGuard. This problem is directly caused by a bug in Big Sur, and we've already informed Apple about it. This leaves us to believe that this issue will get resolved in one of the next updates. It needs to be said that this problem can't be solved by disabling connections monitoring in Little Snitch, because this action doesn't unload Little Snitch's extension from the system. We recommend to switch to Automatic Proxy filtering mode when running AdGuard alongside with Little Snitch on Big Sur, at least until Apple fixes the bug. "},{"title":"Compatibility with local proxies​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#compatibility-with-local-proxies","content":"注意 Now AdGuard can filter local proxies (mostly) without any problems. If you encounter any issues in OS versions 11.1+, or if you're using Big Sur 11.0, remove the local proxy from System settings and configure an upstream proxy in AdGuard by following the instruction below. To configure an upstream proxy in AdGuard for Mac in Big Sur: Open AdGuard's settings Preferences → Network → Outbound proxy.Choose HTTP, HTTPS, SOCKS4 or SOCKS5, depending on your proxy type.Fill in the fields: host is the IP address of your proxy server,port is the desired port number to be used by the proxy server,user and password are corresponding username and password of your proxy (if needed). Ignore either or both when not applicable. If you run into any problems, please contact our tech support at support@adguard.com. Example 1: Configuring an upstream Shadowsocks proxy​ Here's an example of how to configure an upstream proxy for Shadowsocks. First of all, you need a working server side for your proxy. Most likely, to set it up, you would use a JSON file like this (server and password values were chosen randomly here): { &quot;server&quot;:&quot;111.222.333.444&quot;, &quot;server_port&quot;:8388, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;barfoo!&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot; }  提示 You can find more information about how to get started on Shadowsocks website. Then you'd have to install Shadowsocks client on your Mac. Make sure that you select 'Manual Mode' or 'Auto Mode' in its settings! The configuration won't work if you select 'Global Mode' (or 'Auto Mode' in Big Sur versions prior to 11.1).  Now go to AdGuard menu → Advanced → Advanced Settings... and set the Value area of the upstream.proxy setting to socks5://localhost:1080. Notice that you need to use &quot;local_port&quot; value from the JSON file here. Because Shadowsocks uses SOCKS5, you also need to set the value of the upstream.proxy.socks5udp setting in AdGuard Advanced Settings to true to make AdGuard route UDP traffic to the proxy server. Example 2: Configuring an upstream Surge proxy​ In Big Sur v11.1+, there are no known conflicts between AdGuard and Surge proxy. If you are using an older version of Big Sur (prior to 11.1), check that System Proxy in the bottom right corner is disabled. Otherwise, Surge won't work with AdGuard. On the other hand, Enhanced Mode can be enabled without causing a conflict in any Big Sur version.  Now go to Preferences → Network → Outbound proxy and fill in the fields. For SOCKS5 proxy type: host: localhostport: 6153 For HTTP proxy type:host: localhostport: 6152 "},{"title":"Alternatives to using a Network Extension​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#alternatives-to-using-a-network-extension","content":"It's impossible to foresee each and every possible problem that can pop up in Big Sur or Monterey, there are countless various hardware/software and settings configurations. If you face any compatibility issues, please contact our support team, but feel free to try one of these workarounds first. "},{"title":"Using \"Automatic proxy\" filtering mode​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#automatic-proxy","content":"If you face problems in Big Sur or Monterey which can't be resolved by any of the methods above, you can try switching AdGuard to Automatic proxy mode. Open AdGuard's menu.Select Preferences....Switch to the Network tab.Click the Select Mode... button.Select Automatic Proxy.  Now AdGuard has automatically added a .pac file to your Mac's network settings, so that the system will consider AdGuard a proxy and try to send all traffic through AdGuard. 注意 Some apps may ignore this system setting and their traffic will not be filtered. "},{"title":"Enabling Kernel Extension in Big Sur and Monterey​","type":1,"pageTitle":"Compatibility issues with different macOS versions","url":"adguard-for-mac/solving-problems/big-sur-issues/#kernel-extension","content":"By default AdGuard uses Network Extension framework in Big Sur and Monterey as the old Kernel Extension framework is disabled there. This can cause some compatibility problems, but to enable Kernel Extension back, you need to disable System Integrity Protection (SIP) first. To disable SIP, follow this instruction: Click the Apple symbol in the Menu bar.Click Restart…Hold down Command-R to reboot into Recovery Mode.Click Utilities.Select Terminal.Type csrutil disable.Press Return or Enter on your keyboard.Click the Apple symbol in the Menu bar.Click Restart… Now that SIP is disabled, this is how you enable Kernel Extension:  Open AdGuard's menu.Select Preferences....Switch to the Network tab.Click the Select Mode... button.Select Kernel Extension.Confirm that you want to switch to Kernel Extension. 警告 However, we only recommend using this method if everything else fails, as this may lead to unexpected issues. "},{"title":"Protection cannot be enabled","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/protection-cannot-be-enabled/","content":"Protection cannot be enabled 信息 This article is about AdGuard for Mac, a multifunctional ad blocker that protects your device at the system level. 要了解其工作原理， 请下载 AdGuard 应用程序。 If AdGuard Protection cannot be enabled for some reason, perform the following steps: Click the AdGuard icon at the menu bar and go to Advanced → Reset settings... → Quit AdGuard... In the Spotlight Search, type Terminal, enter sudo rm -R /Library/Application\\ Support/com.adguard.adguard and execute. Restart your computer. Open the Terminal again, type ls -al /Library/StagedExtensions/Library/Application\\ Support/com.adguard.adguard/ and execute. You should receive the following: No such file or directory. Start AdGuard and enter your login information when prompted.","keywords":""},{"title":"Protect Mail Activity and AdGuard","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/protect-mail-activity/","content":"","keywords":""},{"title":"In a nutshell​","type":1,"pageTitle":"Protect Mail Activity and AdGuard","url":"adguard-for-mac/solving-problems/protect-mail-activity/#in-a-nutshell","content":"Apple's Mail app now uses a proxy to hide a user's IP address when downloading images from emails.  However, it won't work if there's an active VPN connection. As it treats AdGuard as a VPN, it won't preload images automatically. Apple explains this issue here. "},{"title":"In detail​","type":1,"pageTitle":"Protect Mail Activity and AdGuard","url":"adguard-for-mac/solving-problems/protect-mail-activity/#in-detail","content":"AdGuard for Mac now uses macOS built-in socket filtering based on the network extensions API. This new and rather buggy mechanism replaced good old Kernel extensions. Over the last 1.5 years, we've reported more than 20(!) bugs to Apple regarding their new filtering method. The network extensions API has a VPN-like configuration with a list of route-like entries. On Big Sur, AdGuard used &quot;split-tunnel&quot; rules to avoid creating the &quot;default route&quot; rule because it causes problems on early Big Sur releases. These problems were solved in Monterey so nothing prevents us from using the &quot;default route&quot; rule. On Monterey, iCloud Private Relay got introduced. Privacy features of Mail.app also use Private Relay servers. As a consequence, AdGuard can't work together with iCloud Private Relay and Mail app privacy features: iCloud Private Relay is applied to connections at the library level — before they reach the socket level, where AdGuard operates.iCloud Private Relay uses QUIC, which AdGuard can't filter because HTTP/3 filtering is not yet available.Consequently, AdGuard blocks QUIC, including iCloud Private Relay traffic – otherwise, ad blocking is impossible.When you use iCloud Private Relay and switch AdGuard into the &quot;split-tunnel&quot; mode, you can't open websites in Safari.To work around this issue for Monterey, we apply the &quot;default route&quot; rule. When Private Relay sees that rule, it disables itself automatically. So, AdGuard works seamlessly on Monterey, but iCloud Private Relay gets disabled. network.extension.monterey.force.split.tunnel restores the &quot;Big Sur&quot; behavior, but this option may break access to websites due to (3) and (4). We keep searching for a solution to this issue. One of the options is implementing HTTP/3 filtering. "},{"title":"Recommended solution​","type":1,"pageTitle":"Protect Mail Activity and AdGuard","url":"adguard-for-mac/solving-problems/protect-mail-activity/#recommended-solution","content":"At this point, we recommend using a more traditional VPN service, such as AdGuard VPN, instead of the newer Apple privacy features. "},{"title":"Manual certificate installation","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/manual-certificate-installation/","content":"Manual certificate installation 信息 This article is about AdGuard for Mac, a multifunctional ad blocker that protects your device at the system level. 要了解其工作原理， 请下载 AdGuard 应用程序。 AdGuard for Mac needs to install the root certificate into certificate storage to be able to filter HTTPS traffic. This action is performed automatically in most cases as you run the app for the first time, but users of Gecko-based browsers (Firefox, Waterfox etc.) who have a master password set up for their browser may be required to take additional steps (because these browsers use their own certificate storage instead of the system one). They need to either enter the master password when prompted (to grant AdGuard access to the certificate storage) or manually install the certificate. To manually install the certificate into Firefox-like browser: Open Preferences Go to Privacy &amp; Security → Certificates Click View Certificates Navigate to the Authorities tab and click the Import... button Select file /Library/Application Support/AdGuard Software/com.adguard.mac.adguard/AdguardCore/Adguard Personal CA.cer or just download it from http://local.adguard.org/cert using a Chromium-based browser (e.g Google Chrome or new Edge) and with a HTTPS-filtering running in AdGuard Exact actions required for different Gecko-based browsers may vary, but the general sequence and the path to AdGuard Personal CA.cer file will be the same. P.S.: For Setapp application version the file path is the following: /Library/Application Support/com.adguard.mac.adguard-setapp/AdguardCore/Adguard Personal CA.cer","keywords":""},{"title":"Incompatibility with Screen Time","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/screen-time-issues/","content":"Incompatibility with Screen Time 信息 This article is about AdGuard for Mac, a multifunctional ad blocker that protects your device at the system level. 要了解其工作原理，请下载 AdGuard 应用程序 If you have Content Restrictions enabled in Screen Time while AdGuard is on, you may experience problems loading web pages. To check if Content Restrictions are active: Go to System Settings → Screen Time → Content &amp; Privacy → Content Restrictions Check if the setting for Access to Web Content is set to Limit Adult Websites If this setting is on, pages won’t load. To continue using AdGuard, disable Content &amp; Privacy in Screen Time, and then restart the system.","keywords":""},{"title":"关于","type":0,"sectionRef":"#","url":"adguard-for-safari/features/about/","content":"关于 在「关于」选项卡中，用户可以查看产品当前版本的信息以及法律文件链接。 此外，还有一个指向我们在 GitHub 上的存储库的链接。 用户可以在「关于」部分监控产品开发、创建功能请求和报告错误。 请注意 Safari 版 AdGuard 可从 App Store 免费下载。 要了解设置说明请参阅知识库。","keywords":""},{"title":"在 Tor 浏览器设置过滤","type":0,"sectionRef":"#","url":"adguard-for-mac/solving-problems/tor-filtering/","content":"在 Tor 浏览器设置过滤 信息 This article is about AdGuard for Mac, a multifunctional ad blocker that protects your device at the system level. 要了解其工作原理， 请下载 AdGuard 应用程序。 Tor 浏览器默认添加到「过滤应用程序」的 AdGuard 列表内。 不过，为了进行过滤，AdGuard 需要更改 Tor 浏览器的安全设置。 这样，Tor 将信任 AdGuard CA 证书。 如您想要在 Tor 浏览器进行过滤，并在「首选项」→「网络」→「应用程序」开启 AdGuard 过滤，那么 AdGuard 将为您显示以下内容的窗口 ： 为了更新 Tor 浏览器设置，AdGuard 将设置： security.enterprise_roots.enabled: true 此设置将允许 Tor 信任根证书。 了解更多 security.cert_pinning.enforcement_level: 1 Public Key Pinning（公钥固定）是一种安全措施，允许网站确保网站和用户之间的连接是真实的。 这涉及到网站发布一个它所信任的公钥列表。 在执行级别设置（enforcement level）为「1」的情况下，锁定（pinning）对自定义 CA 证书来说是不执行的。 了解更多 为了应用更改，请重新开启 Tor 浏览器。 If you manually change these settings, Tor filtering will be stopped.","keywords":""},{"title":"Safari 扩展","type":0,"sectionRef":"#","url":"adguard-for-safari/extensions/","content":"","keywords":""},{"title":"什么是 Safari 扩展​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#什么是-safari-扩展","content":"Safari 扩展是为 Safari 浏览器添加功能的小型软件程序。 它们允许用户添加浏览器未内置的功能以定制和增强浏览体验。 Safari 版 AdGuard 主要使用扩展功能对通过 Safari 打开的网站应用过滤规则。 "},{"title":"工作原理​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#工作原理","content":"AdGuard 使用过滤规则阻止网站上的广告、跟踪器和其他骚扰。 AdGuard 的规则和用户的自定义过滤器会转换为 Safari 可以“理解”的规则，并集成到六个 Safari 扩展中： AdGuard 常用AdGuard 隐私AdGuard 社交AdGuard 安全AdGuard 其它 每个内容拦截扩展最多可包含 150,000 个启动的过滤规则。 大多数过滤组内的规则数量不超过 15 万个。 不过，如果启动太多特定语言或自定义过滤器，可能会超出限制。 在这种情况下，超过限制的随机规则将被自动禁用，这可能会导致拦截错误。 我们强烈建议只启动所需要的过滤器。 还有一个扩展：AdGuard Safari 版，它将 AdGuard 图标添加到 Safari 中的搜索栏旁边，并允许用户使用高级规则来拦截复杂的广告。  下面我们详细介绍每个扩展。 "},{"title":"内容拦截扩展​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#内容拦截扩展","content":"「AdGuard 常用」应用过滤器中的规则，要启动这些规则请前往「过滤器」→「广告拦截」和「过滤器」→「特定语言」。 该扩展专注于全面广告拦截，包括特定语言的广告过滤器。 用户可以在「过滤器」→「隐私」中启用「AdGuard 隐私」的过滤器规则。 它可以阻止跟踪机制，确保用户的浏览活动保持私密。 用户可在「过滤器」→「社交工具」和「过滤器」→「烦人元素中启动「AdGuard 社交 」过滤器规则。 它能拦截弹出窗口、社交媒体按钮、在线助手窗口以及网页上其他用户可能会觉得烦人的元素。 用户可以在「过滤器」→「安全」中启用「AdGuard 安全」的过滤器规则。 该扩展可识别并阻止潜在的有害元素，保护用户免受恶意内容的侵害。 「AdGuard 其他」应用不属于上述类别的过滤器规则。要启动「AdGuard 其他」 前往「过滤器」→「其他」：「解除搜索广告和自我推销过滤器」、「AdGuard DNS 过滤器」，以及「AdGuard 实验性过滤器」。 AdGuard 自定义 应用用户自己添加到「自定义过滤器」的规则。 每个扩展都包含用户规则和白名单规则。 "},{"title":"AdGuard Safari版​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#adguard-safari版","content":"「AdGuard Safari 版」可启用搜索栏旁边的 AdGuard 图标。 如果用户想在特定网站上快速设置保护或手动屏蔽广告，AdGuard Safari 版就非常有用。 它还包含未转换为 Safari 支持格式的高级规则， 包括 CSS 规则、CSS 选择器以及允许 AdGuard 阻止复杂广告（例如 YouTube 上的广告）的脚本程序。 "},{"title":"如何管理 Safari 扩展程序​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#如何管理-safari-扩展程序","content":"打开 Safari，单击屏幕左上角的「Safari」展开菜单。 单击「设置...」选择「扩展」  "},{"title":"为什么 Safari 版 AdGuard 需要权限​","type":1,"pageTitle":"Safari 扩展","url":"adguard-for-safari/extensions/#为什么-safari-版-adguard-需要权限","content":"启用「AdGuard Safari 版」扩展时，用户可能会注意到它需要「访问网页内容」和「访问浏览历史」的权限。 下面是需要这些权限的原因： 访问网页内容，允许手动广告拦截和高级拦截规则正常工作。访问浏览历史记录，允许扩展检查网站的保护状态，并确定应应用哪些高级规则。 我们不会将这些数据用于任何其他目的或与任何人共享。 如需了解更多信息，请查看我们的隐私政策。 "},{"title":"AdGuard 常用","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-general/","content":"AdGuard 常用 「AdGuard 常规」是一款内容拦截器，结合最基本的拦截广告过滤器。 我们建议始终启用「AdGuard 基础过滤器」。","keywords":""},{"title":"AdGuard 自定义","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-custom/","content":"AdGuard 自定义 如果用户需要启用更多过滤器，可将其添加到「AdGuard 自定义」中。 要添加自定义过滤器，请在相关字段中输入 URL 或本地文件路径。 用户可以在「filterlists.com](https://filterlists.com」上查看新的过滤器。","keywords":""},{"title":"什么是内容拦截程序？","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/","content":"什么是内容拦截程序？ 内容拦截器是一组过滤器。 与隐私相关的过滤器包含在内容拦截程序中，其相应名称为「AdGuard 隐私」。 设计内容拦截器有两个原因：结构过滤器和符合 Apple 公司的限制。 2019年，Apple 对 Safari 浏览器的广告拦截器设置了限制，只允许它们同时使用5万个过滤规则。 由于这个数量不足以让一个广告拦截器提供良好的过滤质量（仅 AdGuard 基础过滤器就有 30,000 个过滤规则），我们将 AdGuard Safari 版分成六个内容拦截器，每个拦截器包含多达 50,000 个规则。 2022年，Apple 将每个内容拦截器的过滤规则数量限制提高到同时应用15万个规则。 关于 Safari 版 AdGuard，六种内容拦截器可以启用 900,000 个规则。 虽然数量限制提高了，但内容拦截器的结构却保持不变。 在「内容拦截器」选项卡中，用户可以看到哪些内容拦截器已启用，每个拦截器使用了多少规则，以及哪些过滤器正在运行。 提示 用户可以在「过滤器」选项卡中管理已启用的过滤器。 在「内容拦截器」部分，用户只能看到已启用过滤器的列表。","keywords":""},{"title":"AdGuard 其它","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-other/","content":"AdGuard 其它 「AdGuard 其他」包含具有各种功能的过滤器。 例如，它有一个过滤器，可以解除对搜索广告和自我推销广告的屏蔽。 在某些情况下，该过滤器有助于准确找到用户正在寻找的内容，因为这些广告比其他类型的广告更相关，干扰性更小。 免责声明 我们没有任何由广告商付费的“可接受广告”。 我们为用户提供查看搜索广告和网站自我宣传的选项。","keywords":""},{"title":"AdGuard 社交","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-social/","content":"AdGuard 社交 「AdGuard 社交」包含针对社交媒体按钮、小工具、脚本和图标的过滤器。 在本部分还可以找到用于其他“干扰”的过滤器，包括弹出式窗口、移动应用程序横幅、Cookie 通知等过滤器。 要启用它们，请在「过滤器」选项卡中找到「社交插件」。","keywords":""},{"title":"AdGuard 隐私","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-privacy/","content":"AdGuard 隐私 「AdGuard 基础过滤器」内容拦截器是对抗计数器和其他网络分析工具的主要工具。 「AdGuard 防跟踪保护过滤器」 默认已启用。","keywords":""},{"title":"AdGuard 安全","type":0,"sectionRef":"#","url":"adguard-for-safari/features/content-blockers/adguard-security/","content":"AdGuard 安全 该内容拦截器整合了多个与安全相关的过滤器。 「Malware Domains Blocklist」阻止因传播恶意软件和间谍软件而臭名昭著的域名。 「Spam404」保护用户免受网络欺诈。 「NoCoin Filter List」干扰基于浏览器的加密货币，如 Coinhive。","keywords":""},{"title":"过滤器","type":0,"sectionRef":"#","url":"adguard-for-safari/features/filters/","content":"过滤器 过滤器是用特殊语法编写的规则列表。 根据这些规则，内容拦截器可以过滤网络流量：拦截广告或对恶意网站的请求。 过滤器分为八个主题类别：广告拦截、隐私、社交小工具、烦扰、安全、特定语言过滤器、自定义和其他过滤器。 了解更多有关 AdGuard 过滤器或一般广告过滤的信息。 在「过滤器」选项卡中，用户可以启用整个主题类别或单独的过滤器。 「过滤器」选项卡中的设置更改会影响「内容拦截器」部分（在「常规 」选项卡中）。","keywords":""},{"title":"常规","type":0,"sectionRef":"#","url":"adguard-for-safari/features/general/","content":"","keywords":""},{"title":"「常规」选项卡​","type":1,"pageTitle":"常规","url":"adguard-for-safari/features/general/#常规选项卡","content":" 第一个选项卡是「常规」屏幕，用户可以设置通知、更新间隔和系统启动时启动 AdGuard 等基本事项。 用户还可以选择在菜单栏中显示 AdGuard 图标。 用户还可以启动「内容拦截器」来拦截广告、跟踪器和其他骚扰。 "},{"title":"用户过滤器","type":0,"sectionRef":"#","url":"adguard-for-safari/features/rules/","content":"用户过滤器 用户规则可用于自定义广告拦截。 它们可以手动添加、导入，也可以在屏蔽页面元素时自动创建。 要添加自己的过滤规则，请使用专用语法。","keywords":""},{"title":"安装","type":0,"sectionRef":"#","url":"adguard-for-safari/installation/","content":"","keywords":""},{"title":"如何安装 AdGuard Safari 版？​","type":1,"pageTitle":"安装","url":"adguard-for-safari/installation/#install","content":"AdGuard Safari 版是 App Store 中的一款免费应用程序。 要在设备上安装它，请执行以下操作。 打开 App Store，找到所需的扩展程序。 按「获取」→「安装」→「打开」 要设置用于 Safari 的 AdGuard，请在 Safari 设置中启用 AdGuard 扩展。 注意 并非所有扩展都需要 AdGuard Safari 版才能正常运行。 例如，选中「图标」扩展，搜索栏旁边就会出现图标。 不过，我们建议启用所有功能。 ::: ![扩展已检查](https://cdn.adtidy.org/content/Kb/ad_blocker/safari/adguard-for-safari-extensions-checked.png)  要使 AdGuard 在网站上生效，必须启用「内容拦截器」设置。 用户可以启用所有网站，也可以选择想要的网站。 注意 iOS 9.0 及更高版本、带有 Safari 10 的 macOS 10.11 以及 macOS 10.12 及更高版本需要执行此步骤。 ::: 在 macOS 上，单击「首选项」→「网站」→「内容拦截器」。 如果要在每个网站上启用 AdGuard，请将「访问其他网站时」转为「开启」。  在 iOS 上，进入「设置」→「Safari」→ 内容拦截器，并将选项设置为「是」。  完成步骤 1-4 后，AdGuard Safari 版将开始正常运行。 现在可以开始配置扩展程序。 "},{"title":"如何卸载 AdGuard Safari 版本​","type":1,"pageTitle":"安装","url":"adguard-for-safari/installation/#uninstall","content":"要卸载 Safari 版 AdGuard，请执行以下操作： 退出应用程序。 打开 Safari 首选项。 选择「扩展」选项卡。 你会看到一个扩展名列表，AdGuard 有八个扩展名。 取消选中所有复选框，然后按「卸载」。 您将看到通知提示： 按「在 Finder 中显示」并将应用程序移至垃圾桶。 AdGuard Safari 版将从设备中删除。 "},{"title":"过滤不起作用，无法拦截广告","type":0,"sectionRef":"#","url":"adguard-for-safari/solving-problems/ads-not-blocked/","content":"","keywords":""},{"title":"解决方案​","type":1,"pageTitle":"过滤不起作用，无法拦截广告","url":"adguard-for-safari/solving-problems/ads-not-blocked/#解决方案","content":"打开 Safari 浏览器。点击左上角菜单中的「Safari」。单击「设置…」→「扩展」。取消选中 AdGuard 扩展：「自定义」、「一般」、「其他」、「隐私」、「安全」、「社交」、「Safari 版 AdGuard」和「AdGuard 助手」。重新启动 Safari 浏览器。返回「设置...」→「扩展」并重新启用内容拦截扩展。开启 AdGuard Safari 版。转到「过滤器」。点击「检查更新」。在更新过滤器之前，请不要关闭 AdGuard Safari 版的窗口。 如果上述方法无效，广告仍未被屏蔽，请发送电子邮件至 support@adguard.com 联系我们的支持人员。 如果只有特定页面或网站出现问题，用户可以通过浏览器报告错误：单击 Safari 搜索栏旁边的 AdGuard Safari 版图标，然后单击「报告此网站」旁边的「报告」按钮。 "},{"title":"已关闭的 Safari 版 AdGuard 继续进行过滤","type":0,"sectionRef":"#","url":"adguard-for-safari/solving-problems/filters-after-disable/","content":"","keywords":""},{"title":"解决方案​","type":1,"pageTitle":"已关闭的 Safari 版 AdGuard 继续进行过滤","url":"adguard-for-safari/solving-problems/filters-after-disable/#解决方案","content":"打开 Safari 浏览器。点击左上角菜单中的「Safari」。单击「设置…」→「扩展」。取消选中 AdGuard 扩展：「自定义」、「一般」、「其他」、「隐私」、「安全」、「社交」、「Safari 版 AdGuard」和「AdGuard 助手」。重新启动 Safari 浏览器。返回「设置...」→「扩展」并重新启用内容拦截扩展。 现在，扩展应正常运行：启用 Safari 版 AdGuard 时，过滤功能被启动；禁用时，过滤功能被关闭。 "},{"title":"AdGuard Safari 版无法在 macOS Sonoma 上的私人标签中运行","type":0,"sectionRef":"#","url":"adguard-for-safari/solving-problems/private-sonoma/","content":"","keywords":""},{"title":"解决方案​","type":1,"pageTitle":"AdGuard Safari 版无法在 macOS Sonoma 上的私人标签中运行","url":"adguard-for-safari/solving-problems/private-sonoma/#解决方案","content":"打开 Safari 浏览器。点击左上角菜单中的「Safari」。单击「设置…」→「扩展」。为所有 AdGuard 扩展勾选「允许私人浏览」。 如果上述方法无效，广告仍未被屏蔽，请发送电子邮件至 support@adguard.com 联系我们的支持人员。 如果只有特定页面或网站出现问题，用户可以通过浏览器报告错误：单击 Safari 搜索栏旁边的 AdGuard Safari 版图标，然后单击「报告此网站」旁边的「报告」按钮。 "},{"title":"如何在 Safari 版 AdGuard 中收集日志记录","type":0,"sectionRef":"#","url":"adguard-for-safari/solving-problems/logs/","content":"","keywords":""},{"title":"如何收集日志记录​","type":1,"pageTitle":"如何在 Safari 版 AdGuard 中收集日志记录","url":"adguard-for-safari/solving-problems/logs/#如何收集日志记录","content":"开启 AdGuard Safari 版。向下滚动并单击「导出日志」。选择保存 .zip 文件的位置，然后点击「保存」。 现在您可以将此文件发送至 support@adguard.com，或将其附加到您在 GitHub 上的错误报告中。 注意 AdGuard is committed to protecting your privacy. We strictly follow our Privacy Policy and do not collect any private information about users. Before sending your logs to the support team, please review the file as it may contain additional information that you don’t want to share. If it contains such personal information, we recommend that you delete it first. Open the AdGuard for Safari GitHub repo and click New issue.Send the log file to devteam@adguard.com. 包括错误发生的时间并附加指向您的问题或其编号的链接（它在标题旁边显示为 #number）。 或者，您可以将日志文件上传到 Google Drive 并将其发送至 devteam@adguard.com。 Add the file link to your GitHub issue. "},{"title":"浏览器助手","type":0,"sectionRef":"#","url":"adguard-for-windows/browser-assistant/","content":"","keywords":""},{"title":"Benefits​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#benefits","content":""},{"title":"Independence​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#independence","content":"AdGuard Browser Assistant is a browser extension, it is installed in a browser, so there is no need to wait for the userscript to be injected into the filtered web page, as it was with the preceding one. In other words, it is more autonomous from the main AdGuard app. Still, Browser Assistant needs the installed AdGuard for Windows, because there is no point in using the extension without the app. "},{"title":"Compatibility with the main app​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#compatibility-with-the-main-app","content":"If you got into the habit of using our previous AdGuard Ad Blocker extension, you might like the solution that we have developed for the new Browser Assistant. Background information: In previous versions of the AdGuard Browser Extension (before v3.5), if you had it installed along with the AdGuard for Windows app, the extension took over the functions of Assistant, stopped filtering itself and relied on the app to do this. The extension and the app worked in conjunction but sometimes the integration would fail. Some websites would stop being protected by the desktop program and be backed up only by the less powerful extension. When using the Browser Assistant, all these problems don’t matter as there can be no conflicts in essence. The role of the Browser Assistant is well-defined and it can’t hinder the functioning of the main app, so there is no need to worry. "},{"title":"Separate tab in Settings​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#separate-tab-in-settings","content":"The new Browser Assistant has its own tab in AdGuard for Windows settings, along with Stealth Mode, Browsing security, Parental Control and others. There you will find a link to download the extension for your default browser. Besides, there is a checkbox to enable the legacy Assistant.  "},{"title":"旧版浏览器助手​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#旧版浏览器助手","content":"Legacy Assistant is the previous version of Assistant, which is a mere userscript, not a browser extension. Basically, there are two cases when you might want to pick it instead of the new Browser Assistant: The new Assistant is not available for your browser.You are used to the green shield icon and want to leave things as they were. "},{"title":"How to install AdGuard Browser Assistant​","type":1,"pageTitle":"浏览器助手","url":"adguard-for-windows/browser-assistant/#how-to-install-adguard-browser-assistant","content":"If you want to install the Browser Assistant for your default browser, you can do it directly from the app settings, but you also have an opportunity to install it for other browsers. AdGuard Browser Assistant is available for all popular browsers: Chrome, Firefox, Edge, Opera, and Yandex. To install the one you need (or many, it is not prohibited but even encouraged), go to our website, click the browser icon and tap the Install button. That’s it! "},{"title":"规则数量限制的问题","type":0,"sectionRef":"#","url":"adguard-for-safari/solving-problems/rule-limit/","content":"","keywords":""},{"title":"Safari 内容拦截器规则数量限制​","type":1,"pageTitle":"规则数量限制的问题","url":"adguard-for-safari/solving-problems/rule-limit/#safari-内容拦截器规则数量限制","content":"Safari 版 AdGuard 使用内容拦截 API 对 Safari 浏览器中的页面应用过滤规则。 目前，每个内容拦截扩展最多可使用 150,000 个规则。 Safari 版 AdGuard 有六种内容拦截器，包括 AdGuard 常用AdGuard 隐私AdGuard 社交AdGuard 安全AdGuard 其它AdGuard 自定义 这样，总共有 900 000 个过滤规则。 不过，扩展最多可使用 150 000 个规则。 如果用户超过此数量限制，某些规则将无法应用。 这可能会导致错误拦截。 "},{"title":"如何检查是否超出规则数量限制​","type":1,"pageTitle":"规则数量限制的问题","url":"adguard-for-safari/solving-problems/rule-limit/#如何检查是否超出规则数量限制","content":"开启 AdGuard Safari 版。向下滚动并点击「内容拦截器」。在每个内容拦截器下方，用户将看到已启用的过滤器和活动规则的数量。 如果内容拦截器中启用的规则数量超过 150,000 个，则可能需要禁用其中的某些过滤器或用户规则。 请转到「过滤器」，选择有问题的过滤器类别，禁用不需要的过滤器或用户规则。 "},{"title":"Documentation for admins","type":0,"sectionRef":"#","url":"adguard-for-windows/admins-documentation/","content":"","keywords":""},{"title":"1. Download the MSI​","type":1,"pageTitle":"Documentation for admins","url":"adguard-for-windows/admins-documentation/#msi-download","content":"Download the AdGuard MSI x86 Download the AdGuard MSI x64 "},{"title":"2. Configure the settings for your network​","type":1,"pageTitle":"Documentation for admins","url":"adguard-for-windows/admins-documentation/#settings-configuring","content":"On machines that are joined to an Active Directory domain, policy settings may also be stored in the registry under HKEY_LOCAL_MACHINE in the following path: Software\\Policies\\AdGuard\\. The only supported policy is LicenseKey. If this policy is set, AdGuard will prefer it over what user can enter in the interface. This license key will be used for checking license status. "},{"title":"3. Make sure that AdGuard servers are available​","type":1,"pageTitle":"Documentation for admins","url":"adguard-for-windows/admins-documentation/#servers-available","content":"AdGuard connects to two hosts: api.adguard.org and filters.adtidy.org. Make sure that both servers are available. "},{"title":"4. Push the MSI out to your network​","type":1,"pageTitle":"Documentation for admins","url":"adguard-for-windows/admins-documentation/#msi-push","content":"If you usually use SMS or other tools, use them to push out the AdGuard MSI just as you would normally do with any other installation bundle. Otherwise, you can run the MSI on the target machine directly (and silently) with this command: Msiexec /q /i AdGuard.msi If you need to roll out an update, use this command: Msiexec /q /i AdGuard.msi REINSTALL=ALL REINSTALLMODE=vomus 注意 You must run these commands with admin privileges. If you want to install AdGuard on a Windows 7 computer, make sure that it has .NET 4 Client Profile installed: https://www.microsoft.com/en-us/download/details.aspx?id=24872 注意 If you have installed AdGuard for Windows from an MSI file, AdGuard will not be updated automatically. To allow manual updates: In versions released after v7.16, delete the ForbidCheckUpdates parameter or set its value to NO (case-insensitive) in the registry under HKEY_LOCAL_MACHINE\\SOFTWARE\\Adguard. In v7.16 and earlier versions, set to YES (case-insensitive) the AllowCheckUpdates parameter for the HKEY_LOCAL_MACHINE\\SOFTWARE\\Adguard key on x86 OS or HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Adguard key on x64 OS. Any other value or no value for this parameter will disable automatic updates. Please note that such installation of the application and manual updates are not recommended and can cause technical problems. "},{"title":"5. Test your installation​","type":1,"pageTitle":"Documentation for admins","url":"adguard-for-windows/admins-documentation/#installation-test","content":"On a target machine, launch AdGuard. Open the license screen to check that it uses the one you've set. You might need to click &quot;Refresh status&quot; to make AdGuard validate the license key. "},{"title":"扩展","type":0,"sectionRef":"#","url":"adguard-for-windows/features/extensions/","content":"","keywords":""},{"title":"网络​","type":1,"pageTitle":"扩展","url":"adguard-for-windows/features/extensions/#网络","content":"倒数第二个模块专用于网络过滤，用户可以在此处找到附加的网络相关选项。 其中两项默认启动：「开启流量过滤」和「过滤 HTTPS 协议」。 这些重要的额外预防措施可更好地过滤您的网络空间。 当前大部分网站使用 HTTPS，广告亦是如此。 众多网站，如 youtube.com，facebook.com 和 twitter.com，不进行 HTTPS 过滤是无法移除广告的。 因此除非用户有充分的理由不开启它，否则请保持「过滤 HTTPS 协议」功能的开启状态。  用户也可以选中此模块内的复选框「将 AdGuard 用作 HTTP 代理」以将 AdGuard 用作常规的 HTTP 代理过滤经由所有流量。 用户也可开启「用 EV 证书过滤网站」功能。 扩展验证（EV）SSL 证书提供更强大的安全保障；此类网站的所有者必须通过 EV 指南定义的彻底的全球标准化身份验证过程。 这就是一些用户信任具有此类证书的网站并且不愿过滤它们的原因。 最后是代理设置部分。 用户可以在此处指定 AdGuard 更新过滤器，获取新版本等所用的代理服务器。 "},{"title":"AdGuard VPN​","type":1,"pageTitle":"扩展","url":"adguard-for-windows/features/extensions/#adguard-vpn","content":"最后一部分专门介绍 AdGuard VPN，是指一种在用户每次浏览互联网时提供安全性和匿名性的理想工具。 用户可以点击「下载」按钮开始下载，或点击「主页」按钮转到 AdGuard VPN 官网。 AdGuard VPN 工作原理是什么？ 在不讨论技术细节的情况下，我们可以说 VPN 在用户的计算机或移动设备与远程 VPN 服务器之间创建一个安全的加密隧道。 通过这种方式，数据的保密性以及用户的匿名性得以保留，因为第三方观察者看到的是 VPN 服务器的 IP 地址而不是用户的实际 IP。 AdGuard VPN 能做什么： 隐藏用户的真实位置帮助保持匿名性更改用户的 IP 地址避免他人跟踪个人数据加密用户的流量不让第三方访问个人数据让用户自己配置在哪里启用或关闭 VPN（排除项功能） 要了解更多关于 AdGuard VPN 的信息，请转到 AdGuard VPN 知识库。 "},{"title":"其他功能","type":0,"sectionRef":"#","url":"adguard-for-windows/features/others/","content":"","keywords":""},{"title":"支持​","type":1,"pageTitle":"其他功能","url":"adguard-for-windows/features/others/#支持","content":" 用户可以点击「支持」标签以打开可报告错误，提交功能请求，分享对本产品的意见的对话框。 "},{"title":"许可证​","type":1,"pageTitle":"其他功能","url":"adguard-for-windows/features/others/#许可证","content":" 此标签包含关于许可证的信息。 用户可以查看以下信息： 了解许可证类型（Nightly 夜间版，Beta 测试版或发布版），可同时连接到 AdGuard 的设备数量限制，许可证期满日期。点击相应的按钮以转到许可证购买页，激活许可证，重置或恢复许可证。 "},{"title":"关于​","type":1,"pageTitle":"其他功能","url":"adguard-for-windows/features/others/#关于","content":" 此标签页显示有本程序的当前版本信息，许可协议/隐私策略/知识库/讨论/版本历史链接。 "},{"title":"检查更新​","type":1,"pageTitle":"其他功能","url":"adguard-for-windows/features/others/#检查更新","content":" 用户可以点击主界面右上角的旋转箭头图标以检查过滤器和用户脚本更新。 "},{"title":"托盘菜单​","type":1,"pageTitle":"其他功能","url":"adguard-for-windows/features/others/#托盘菜单","content":"为节省用户浏览 AdGuard 菜单的时间，托盘菜单提供许多常用选项和设置。 要调用此菜单，请右击托盘内的 AdGuard 图标。 其提供以下选项： 开启保护禁用保护：始终或 30 秒转到「设置」打开「工具」和「高级」菜单检查过滤器更新检查程序更新调用最后弹出的消息转到「支持」和「关于」部分关闭 AdGuard 但继续过滤退出 AdGuard "},{"title":"设置","type":0,"sectionRef":"#","url":"adguard-for-windows/features/settings/","content":"","keywords":""},{"title":"常规设置​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#常规设置","content":"用户可以在此处设置语言和主题（暗色或亮色），开启 AdGuard 随系统启动运行，静寂自动更新，选择更新通道和过滤器更新检查时间间隔。 如果 Windows 版 AdGuard 无法正常工作，而支持团队要求用户收集「调试日志」，那么「设置」也是要查看的地方。  在屏幕的最底部，可以找到「高级设置」。 无意识的更改某些高级设置可能会引起 AdGuard 出现性能问题，中断因特网连接或危及您的安全和隐私。 这就是为什么我们建议用户仅在自己知道在做什么或我们的支持团队要求的情况下才打开此部分。 如您想知道在「高级设置」中可以设置什么，请阅读专门文章。 "},{"title":"广告拦截器​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#广告拦截器","content":"此为 Windows 版 AdGuard 的主模块，可从用户访问的网站上和设备上安装的应用内移除广告。 要过来广告和威胁隐私的内容，如横幅，弹窗或跟踪器，AdGuard 使用不同的过滤器：用特定语法编写的有类似用途的规则组。 要了解什么是过滤器及其工作原理，请阅读本文。  在广告拦截器模块中，可以进行以下设置： 开启自动激活特定语言的过滤器禁用搜索广告和自我推销拦截disable ads in the Start menu on Windows 11,激活预安装的过滤器，如「AdGuard 基础过滤器」点击「添加过滤器」按钮从列表上安装过滤器或添加自定义过滤器使用「过滤器编辑器」按钮更改现有规则组点击「过滤日志」按钮以查看由浏览器和您系统上已安装应用的所有请求。 用户可以在过滤日志创建自定义规则以拦截或取消任何请求的拦截用自己编写的规则，导入的规则或用 AdGuard 助手扩展创建的规则组成过滤器。 在开始手动编写自己的规则之前，请阅读我们详细的语法指南。 "},{"title":"隐身模式​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#隐身模式","content":"众多网站收集其访问者的信息，如他们的 IP 地址，所用浏览器和操作系统的信息，屏幕分辨率，甚至是用户从何重新定向而至。 某些网站使用 Cookie 标记浏览器并保存个人设置，用户首选项或在用户下次访问时“识别”您。 隐身模式保护个人信息免受如数据/统计收集系统的侵害。  用户可以灵活调整隐身模式的工作方式：例如，可以阻止网站接收您在因特网查找它时所用的搜索请求，自动删除第三方和网站自身的 Cookie，禁用可用于跟踪用户行踪的位置共享。 要了解关于隐身模式及其选项的更多信息，请阅读此文章。 "},{"title":"浏览安全​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#浏览安全","content":"「浏览安全」功能针对恶意网站和钓鱼网站提供给用户强力保护。 AdGuard Windows 版并非反病毒软件。 软件无法阻止已开始下载的病毒或删除现有病毒。 但如您要访问一个已添加到我们的“不受信任的站点”数据库中的网站，或者从此类网站下载文件，软件会发出警告。 您可在专门文章内找到关于此模块工作方式的更多信息。 在此模块内，用户可以进行以下设置： 开启对恶意和钓鱼网站的拦截请求的通知，激活声音通知，同意向 AdGuard 服务器提交匿名安全相关信息，以帮助我们保持恶意和钓鱼网站数据库最新状态。  要了解更多关于「浏览安全」功能的信息，请阅读此文章。 "},{"title":"DNS 保护​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#dns-保护","content":"有三个重要原因值得用户探索 DNS 保护设置。 首先，避免受到您 ISP 的跟踪。 每次用户打开网站，例如 google.com，浏览器都会给 DNS 服务器发送请求以获取相应网站的 IP 地址。 通常，DNS 服务器属于您的 ISP，这使他们能够跟踪用户的在线活动。 第二，加密 DNS 流量。 第三，在 DNS 级别上屏蔽内容。  在 Windows 版 AdGuard 的 DNS 保护模块内，用户可以从已知的 DNS 提供商内选择 DNS 服务器，包括可以拦截广告和跟踪器的 AdGuard DNS，还可拦截成人内容的 AdGuard DNS 家庭保护，或提供安全可靠连接但不过滤任何内容的 AdGuard DNS 无过滤。 用户也可以添加自定义 DNS 服务器。 还可以使用 DNS 规则语法添加自定义规则。 如有必要，用户可以添加自己选择的 DNS 过滤器。 "},{"title":"家长控制​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#家长控制","content":"有几个网站应该限制儿童使用电脑访问。 此任务由家长控制完成。  此模块检查浏览器打开的网页内容，过滤儿童不宜的内容：成人图像和文字、粗俗语言、暴力、毒品宣传等。 家长控制设置受密码保护，孩子无法绕过限制。 此模块不仅拦截对不良网站的指向，也可从搜索结果中移除儿童不宜的链接。 在家长控制模块，用户可以开启「安全搜索」，管理「黑名单」和「白名单」以自定义此选项的工作方式。 用户也可以选中「阻止下载可执行文件」以防止儿童在计算机上下载和安装软件。 「家长控制」模块有多个选项：用户可以选择「家长控制」保护特定的 Windows 用户，设置密码保护 AdGuard 设置以防更改。  "},{"title":"浏览器助手​","type":1,"pageTitle":"设置","url":"adguard-for-windows/features/settings/#浏览器助手","content":" 用户可以在此选项页上轻松处理已安装的 AdGuard 浏览器助手，其主功能是从浏览器内直接管理过滤。 我们在单独的文章内解释其工作方式以及如您的浏览器没有浏览器助手要如何处理。 "},{"title":"主页","type":0,"sectionRef":"#","url":"adguard-for-windows/features/home-screen/","content":"主页 信息 本文适用于 Windows 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理，请下载 AdGuard 应用程序 Windows 版 AdGuard 是一款易于使用的可拦截烦人横幅，弹窗，视频广告和跟踪器的工具。 但这还不是全部：它可帮助用户节省流量、更快地加载网页，并保护计算机免受不良网站和潜在恶意网站的侵害。 AdGuard 还可以保护用户免受网络钓鱼网站的侵害，并让孩子远离不当内容。 启动 Windows 版 AdGuard 后可以看到主页。 主页上最引人注目的细节是「启用/禁用保护」按钮。 此外，用户可以在主页上看到关于拦截的广告，跟踪器和威胁的统计数据，查看程序版本或更新。 此外，右上角有四个标签，包括「设置」、「支持」、「许可证」和「关于」。 它们都值得单独讨论。","keywords":""},{"title":"安装","type":0,"sectionRef":"#","url":"adguard-for-windows/installation/","content":"","keywords":""},{"title":"系统要求​","type":1,"pageTitle":"安装","url":"adguard-for-windows/installation/#系统要求","content":"操作系统： Microsoft Windows 11、10、8.1、8、7、Vista RAM： 至少 512 MB 可用磁盘空间： 150 MB 浏览器： 百度、Microsoft Edge、Microsoft Internet Explorer（所有版本）、Opera、Google Chrome、Yandex.Browser、Mozilla Firefox 和其他浏览器。 "},{"title":"AdGuard installation​","type":1,"pageTitle":"安装","url":"adguard-for-windows/installation/#adguard-installation","content":"如您想要在 Microsoft Windows 操作系统的电脑或笔记本上使用 AdGuard ，您要下载安装包并启用安装程序。 请执行以下步骤： 在地址栏输入 AdGuard 官网，在打开的页面中点击「下载」。 When the download is finished, press the Open button shown in the Downloads bar or click the file name adguardInstaller.exe. You’ll see the User Account Control dialogue box requesting to allow the app to make changes to your PC. Click Yes. Next, choose the folder on your PC for the app to be installed to. If you do not agree with the default installation path, press Browse, select the folder for AdGuard installation in the Browse For Folder window, and confirm your choice by clicking OK. You can also install AdGuard to a new folder by clicking Make New Folder and entering its name. To create a desktop shortcut for AdGuard, check the Create a desktop shortcut box. Press Install to proceed with installation. Wait for the installation to complete and click Finish. Congratulations! You have successfully installed AdGuard on your computer. On the screen you will see the main window where you can change the app’s settings. "},{"title":"如何卸载 AdGuard Windows版​","type":1,"pageTitle":"安装","url":"adguard-for-windows/installation/#uninstall","content":""},{"title":"常规方式​","type":1,"pageTitle":"安装","url":"adguard-for-windows/installation/#常规方式","content":"If you need to uninstall or reinstall AdGuard, do the following: Microsoft Windows 10&amp;11：点击「开始菜单」并选择「设置」。 在弹出的视窗里点击「应用」。 在「应用程序」窗口中，从左边的列表中选择「应用和功能」。 在已安装的应用程序列表中选择「AdGuard」，并点击「卸载」。 在弹出的对话框确认「卸载」。  For Microsoft Windows 8: Right-click the empty space in the lower left corner of the task bar and select Control Panel. 单击「程序」部分中的「卸载程序」，然后从已安装应用程序列表中选择「AdGuard」，然后按位于列表正上方的「卸载」按钮。 在打开的窗口中单击「卸载 AdGuard」。  For Microsoft Windows 8.1: Right-click the Start button and select Control Panel. 单击「程序」部分中的「卸载程序」，然后从已安装应用程序列表中选择「AdGuard」，然后按位于列表正上方的「卸载」按钮。 在打开的窗口中单击「卸载 AdGuard」。 Microsoft Windows 7：打开开始菜单。 在搜索框键入「控制面板」。 单击「程序」部分中的「卸载程序」，然后从已安装应用程序列表中选择「AdGuard」，然后按位于列表正上方的「卸载」按钮。 在打开的窗口中单击「卸载 AdGuard」。  "},{"title":"卸载的进阶方法​","type":1,"pageTitle":"安装","url":"adguard-for-windows/installation/#advanced","content":"In case regular uninstall doesn't work for any reason, you can try to use an advanced method. First of all, you need to download the uninstaller tool created by our developers. Extract the archive to any folder on your PC and run the Adguard.UninstallUtility.exe file, and allow the app to make changes to your device. Then follow the instruction below: Select AdGuard Ad Blocker and Standard uninstall type, then click Uninstall.  Click OK once the warning window pops up:  Wait until uninstall is finished — there will be a phrase Uninstall complete and a prompt to restart your computer:  警告 Follow the next steps only if performing the first two steps wasn’t enough for some reason. We strongly suggest contacting our support before using steps 3-4 of advanced uninstall instruction. Select AdGuard Ad Blocker and Extended uninstall type, then click Uninstall. Clcik Yes, continue in the window prompt.  Click OK once the warning window pops up:  Wait until uninstall is finished — there will be a phrase Uninstall complete and a prompt to restart your computer:  AdGuard is successfully uninstalled! "},{"title":"证书相关问题","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/connection-not-trusted/","content":"","keywords":""},{"title":"Firefox 的浏览器中的「潜在的安全风险」错误​","type":1,"pageTitle":"证书相关问题","url":"adguard-for-windows/solving-problems/connection-not-trusted/#firefox-的浏览器中的潜在的安全风险错误","content":" 旧的 FireFox 版本以及基于它们的浏览器不信任系统存储中的证书，而只信任本地存储中的证书。 从 v68 版本开始，FireFox 信任系统证书，但您仍然会遇到「连接不受信任」错误。 如果发生这种情况，首先尝试转到「网络」点击「重新安装证书」按钮。  如果没有帮助，请按照说明手动将 AdGuard 证书添加到 FireFox 存储。 此说明适用于 Firefox 浏览器。 在其它基于 Firefox 的浏览器中，按钮和菜单项目的名称可能有所不同。 运行 AdGuard。 转到 http://local.adguard.org/cert 并单击「下载」按钮。 浏览器应开始下载 cert.cer 文件。 注意 用户也可以通过 AdGuard 程序的「设置」→「网络」→「HTTPS 过滤」点击链接以打开下载页面。 ::: ![证书设置](https://cdn.adtidy.org/content/kb/ad_blocker/windows/solving-problems/link.jpeg)  打开浏览器，然后打开「设置」。 转到「隐私和安全」标签。 向下滚动到「证书」点击「查看证书」按钮。 选择「权限」标签。 点击「导入...」。 浏览下载的 cert.cer 文件并点击「打开」。 选中复选框「信任此 CA 以识别网站」点击「确定」。 AdGuard 证书安装成功。 重新启动浏览器，错误应消失。 "},{"title":"Yandex.Browser 证书警告​","type":1,"pageTitle":"证书相关问题","url":"adguard-for-windows/solving-problems/connection-not-trusted/#yandexbrowser-证书警告","content":"Windows 版 AdGuard + Yandex.Browser 的用户可能会遇到以下警告：  "},{"title":"为什么会发生这种情况​","type":1,"pageTitle":"证书相关问题","url":"adguard-for-windows/solving-problems/connection-not-trusted/#为什么会发生这种情况","content":"AdGuard 和 Yandex 都非常重视用户在因特网上的安全。 Yandex 当前的策略是对浏览器无法识别的证书向用户发出警告。 这并非毫无依据，因为有时恶意程序会注射自己的证书并借此危害系统和窃取私人数据。 但 AdGuard 也会将其证书添加到受信任的证书中。 这会导致用户遇到的警告消息。 "},{"title":"如何解决此问题​","type":1,"pageTitle":"证书相关问题","url":"adguard-for-windows/solving-problems/connection-not-trusted/#如何解决此问题","content":"最简单的方式就是点击「转到网站」按钮。 这将告知 Yandex.Browser 记忆 AdGuard 证书为受信任的证书，至少在一段时间内如此。 通常，用户不会再看到此讯息，但无论出于何种原因，警告偶尔出现也并非不可能。 在此种情况下，只需再次点击相同的按钮 （请确保它是 AdGuard 的证书！）。 在 AdGuard 内禁用 HTTPS 过滤也会阻止 Yandex.Browser 再次显示此信息，但其代价很大：所有通过 HTTPS 加载的广告（包括 Yandex 的广告）都会显示，如 YouTube，Facebook，Instagram 等等。 如您要保持较高的广告拦截质量，我们强烈建议您不要如此做。 "},{"title":"常见安装程序错误","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/common-installer-errors/","content":"","keywords":""},{"title":"错误 5：拒绝访问​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-5","content":"这个错误发生在权限设置有问题的时候。 AdGuard 安装程序没有正确完成安装过程所需的权限可能有多种不同的原因。 用户可以尝试以下步骤： 暂时禁用防病毒软件。 部分防病毒软件可能会干扰安装，具体取决于其设置的严格程度。 选择不同的安装文件夹。 当前安装文件夹可能有一些访问限制。 用户还要确保没有选择外部驱动器、虚拟驱动器等。 重新启动计算机。 有时权限问题是暂时的，可以通过重新启动电脑来解决。 "},{"title":"错误 112：磁盘已满；错误 1632：临时文件夹已满或无法访问​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-112","content":"这是两个不同的错误，但解决方案非常相似。 顾名思义，AdGuard 安装程序没有找到足够的磁盘空间来完成安装。 有几种方法可以尝试解决问题： 从尝试安装 AdGuard 的驱动器中卸载一些程序或删除不需要的文件。 下载、安装并运行 AdwCleaner，这是一款由 Malwarebytes 提供的免费软件。 软件能够清除系统中因卸载程序错误而产生的各种额外“遗留”文件。 它有助于清理出磁盘空间。 重新启动计算机。 有时候临时文件会占用大量磁盘空间，重启电脑是清除临时文件最可靠的方法。 "},{"title":"错误 1601：无法访问 Windows Installer​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-1601","content":"可以说，这是错误 1603 的一个特殊子案例。 解决方案是相似的： 启动并重新注册 Microsoft Installer 服务。 这需要如下操作： 1) 按 Win + R 并输入 services.msc。 2) 在列表中找到并双击 Windows Installer。 3) 在「服务状态」下点击「启动」按钮并点击「确定」。 如果服务状态是「正在运行」，应该先点击「停止」，然后再点击「启动」。 4) 按「Win + R」，键入并输入 msiexec /unregister 并按「Enter」键。 5) 再次按「Win + R 」，键入并输入 msiexec /regserver 并按「Enter」键。 重启电脑并重新开始安装。 有时这足以修复此问题。 "},{"title":"错误 1602：用户取消​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-1602","content":"如果您收到此错误代码，可能是您以某种方式手动中断了安装过程。 请执行以下操作： 不要关闭安装程序窗口。 安装完成后，窗口自动关闭。 如果在安装过程中弹出对话窗口，请点击「是」以授予安装程序所需的权限。 单击「否」将取消安装。 安装过程中请不要启动其他进程。 "},{"title":"错误 1603：安装过程中出现致命错误​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-1603","content":"这个错误只是听起来比较吓人。 实际上，这是一个相当普遍的错误，有许多不同的原因，其中有些很容易修复。 请尝试以下解决方案： 按「Win」键，搜索「命令提示符」并运行它。 输入 sfc /scannow，按「Enter」键。 选择不同的安装文件夹。 当前安装文件夹可能有一些访问限制。 用户还要确保没有选择外部驱动器、虚拟驱动器等。 使用我们的专用卸载工具卸载 AdGuard，然后重复安装。 启动并重新注册 Microsoft Installer 服务。 这需要如下操作： 1) 按「Win + R」并输入 services.msc。 2) 在列表中找到并双击 Windows Installer。 3) 在「服务状态」下点击「启动」按钮并点击「确定」。 如果服务状态是「正在运行」，应该先点击「停止」，然后再点击「启动」。 4) 按「Win + R」，键入并输入 msiexec /unregister 并按「Enter」键。 5) 再次按「Win + R 」，键入并输入 msiexec /regserver 并按「Enter」键。 获取安装驱动器的完全权限。 出现错误 1603 可能是由于您对该文件位置没有完全权限。 这种情况的解决方案会稍微复杂一些： 1) 打开「文件资源管理器」，右键单击安装位置所在的驱动器，然后选择「属性」。 2) 转至「安全」选项卡并单击「编辑」。 3) 单击「SYSTEM」并确保勾选「SYSTEM 的权限」中每一项的「允许」框（如果可以勾选）。 对「Administrators」进行相同的勾选操作。 4) 单击「确定」返回「属性」对话框。 然后单击「高级」。 5) 单击「更改权限」。 6) 在「权限」选项卡中，双击「管理员」。 7) 在「应用于」中选择「此文件夹、子文件夹和文件」并勾选所有可用的「基本权限」。 然后点击「确定」。 8) 对「SYSTEM」执行上述相同操作（从第 7 项开始）。 9) 一直点击「确定」直到所有对话框关闭。 最后尝试重新安装 AdGuard。 "},{"title":"错误 1618：另一个安装已在进行中​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-1618","content":"当同时启动多个 AdGuard 安装程序时会出现此错误。 如果出现此错误，请执行以下操作： 重启电脑并重新开始安装。 当您重启计算机后，所有正在进行的进程都将停止，包括所有运行中的安装程序。 即使安装没有立即开始，也不要多次点击安装程序。 有时候显示安装界面可能会需要几秒钟。 "},{"title":"错误 1638：已安装此软件的另一个版本​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#error-1638","content":"很有可能您之前已经安装 AdGuard。 检查 AdGuard 是否已安装在计算机上。 您可以通过按「Win」键并输入 AdGuard 来完成。 也许有一些以前安装 AdGuard 时遗留下来的文件。 使用我们的专用卸载工具卸载 AdGuard，然后重复安装。 "},{"title":"其他错误​","type":1,"pageTitle":"常见安装程序错误","url":"adguard-for-windows/solving-problems/common-installer-errors/#other","content":"如果您遇到了上面没有列出的错误，请与支持团队联系，我们帮您解决问题。 与我们联系以前，请收集日志文件。 执行以下步骤： 找到并保存 AdGuard 安装日志，详细步骤见这篇文章。 找到并保存事件查看器中有关磁盘的日志。 这篇文章中有操作步骤。 请将前两个步骤中得到的文件通过电子邮件发送到我们的支持团队 support@adguard.com，并在邮件正文中描述您的问题。 我们的技术支持团队将尽快回复您。 "},{"title":"DNS 泄漏","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/dns-leaks/","content":"","keywords":""},{"title":"Bootstrap DNS 地址​","type":1,"pageTitle":"DNS 泄漏","url":"adguard-for-windows/solving-problems/dns-leaks/#bootstrap-dns-地址","content":"DNS 服务器地址可以写为 IP 或域名。 在 IP 地址的情况下没有什么困难：AdGuard 将 DNS 请求直接转发到 DNS 保护模块中指定的服务器。 不过，加密的 DNS 服务器地址（如 DoT 或 DoH）最常见的写法是域名。 在这种情况下，首先要解析加密的 DNS 服务器地址，因此 AdGuard 发送 DNS 查询到 Bootstrap（引导）地址，默认情况下是一个系统 DNS 服务器。 这种连接就是检查服务所认为的泄漏。 要消除此泄漏，请执行以下操作： 转到「高级设置」向下滚动到「自定义 Bootstrap 地址的列表」部分以 IP 地址格式输入自定义引导地址（可以使用「已知 DNS 提供商列表」）单击「保存」 "},{"title":"后备 DNS 服务器​","type":1,"pageTitle":"DNS 泄漏","url":"adguard-for-windows/solving-problems/dns-leaks/#后备-dns-服务器","content":"有时，由于互联网连接不畅、默认服务器响应超时或其他服务器相关的问题，AdGuard 无法连接到指定服务器。 在这种情况下，软件将连接到后备服务器，默认情况下是系统 DNS 服务器。 检查部门也会将这种连接视为泄漏。 要消除此泄漏，请执行以下操作： 转到「高级设置」向下滚动到「后备服务器」部分勾选「使用自定义服务器」然后找到「自定义后备服务器的列表」部分，每行输入一个自定义后备服务器 或者 转到「高级设置」向下滚动到「后备服务器」部分勾选「不要使用后备服务器」 或者 转到「高级设置」向下滚动到「DNS 服务器的超时期限」部分输入任意大数 "},{"title":"如何收集 AdGuard 日志记录","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/adguard-logs/","content":"","keywords":""},{"title":"调试日志​","type":1,"pageTitle":"如何收集 AdGuard 日志记录","url":"adguard-for-windows/solving-problems/adguard-logs/#debug-logs","content":"打开 AdGuard 设置。 转到「常规设置」部分，下滚至界面底部并切换「日志级别」至「调试」。 复现问题。 我们强烈建议用户记录问题重现的确切时间：这将有助于我们的支持团队找到相关日志条目并更快地解决问题。 请使用「导出日志」按钮以导出记录日志。 将存档保存到任意文件夹。 注意：导出日志后，将日志记录级别设置为「标准」。 「调试」日志记录级别会降低应用程序的运行速度。 发送存档给 AdGuard 支持团队 support@adguard.com 时，请描述问题和出现问题的时间。 "},{"title":"跟踪日志​","type":1,"pageTitle":"如何收集 AdGuard 日志记录","url":"adguard-for-windows/solving-problems/adguard-logs/#trace-logs","content":"有时，支持团队成员可能会要求用户发送「跟踪」日志。 要发送跟踪日志，请执行以下操作： 右击托盘菜单内的 AdGuard 图标并选择「退出 AdGuard」以停止 AdGuard： 请不要让服务继续运行： 打开控制台（在开始面板中键入 cmd）。 如果您已安装适用于 Windows 的 AdGuard v7.16 或更高版本，请使用命令 C:\\&quot;Program Files&quot;\\Adguard\\Adguard.exe /trace 运行程序，无论 Windows 位数如何。 如果您有旧版本的 AdGuard for Windows：如您使用的是 64 位 Windows，则请使用命令 &quot;C:\\Program Files (x86)\\Adguard\\Adguard.exe /trace&quot; 运行程序；如您使用的是 32 位 Windows，则请使用命令 &quot;C:\\Program Files\\Adguard\\Adguard.exe /trace&quot;。 复现问题。 我们强烈建议用户记录问题重现的确切时间：这将有助于我们的支持团队找到相关日志条目并更快地解决问题。 请使用「导出日志」按钮以导出记录日志。 用户无需担心日志文件大小。 我们需要了解尽可能多的细节来解决您的问题。 "},{"title":"创建 Dump 文件","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/dump-file/","content":"创建 Dump 文件 信息 本文适用于 Windows 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理，请下载 AdGuard 应用程序。 注意 Data and/or files provided in dump files are processed in accordance with the AdGuard Privacy Policy. 要诊断用户在使用 AdGuard 期间可能遇到的潜在问题，支持团队需要进程 Dump 文件（转储文件）。 转储文件帮助开发者展现应用程序在某个周期内执行的进程。 用户可以按以下所述方式收集电脑上的转储文件。 按按键组合「Ctrl + Shift + Esc」点击「任务管理器」 在顶部的菜单内选择「详细信息」 右击您要为之创建转储文件的进程（如，支持团队可能会要求您为 AdGuard.exe 创建转储文件） 在下拉菜单内选择「创建转储文件」 转储文件创建成功！ 创建转储文件后，请导航至文件所在。 转储文件创建完成后会提示用户打开其所在文件夹。 如没有，您可以在 %tmp% 文件夹内找到它。 创建的转储文件（.DMP）其名称与您在先前步骤所选的进程名称相同。 文件体积相当大，所以请在将其发送给我们的支持团队前先压缩它。 注意 Windows 版 AdGuard 有两个运行中的进程（Adguard.exe 和 AdguardSvc.exe）。 所以用户需要为它们分别创建转储文件。 当您发送转储文件给我们的支持团队时，也请附上 AdGuard 程序日志以便我们更好的解决问题。 您可以在此检查收集日志文件的指示说明。","keywords":""},{"title":"Windows 版 AdGuard 已知问题","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/known-issues/","content":"","keywords":""},{"title":"Windows 版 AdGuard 和 AdGuard VPN 的兼容性问题​","type":1,"pageTitle":"Windows 版 AdGuard 已知问题","url":"adguard-for-windows/solving-problems/known-issues/#windows-版-adguard-和-adguard-vpn-的兼容性问题","content":"一旦用户安装 Windows 版 AdGuard 和 Windows 版 AdGuard VPN，两款软件就会开始协同工作，无需付出任何努力。 不过，更改某些默认设置会导致应用程序同时运行时出现工作错误。 Windows 版 AdGuard 有两个特定设置：「使用重定向驱动模式」和「过滤 localhost 连接」。 默认情况下，第一个处于禁用状态，第二个处于启用状态。 如果在设备上同时启用 AdGuard 广告拦截程序和 AdGuard VPN，则更改任何这些设置都将不可避免地破坏 AdGuard 的过滤功能。 只有在解决与 AdGuard 广告拦截程序和网络级应用程序（如防病毒软件、VPN 和网络过滤器）同时运行有关的问题时，才有必要更改这些设置。 如果有用户需要更改上述设置的默认状态，但仍希望 AdGuard 广告拦截程序和 AdGuard VPN 同时正确工作，请在 GitHub 上创建一个问题，以便我们为您提供帮助。 我们目前正在努力克服上述应用程序同时工作的限制。 "},{"title":"AdGuard 安装日志收集方式","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/installation-logs/","content":"AdGuard 安装日志收集方式 信息 本文适用于 Windows 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理，请下载 AdGuard 应用程序。 注意 Data and/or files provided in system logs are processed in accordance with the AdGuard Privacy Policy. 如您在安装 AdGuard 期间发生问题，可以发送技术请求给我们的支持团队，但他们会要求您收集并发送 AdGuard 安装日志。 在这种情况下，您需要执行以下操作： 从开始菜单选择「运行」命令或按按键组合「Win + R」。 在字段内键入「%tmp%」点击「确定」。 在打开的文件夹内，选择所有以 AdGuard 为开始的文件并添加它们到存档（可使用 WinRAR 或其它存档软件）。 发送此存档给 AdGuard 技术支持团队 support@adguard.com。","keywords":""},{"title":"WFP 驱动","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/wfp-driver/","content":"WFP 驱动 信息 本文适用于 Windows 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理，请下载 AdGuard 应用程序。 要过滤网络流量，AdGuard 会使用网络驱动程序。 有两个设置选项：TDI 驱动程序和 WFP 驱动程序。 WFP 驱动程序通常是首选且默认情况下，所有较新的 Windows 操作系统版本（Windows 8 及更新版本）都是开启的，但它可能会导致兼容性问题，尤其是与某些防病毒软件。 这些问题和随后的错误在每种情况下可能会有很大不同。 如果您遇到怀疑可能由此引起的问题，可以随时切换到较旧但更稳定的 TDI 网络驱动程序。 具体操作： 转到「设置」→「网络」。 按照下图所示禁用 WFP 驱动程序：","keywords":""},{"title":"高级（低级）设置指南","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/low-level-settings/","content":"","keywords":""},{"title":"如何转到高级设置​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#如何转到高级设置","content":"要进入「高级设置」，请在主窗口单击「设置」→「常规设置」，然后向下滚动到「高级设置」。 或者在托盘菜单中选择「高级」→「高级设置…」。 "},{"title":"高级设置​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#高级设置","content":"一旦用户打开高级设置，会看到以下选项: "},{"title":"拦截 TCP 快速打开​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#拦截-tcp-快速打开","content":"如果启用，AdGuard 将阻止 Edge 浏览器中的 TCP 快速打开。 要应用设置，请重新启动浏览器。 "},{"title":"使用 Encrypted ClientHello​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#使用-encrypted-clienthello","content":"每一个加密的互联网连接都有一个未加密的部分， 就是发送的第一个数据包，包含用户要连接的服务器名称。 Encrypted ClientHello（ECH）的技术能够解决该问题，成功加密最后一位未加密的信息。 要使用该功能，请启用「使用 Encrypted ClientHello」选项。 本功能使用本地 DNS 代理查找域名的 ECH 配置。 如果找到，将对 ClientHello 数据包进行加密。 "},{"title":"检查网站的证书透明度​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#检查网站的证书透明度","content":"基于 Chrome 证书透明度（英文：Chrome Certificate Transparency，简称：Chrome CT）政策验证域名内所有证书的真实性。 如果证书不符合 Chrome 证实透明化政策，AdGuard 将不过滤该网站。 而 Chrome 则会屏蔽它。 "},{"title":"启用 SSL/TLS 证书撤销检查​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#启用-ssltls-证书撤销检查","content":"启用后，此选项将运行异步 OCSP 检查，以检查网站的 SSL/TLS 证书是否被撤销。 如果在最短超时时间内完成 OCSP 检查，AdGuard 会立即应用检查结果；如果证书被撤销，则阻断连接，如果证书有效，则重新建立连接。 如果验证时间过长，AdGuard 将建立连接并在后台继续检查。 如果证书被撤销，当前和将来该域名的连接将被阻止。 "},{"title":"在设置中显示 AdGuard VPN​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#在设置中显示-adguard-vpn","content":"启用此选项可让用户在设置中显示 AdGuard VPN 选项卡，以便轻松打开应用程序和产品的网站。 "},{"title":"过滤时按完整路径排除应用​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#过滤时按完整路径排除应用","content":"如果用户不想 AdGuard 过滤某款特定的应用程序流量，请指定应用程序的完整路径。这些应用程序将被排除在过滤之外。 请用分号分隔不同的路径。 "},{"title":"启用 AdGuard 弹窗通知​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#启用-adguard-弹窗通知","content":"启用此功能查看 AdGuard 弹出式通知。 通知不经常出现，只包含重要的信息。 用户还可以使用托盘菜单来召回最后的弹出通知。 "},{"title":"自动截取过滤器订阅 URL​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#自动截取过滤器订阅-url","content":"如果用户想让 AdGuard 自动拦截过滤器订阅 URL（如 abp:subscribe 等）并打开自定义过滤器安装对话框，请启用此功能。 "},{"title":"过滤 HTTP/3​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#过滤-http3","content":"如果启用此设置，AdGuard 除过滤其他请求类型外，还会过滤通过 HTTP/3 发送的请求。 "},{"title":"使用重定向驱动模式​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#使用重定向驱动模式","content":"如果启用该选项，AdGuard 将拦截所有流量，并将其重定向到本地代理服务器进行进一步过滤。 否则，AdGuard 将对所有流量进行实时过滤，而不进行重定向。 在这种情况下，系统将认为 AdGuard 是连接到互联网的唯一一款应用程序（其他应用程序的流量通过 AdGuard 路由）。 缺点是本功能会降低系统防火墙的有效性。 好处是这种方法工作起来快了一点。 "},{"title":"随系统启动时显示主窗口​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#随系统启动时显示主窗口","content":"启用此选项可在加载系统后打开 AdGuard 主窗口。 请注意，本功能不影响实际过滤服务是否启动，此设置位于「设置」→「常规设置」中。 "},{"title":"在系统启动时启用过滤​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#在系统启动时启用过滤","content":"从 v7.12 版本开始，默认情况下，如果「AdGuard 随系统启动」选项被禁用，AdGuard 服务不会在操作系统启动后开始过滤流量。 这意味着，AdGuard 服务是以“待机”模式启动的。 启用此选项，使 AdGuard 过滤流量，即使应用程序没有启动。 注意 在 v7.12 之前的版本，AdGuard 服务默认是以过滤模式启动的（即使是在「AdGuard 随系统启动运行」被禁用的情况下）。 如您满足旧版本的行为，则可开启此项。 "},{"title":"过滤 localhost 连接​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#过滤-localhost-连接","content":"如果用户希望 AdGuard 过滤环回（Loopback）连接，请选中复选框。 如果用户已安装 AdGuard VPN，此选项将始终处于开启状态，否则 AdGuard VPN 将无法工作。 "},{"title":"从过滤中排除特定 IP 范围​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#从过滤中排除特定-ip-范围","content":"如果用户不希望 AdGuard 过滤特定的子网，请启用此功能，并在下面「无需进行过滤的 IP 范围」指定 CIDR 表记中的 IP 范围（例如 98.51.100.14/24）。 "},{"title":"启用 HAR 写入​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#启用-har-写入","content":"此选项仅用于调试目的。 如果勾选复选标记，AdGuard 将创建一个文件，其中包含 HAR 1.2 格式的所有已过滤 HTTP 请求的信息。 这个文件可以用 Fiddler 应用程序分析。 注意，这可能会显著降低网页加载速度。 "},{"title":"在普通的 HTTP 请求中添加额外的空间​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#在普通的-http-请求中添加额外的空间","content":"在 HTTP 方法和 URL 之间添加额外的空格，并在“主机”（Host）字段后删除空格以避免深度包检测。 例如，请求 GET /foo/bar/ HTTP/1.1 Host: example.org 将转换为 GET /foo/bar/ HTTP/1.1 Host: example.org 此选项仅在启用隐身模式的「保护免受 DPI 影响」选项时被应用。 "},{"title":"调整初始 TLS 数据包的碎片大小​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#调整初始-tls-数据包的碎片大小","content":"指定 TCP 数据包碎片的大小，避免深度包检测。 此选项仅影响安全（HTTPS）流量。 如果开启该选项，AdGuard 将初始 TLS 数据包（ClientHello 数据包）分成两部分：第一部分包含指定的长度，第二部分包含剩余的长度，直到整个初始 TLS 数据包的长度。 有效值：1–1500。 如果指定无效大小，将使用系统选择的数值。 此选项仅在启用隐身模式的「保护免受 DPI 影响」选项时被应用。 "},{"title":"普通 HTTP 请求片段大小​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#普通-http-请求片段大小","content":"调整 HTTP 请求片段大小。 此选项仅影响普通 HTTP 流量。 开启该选项后，AdGuard 会将初始数据包分成两部分：第一部分是指定的长度，第二部分是指定的长度，直到原始数据包的长度。 有效值：1–1500。 如果指定无效大小，将使用系统选择的数值。 此选项仅在启用隐身模式的「保护免受 DPI 影响」选项时被应用。 "},{"title":"显示 QUIC​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#显示-quic","content":"允许在过滤日志中显示 QUIC 协议记录。 仅适用于被阻止的请求。 "},{"title":"启用 TCP 保活（keepalive）​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#启用-tcp-保活keepalive","content":"定期在 IDLE 连接上发送 TCP 数据包，以确保它是保活的，并更新 NAT 超时。 此选项可用于绕过某些 ISP（互联网服务提供商）使用的严格的网络地址转换（NAT）设置。 "},{"title":"TCP 保活间隔​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#tcp-保活间隔","content":"用户可以指定在发送 keepalive 探测之前的空闲时间段（以秒为单位）。 如指定为 0，则使用系统选择的数值。 注意 此设置仅工作在「启用 TCP 保活」被开启的情况下。 "},{"title":"TCP 保活超时​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#tcp-保活超时","content":"用户可以指定时间（以秒为单位），然后向没有响应的对等发送另一个 keepalive（保活）探测。 如果指定 0，使用系统选择的数值。 注意 此设置仅工作在「启用 TCP 保活」被开启的情况下。 "},{"title":"拦截 Java​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#拦截-java","content":"一些网站和 Web 服务仍然支持 Java 插件。 作为 Java 插件基础的 API 存在严重的安全漏洞。 出于安全考虑，可以禁用此类插件。 然而，即使用户决定使用「拦截 Java」选项，JavaScript 仍然会被启用。 "},{"title":"DNS 服务器的超时期限​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#dns-服务器的超时期限","content":"用户可以指定 AdGuard 在使用后备服务器之前，等待选定 DNS 服务器响应的时间（以毫秒为单位）。 如果数值无效或为空，要使用的数值为 5000。 "},{"title":"将 HTTP/3 用于 DNS-over-HTTPS​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#将-http3-用于-dns-over-https","content":"如果所选上游支持此协议，为 DNS-over-HTTPS 上游启用 HTTP/3 以加速连接。 这意味着，启用该选项并不能保证所有 DNS 请求都将通过 HTTP/3 发送。 "},{"title":"使用备用 DNS 上游​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#使用备用-dns-上游","content":"如果所有 DNS 到所选上游请求失败，则正常查询将重新定向到后备上游。 "},{"title":"并行查询 DNS 上游​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#并行查询-dns-上游","content":"所有的上游都是并行查询的。第一个响应会被返回。 由于 DNS 查询以并行方式处理，因此启用此功能可以提高上网速度。 "},{"title":"始终响应故障的 DNS 查询​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#始终响应故障的-dns-查询","content":"如果地址解析在每个转发的上游以及后备域名上失败，对 DNS 请求的响应将是 SERVFAIL。 "},{"title":"启用安全 DNS 请求的过滤​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#启用安全-dns-请求的过滤","content":"除普通 DNS 请求外，AdGuard 将所用安全 DNS 请求都重新定向到本地 DNS 代理。 "},{"title":"host 规则的拦截模式​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#host-规则的拦截模式","content":"用户可以选择 AdGuard 将根据 hosts 规则的语法对被 DNS 规则阻止的域名作出反应的方式。 将「REFUSED」的错误作出回应将「NxDomain」的错误作出回应使用自定义 IP 地址作出回应 "},{"title":"adblock 规则的拦截模式​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#adblock-规则的拦截模式","content":"用户可以选择 AdGuard 将根据 adblock 规则的语法对被 DNS 规则阻止的域名作出反应的方式。 将「REFUSED」的错误作出回应将「NxDomain」的错误作出回应使用自定义 IP 地址作出回应 "},{"title":"自定义 IPv4 地址​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#自定义-ipv4-地址","content":"如果在 host 规则的「拦截模式」或 adblock 规则的「拦截模式」中选择「自定义 IP 地址」，所有被阻止的「A」请求将返回该 IP 地址. 如果没有指定，AdGuard 将回复默认的「REFUSED」错误。 "},{"title":"自定义 IPv6 地址​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#自定义-ipv6-地址","content":"如果在 host 规则的「拦截模式」或 adblock 规则的「拦截模式」中选择「自定义 IP 地址」，所有被阻止的「AAAA」请求将返回该 IP 地址. 如果没有指定，AdGuard 将回复默认的「REFUSED」错误。 "},{"title":"后备（Fallback）服务器​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#后备fallback服务器","content":"用户可以指定一个后备 DNS 服务器，如果主服务器未能在下一节指定的超时期限内做出响应，DNS 请求将被重新路由到后备服务器。 有三个选项可供选择： 不要使用后备服务器；使用系统默认的服务器；使用自定义服务器。 "},{"title":"拦截 ECH​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#拦截-ech","content":"如果启用，AdGuard 将从响应中去除 Encrypted Client Hello 参数。 "},{"title":"自定义后备服务器的列表​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#自定义后备服务器的列表","content":"如果用户希望 AdGuard 使用自定义后备服务器，请在此部分列出它们，每行一个。 "},{"title":"自定义 bootstrap 地址的列表​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#自定义-bootstrap-地址的列表","content":"Bootstrap 是一个中间 DNS 服务器，用于获取用户在「DNS 保护」中选择的安全 DNS 服务器的 IP 地址。 当使用用字母表示服务器地址的协议（例如 DNS-over-TLS）时，需要这样的“中间立场”。 在这种情况下，bootstrap 充当翻译器，将字母转换为系统可以理解的数字。 默认情况下，使用系统 DNS 解析器，初始 bootstrap 请求通过端口53发出。 如果该方式不适合，请按从上到下的顺序列出将用于确定加密 DNS 服务器地址的 DNS 服务器的 IP 地址。 指定的 IP 地址将按列出的顺序应用。 如果用户指定的地址无效，或者没有指定地址，系统 IP 将被使用。 "},{"title":"DNS 排除项​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#dns-排除项","content":"所有对这里列出的域名的 DNS 请求将被重定向到系统默认的 DNS 服务器，而不是在应用程序设置中指定的 DNS 服务器。 此外，DNS 拦截规则将不会应用于此类请求。 "},{"title":"从 DNS 过滤中排除指定的 Wi-Fi 网络名称（SSID）​","type":1,"pageTitle":"高级（低级）设置指南","url":"adguard-for-windows/solving-problems/low-level-settings/#从-dns-过滤中排除指定的-wi-fi-网络名称ssid","content":"DNS 保护将不包括列在本节中的 Wi-Fi 网络。 每行指定一个 Wi-Fi 网络名称（SSID）。 如果一个特定的 Wi-Fi 网络已经被 AdGuard Home 或其他 DNS 保护系统保护，此功能很实用。 在这种情况下，再次过滤 DNS 请求是多余的。 "},{"title":"两步验证","type":0,"sectionRef":"#","url":"general/account/2fa/","content":"","keywords":""},{"title":"如何设置 2FA​","type":1,"pageTitle":"两步验证","url":"general/account/2fa/#如何设置-2fa","content":"登录 AdGuard 账号并转到「设置」选项卡：  向下滚动到「密码和两步验证」并单击「启用」：  按照屏幕上的指示，安装一个认证器应用程序，并扫描 QR 码：  重要信息 请您保存第二个备用密码。该密码是在您的手机丢失或被偷窃的情况下用于恢复您的账号的必要信息。 如果每个步骤都完成，下次登录个人账号时，将看到：  使用手机的认证软件扫码并输入验证码。 登录成功了！ 请注意：如果看到验证错误通知，请您查看手机上的时间设置。 如果需要，请更改时间设置。错误的时钟会导致验证错误。 "},{"title":"如何收集 Windows 系统日志","type":0,"sectionRef":"#","url":"adguard-for-windows/solving-problems/system-logs/","content":"如何收集 Windows 系统日志 信息 本文适用于 Windows 版的 AdGuard，它是一种多功能广告拦截器，可在系统级别保护用户的设备。 要了解其工作原理，请下载 AdGuard 应用程序。 注意 Data and/or files provided in system logs are processed in accordance with the AdGuard Privacy Policy. 要分析和诊断可能潜在的问题，AdGuard 支持服务可能需要 Windows 系统日志文件。 Windows 事件日志记录着所有已安装软件发生的错误，包括 AdGuard 在内。 下面我们简述获取日志文件的方式并在需要的时候反送给我们的支持服务。 按「Win + R」 在出现的窗口内键入 eventvwr 点击「确定」： 会出现如下图所示的事件查看器（Event Viewer）窗口。 要保存我们需要的文件，请执行以下操作： 打开「应用程序」：「事件查看器（本地）」→「Windows 日志」→「应用程序」。 右击「应用程序」，然后在下拉菜单内选择「将所有事件另存为...」。 选择名称和保存位置并点击「保存」。 选择「 显示以下语言的信息」。 用户需要选中「English」旁边的复选框。 单击「确定」。 打开「系统」：「事件查看器（本地）」→「Windows 日志」→「系统」。 右击「系统」，然后在下拉菜单内选择「将所有事件另存为...」。 选择目标文件夹，输入名称，点击「保存」。 选择「显示以下语言的信息」。 您需要选中「English」旁边的复选框。 单击「确定」。 请发送您最近保存的两个文件到 support@adguard.com。 注意 AdGuard is committed to protecting your privacy. We strictly follow our Privacy Policy and do not collect any private information about users. Before sending your logs to the support team, please review the file as it may contain additional information that you don’t want to share. If it contains such personal information, we recommend that you delete it first.","keywords":""},{"title":"AdGuard 账号的功能","type":0,"sectionRef":"#","url":"general/account/features/","content":"","keywords":""},{"title":"管理账号设置​","type":1,"pageTitle":"AdGuard 账号的功能","url":"general/account/features/#管理账号设置","content":"在 AdGuard 账号的「设置」部分，用户可更改或重置密码，更改电子邮件地址，开启双因素身份验证，查看 AdGuard 所存储的关于您的数据以及选择个人账号和通知的语言。 在此部分，用户也可管理电子邮件首选项： 接收交易电子邮件，接收 AdGuard 每月时事通讯，接收 AdGuard 特价和促销电子邮件,在 AdGuard 中打开电子邮件时发送通知。 "},{"title":"管理许可证​","type":1,"pageTitle":"AdGuard 账号的功能","url":"general/account/features/#管理许可证","content":"在「许可证」部分，用户可管理许可以及与之绑定的设备。 AdGuard 许可证： 绑定和取消绑定，续订，升级，取消。 您也可更新付款详细信息。 与 AdGuard 广告拦截程序许可证绑定的设备可取消绑定或重命名。 用户可点击紧邻未使用设备的十字叉以取消绑定它们。 "},{"title":"查看购买​","type":1,"pageTitle":"AdGuard 账号的功能","url":"general/account/features/#查看购买","content":"「购买历史」部分显示有用户曾经用注册 AdGuard 账号时的电子邮件地址购买的所有许可证。 用户也会找到购买日期，订单号，支付方式，购买费用的相关信息。 "},{"title":"联系支持​","type":1,"pageTitle":"AdGuard 账号的功能","url":"general/account/features/#联系支持","content":"支持标签包含有帮助用户解决问题，查找 AdGuard 产品相关问题答案的有用链接。 它们分为六个部分：常见问题解答，发送错误报告/功能请求，报告拦截错误，联系支持，知识库和讨论。 "},{"title":"注册方式","type":0,"sectionRef":"#","url":"general/account/register/","content":"","keywords":""},{"title":"什么是 AdGuard 账号​","type":1,"pageTitle":"注册方式","url":"general/account/register/#什么是-adguard-账号","content":"AdGuard 账号是一种可存储您的 AdGuard 许可证/订阅，活动的设备，购买历史，首选语言及其它首选项的用户账号。 许多 AdGuard 产品具有通过输入 AdGuard 账号凭证激活软件的选项，但前提是其须包含有效许可证。 "},{"title":"账号创建方式​","type":1,"pageTitle":"注册方式","url":"general/account/register/#账号创建方式","content":"要创建账号，请转到 AdGuard 官方网站并点击屏幕右上角的「我的账号」按钮。 输入您的电子邮件地址和所需密码，这将自动注册您的账号。 提示 如您在购买许可证时输入了电子邮件地址或作为礼物接收了与您电子邮件地址关联的许可证，则账号是自动创建的。 要设置密码，用户可打开交易或礼物邮件内的链接。 您也可按上述方式注册。 账号也可在 AdGuard 应用内直接创建。 点击「登录」或「激活」按钮（可在「许可证」部分或单独的界面上找到）并输入您的电子邮件地址和所需密码。 账号创建后，点击激活电子邮件内的链接以激活它。 "},{"title":"通过社交网络创建账号​","type":1,"pageTitle":"注册方式","url":"general/account/register/#通过社交网络创建账号","content":"要通过社交网络创建账号，请点击链接并登录账号即可。 注册后，请查看收件箱，您将会收到一封确认电子邮件。 设置密码即可！ 现在您可以使用 AdGuard 账号的所有功能。 "},{"title":"AdGuard 过滤器","type":0,"sectionRef":"#","url":"general/ad-filtering/adguard-filters/","content":"","keywords":""},{"title":"AdGuard 过滤器​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#adguard-过滤器","content":"基础过滤器删除英文内容网站的广告。 最初是基于 EasyList 并由我们修改。 查看规则 防跟踪保护过滤器 — 各种在线计数器和网络分析工具的综合列表。 用它来隐藏用户在网上的活动，避免跟踪。 查看规则 URL 跟踪过滤器从网址中移除跟踪参数加强隐私保护。 当用户选择在隐身模式下拦截跟踪参数时，此过滤器将自动启用。 查看规则 社交媒体过滤器此过滤器移除社交媒体小工具「点赞」和「分享」按钮及类似的元素。 查看规则 恼人广告过滤器屏蔽网页上的恼人元素。 View rules. Includes the following AdGuard filters (all of them can be enabled separately from the Annoyances filter): Cookie 通知在网页上拦截 Cookie 通知。 查看规则弹出窗口拦截各种对网站运行没有必要的弹窗。 查看规则移动拦截程序横幅广告阻止宣传网站移动应用的横幅。 查看规则小工具阻止第三方小工具：在线助手、实时客服支持聊天等 查看规则其他烦恼阻止不属于流行的烦恼类别的元素。 查看规则 解除搜索广告和自我推销过滤器解除可能对用户有用的广告。 在此页上了解更多关于此过滤器的信息。 查看规则 俄语过滤器删除俄语网站上的广告。 查看规则 德语过滤器删除德语网站上的广告。 最初是基于 EasyList Germany 过滤器，随后我们根据用户的反馈进行修改。 查看规则 法语过滤器删除法语网站上的广告。 最初是基于 Liste FR 过滤器，随后我们根据用户的反馈进行修改。 查看规则 日语过滤器删除日语网站上的广告。 最初是基于 Fanboy’s Japanese 过滤器，随后我们根据用户的反馈进行修改。 查看规则 荷兰语过滤器删除荷兰语网站上的广告。 最初是基于 EasyList Dutch 过滤器，随后我们根据用户的反馈进行修改。 查看规则 西班牙语/葡萄牙语过滤器删除西班牙语和葡萄牙语网站上的广告。 最初是基于 Fanboy’s Spanish/Portuguese 过滤器，随后我们根据用户的反馈进行修改。 查看规则 土耳其语过滤器删除土耳其语网站上的广告。 由我们根据用户的反馈创建。 查看规则 中文过滤器删除中文网站上的广告。 Originally based on the EasyList China filter and subsequently modified by us according to the complaints from users. 查看规则 Ukrainian filter removes ads from websites in Ukrainian. Learn more about this filter on this page. View rules 实验性过滤器，此过滤器设计用于在将某些有风险的过滤规则添加到基本过滤器之前对其进行测试。 如果这些规则执行没有任何问题，它们会被添加到主过滤器中。 查看规则 移动广告过滤器拦截移动设备上的广告。 包含所有已知的移动广告网络。 查看规则 DNS 过滤器 — 此过滤器由其他几个过滤器 (AdGuard 基础过滤器、社交媒体过滤器、防跟踪保护过滤器、移动广告过滤器、EasyList 和 EasyPrivacy) 组成，并经过简化，以便更好地与 DNS 级别的广告拦截兼容。 AdGuard DNS 服务器使用此过滤器来拦截广告和跟踪器。 查看规则 "},{"title":"AdGuard 过滤器政策​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#adguard-过滤器政策","content":"我们的过滤器政策定义在过滤器中添加和删除的规则，以及 AdGuard 过滤器应该拦截和不应该拦截的内容的规则。 阅读全文 AdGuard 过滤政策了解详细信息。 "},{"title":"为 AdGuard 过滤器做贡献​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#为-adguard-过滤器做贡献","content":"我们非常幸运的是，拥有一个不仅热爱 AdGuard，还能回馈社会的社区。 很多人以各种方式做志愿者，让其他用户使用 AdGuard 的体验更好。 您也可以加入他们的行列。 我们也乐于奖励最活跃的社区成员。 那么，您能做什么呢？ "},{"title":"报告问题​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#报告问题","content":"我们依靠社区让我们知道过滤器的问题。 这样我们才能最有效地利用我们的时间，并保持过滤器的不断更新。 要提交报告，请使用网络报告工具。 "},{"title":"建议过滤规则​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#建议过滤规则","content":"您会在 GitHub 过滤器仓库中发现大量未解决的问题。 每个问题都涉及到某个网站的问题 — 遗漏的广告、误报等。 请选择其中一个问题并在评论中提供您自己的规则。 AdGuard 过滤器工程师将审查您的建议，如果证明是正确的，您的规则将被添加到 AdGuard 过滤器中。 这里是 AdGuard 过滤规则语法的官方文档。 在您创建自己的过滤规则之前，请您阅读它。 "},{"title":"其他贡献方式​","type":1,"pageTitle":"AdGuard 过滤器","url":"general/ad-filtering/adguard-filters/#其他贡献方式","content":"我们有专门的页面您可以在其中详细了解如何参与 AdGuard 开发。 "},{"title":"AdGuard 过滤策略","type":0,"sectionRef":"#","url":"general/ad-filtering/filter-policy/","content":"","keywords":""},{"title":"通用标准​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#通用标准","content":"这些标准适用于所有过滤器的规则。 在有足够流量的情况下，我们才会添加用于相应网站的规则。 流量由公开统计数据（如有的话）或间接统计工具（如社交网络上的用户数量）判断。 在一个网站的流量达到每月 100,000 次访问时，流量算是充足的。 我们也会考虑为不太受欢迎的网站添加一条规则，但最终决定权在过滤器开发人员手中。 流量较低的网站仍应被检查第三方分析和广告网络的情况如何。对于“内容农场”（制作大量内容的网站，其主要目的是在搜索结果中获得较高的可见度并产生广告收入），过滤器开发人员会根据内容的质量做出决定。 过滤规则的质量要求： 规则不应该对网站性能带来负面影响。解锁规则必须尽可能具体，以避免解锁不必要的内容。JavaScript 规则应尽量少用，只有在不使用 JavaScript 规则就无法屏蔽广告的情况下才使用。 "},{"title":"广告拦截过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#广告拦截过滤器","content":""},{"title":"专用名词​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#专用名词","content":"广告拦截程序（或者，广告拦截器）是一种软件或硬件工具，用于过滤、隐藏或拦截网页上的广告和其他元素。 创建广告拦截程序的目的是，改善用户体验、缩短页面加载时间、减少互联网流量消耗、屏蔽广告、提升浏览网站和使用应用程序时的隐私性，以及拦截恼人的元素。 过滤器（或者，过滤器列表）是一套过滤规则，旨在使用广告拦截程序过滤内容和拦截各种类型的广告和其他内容。 这些过滤器通常在浏览器、程序或 DNS 服务器级别上运行。 Anti-adblock（中文：反广告拦截）是网站或应用程序使用的一种技术，旨在检测广告拦截并以不同方式对其做出反应：跟踪、重新注入广告、鼓励禁用广告拦截器（即所谓的“广告拦截墙”（英文：Adblock walls））。 反广告拦截有多种类型 不提供其他选择的 Anti-adblock：要继续使用网站，用户必须禁用网站上的广告拦截程序。提供替代选项的 “Anti-adblock wall”，例如购买订阅以继续使用广告拦截程序。非强制的信息提示：要求用户禁用广告拦截器，但这些信息可以直接关闭，然后继续允许用户不受限制地继续浏览网站。针对广告拦截器的使用实施替代广告：网站在检测到广告拦截器时引入替代广告。收费墙：一种内容货币化方法，对用户部分或完全隐藏内容，并通过信息提示用户购买订阅以获取访问权。 "},{"title":"过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器","content":"AdGuard 广告拦截的过滤器包含以下过滤器： AdGuard 基础过滤器AdGuard 移动广告过滤器按语言原则划分的地区过滤器，包括中文、荷兰语、法语、德语、日语、俄语、西班牙语/葡萄牙语、土耳其语和乌克兰语 "},{"title":"过滤器的用途​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器的用途","content":"基础过滤器旨在拦截英语网站和没有单独过滤器的网站上的广告。 它还包含适用于所有网站（无论网站的语言）的一般过滤规则。移动广告过滤器拦截移动版网站和移动应用程序中的广告。 没有基于语言的细分。地区过滤器遵循与基础过滤器相同的政策，但仅限于特定语言的网站。 广告拦截过滤器的主要目标在于拦截网站、应用程序和某些可以从互联网上加载广告的设备上的所有类型广告。广告类型如下： 横幅。以图像形式显示在网页各部分的广告。前导广告。文字或图形广告，通常是动画广告，旨在引起访问者的兴趣（“标题党”、吸睛图片）以此增加点击率。文字广告。文字形式的广告，包括链接。模式广告。以模式窗口的形式突然出现在当前内容之上的广告。弹出式广告。点击页面上任何位置时，广告都会在当前窗口下的单独窗口中打开。重定向广告。用户点击后自动重定向到其他网站的机制。伪装成网站内容的广告，点击后会打开含有促销产品或无关内容的页面。视频广告。网站和应用程序的视频内容或独立广告元素中嵌入的广告视频。互动广告。用户可与之互动的广告（如游戏和调查，完成后会打开广告项目）。插播广告。移动设备上覆盖应用程序或网络浏览器界面的全屏广告。占据较大空间或在背景中格外显眼并吸引访问者注意力的残留广告（几乎无法辨别或难以察觉的广告除外）。Anti-adblock 广告。当主要广告被屏蔽时，网站上显示的替代广告。Bait elements that are used by multiple known adblock detection scripts to detect an ad blocker presence for different goals including changing the way ads are shown, fingerprinting, etc.网站自身的广告，如果它已被一般过滤规则屏蔽（请参阅限制及例外）。阻止网站使用的反屏蔽脚本（请参阅限制及例外）。恶意软件注入的广告，如果提供了有关其加载方法或复制步骤的详细信息。不必要的“挖矿”。未经用户同意挖掘加密货币的脚本 "},{"title":"限制及例外​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#限制及例外","content":"不应故意屏蔽网站自身的广告。 但是，如果屏蔽是由一般过滤规则造成的，则不应解除屏蔽。不屏蔽收费墙等内容访问措施。在以下情况下，Anti-adblock walls 将被屏蔽： 强烈要求禁用或删除广告拦截器，或有效阻止使用网站。对使用广告拦截器可能造成的后果作出错误和误导性的描述。使访问者面临恶意广告的风险，如果未阻止的广告来自可疑来源。 如果广告拦截程序检测到的信息至少满足以下条件之一，我们将不予拦截： 监测到的信息允许不干扰网站使用体验，不会覆盖大量页面内容。监测到的信息提供禁用广告拦截器的替代方案，但这种替代方案不会危及用户的隐私或安全。监测到的信息允许用户继续浏览网站内容，或提供可行的价值交换，不会危及用户的隐私或安全。某些传统规则可能会继续拦截符合上述一个或多个标准的信息。 如果发现此类规则，将依照政策进行处理。 如果网络矿池是公开的，且不完全用于恶意目的，则不会被封锁。 "},{"title":"跟踪保护过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#跟踪保护过滤器","content":""},{"title":"专用名词​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#专用名词-1","content":"跟踪：出于营销目的，对用户及其与网站和应用程序的互动情况进行监控和收集数据的过程，以及为分析网站或应用程序的运行情况而获取遥测数据的过程。 这一过程包括跟踪访问的页面、花费的时间、与网站元素的互动（如点击、提交表单）以及其他指标。 网站和应用程序所有者可以通过它更好地了解用户行为、优化功能和调整营销策略。 跟踪还可用于监控性能、使用模式和发现问题，为开发人员提供必要的数据，以提高网站或应用程序的稳定性和质量。 即使获得的数据无法识别个人身份，此类行为仍被视为跟踪。 跟踪器：用于网站或应用程序的软件，旨在收集有关其运行和访客操作的信息。 它跟踪用户与网站或应用程序的互动，记录有关页面浏览、花费时间、点击、表单提交和其他事件的数据。 其目的是为网站和应用程序所有者提供分析用户行为、改善用户体验以及优化内容和广告的工具。 URL 跟踪参数：是地址的一部分，由分析系统添加到链接中，或存在于网页的某些链接中。 当发出请求时，分析系统或网站的后台会对 URL 跟踪参数进行处理，并从中提取信息。 例如，URL 跟踪参数可以传输有关点击或广告活动的信息。 诈骗保护或僵尸网络检测系统也可以使用 URL 跟踪参数。 Cookies：是指网站发送并存储在设备上的文件。 这些文件包含各种信息，既是网站在设备上运行所必需的，也是用于分析目的的，用于跟踪网站访客活动的唯一标识符、广告参数等。 "},{"title":"过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器-1","content":"AdGuard 跟踪保护过滤器包含以下过滤器： AdGuard 防跟踪保护过滤器AdGuard URL 跟踪过滤器 "},{"title":"过滤器的用途​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器的用途-1","content":"AdGuard 防跟踪保护过滤器用于屏蔽收集用户个人数据的跟踪器，并改善用户使用体验。 屏蔽的内容： 分析系统脚本网站和应用程序自身的跟踪脚本屏蔽的 CNAME 跟踪器跟踪 Cookie跟踪像素浏览器的跟踪 APIDetection of the ad blocker for tracking purposesGoogle 浏览器的隐私沙盒功能及其用于跟踪的分叉（Google Topics API、受保护受众 API） URL 跟踪过滤器旨在移除网址中的跟踪参数。 "},{"title":"限制及例外​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#限制及例外-1","content":"如果跟踪保护过滤器的阻止会影响网站的正常运行，则不应阻止跟踪器： Anti-bot 机器人和欺诈保护（如果会影响网站使用）。 例如，使用 PerimeterX 或 hCaptcha 时，当网站试图通过验证码验证访客时，阻止会导致问题。不屏蔽 Sentry 或 Bugsnag 等错误跟踪系统。 "},{"title":"恼人元素过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#恼人元素过滤器","content":"恼人元素过滤器的设计目的是通过阻止页面上任何会分散和干扰用户在使用网站时注意力的元素（如各种模式窗口和交互式表单、Cookie 同意通知和请求、移动应用程序横幅以及各种小工具）来提高网站的可用性。 "},{"title":"专用名词​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#专用名词-2","content":"Cookie 通知是一种说明网站 Cookie 类型和使用情况的表格。 Cookie 通知会在用户访问网站时自动出现，告知用户网站使用 Cookie 或其他跟踪技术来收集和使用个人信息，并解释收集信息的原因和共享对象。 CMP（同意管理平台）是帮助网站遵守 Cookie 使用规则的软件。 CMP 在获得用户同意之前限制 Cookie 的使用，为用户提供接受某些 Cookie 和管理隐私设置的选项。 小工具是一种扩展网站功能的用户界面元素。 网页小工具集成在网页中，可包括按钮、表单或横幅等交互式元素。 它们可让用户访问特定服务或内容，而无需导航到其他页面。 弹出窗口是指出现在当前网页上方的窗口。 其目的是显示附加信息、广告、通知或数据输入表单。 弹出窗口通常会阻挡页面主要内容的浏览，并要求用户采取行动才能关闭，这可能会令人恼火。 "},{"title":"过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器-2","content":"为了更好地定制，烦扰过滤器按其用途进行了划分： AdGuard Cookie 通知过滤器AdGuard 弹窗过滤器AdGuard 移动拦截程序横幅广告的过滤器AdGuard 小工具过滤器AdGuard 其他恼人广告过滤器广告过滤器包含 5 种专门烦扰过滤器的组合过滤器 "},{"title":"过滤器的用途​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器的用途-2","content":"AdGuard Cookie 通知过滤器​ 该过滤器旨在阻止 Cookie 通知和来自 Cookie 管理平台（CMP）的请求。 可对 Cookie 通知和 CMP 采用多种方法。 在大多数情况下，只需隐藏或阻止相应的脚本即可。 不过，当网站的功能和第三方内容的显示需要 Cookie 同意时，就会使用以下方法： 使用 Scriptlets（小脚本）绕过同意请求（实际上不适用于在作出决定之前限制加载第三方内容的网站）。在网站本地存储中设置 Cookie 或密钥，使脚本认为用户已做出选择。使用点击指定按钮并在加载 10 秒后中断执行的规则模拟用户操作。 有两个选项可供选择： 拒绝（功能 Cookie 除外，取决于 CMP 系统）。首选项，因为加载附加分析工具的可能性较小。接受：如果其他方法无效。 在这种情况下，会额外检查网站是否使用了分析工具，然后由 AdGuard 跟踪保护过滤器进行阻止。 限制及例外 在某些情况下，添加规则的决定是由过滤器开发人员独立做出的。大多数情况下，在模拟操作时做出的选择会影响网站的功能（例如，历史记录可能不起作用，或者在这样的网站上用户设置可能不会被保存）。 AdGuard 弹窗过滤器​ 该过滤器可阻止正常使用网站时不需要的各种网页弹出窗口，包括但不限于： 请求允许接收推送通知订阅新闻、促销和各种活动的弹出窗口和表格，包括接收这些信息的第三方渠道（如 Google 新闻、Telegram 等）鼓励用户禁用广告拦截器和侵犯用户隐私的弹出窗口（由过滤器开发人员决定）其他可能使用户厌烦的弹出窗口（由过滤器开发人员决定） 限制及例外 推送通知只会在不用于实际目的的网站上被阻止。 例如，在用于工作目的的电子邮件网络客户端或工具中，此类通知不会被阻止。一些不属于上述类别但仍会干扰用户体验的弹出窗口也会被阻止。 例如，网站上的注册提示或介绍网站功能的弹出窗口。 由过滤器开发人员决定。不得规避要求用户付费才能访问内容的内容访问措施。 AdGuard 移动拦截程序横幅广告的过滤器​ 该过滤器可阻止鼓励访客安装移动应用程序的横幅广告和弹出窗口。 限制及例外 位于网站页眉或菜单中的横幅广告，如果没有动画效果，也没有占据很大的可用空间，则不会被屏蔽。 如果横幅位于页脚，则由过滤器开发人员根据具体情况决定。 通常情况下，页脚中的横幅不会在其他元素中脱颖而出，也不会分散注意力。 AdGuard 小工具过滤器​ 这是一个过滤器，可以屏蔽对网站运行或与网站互动不重要的各种小工具： 内容推荐小工具：相关文章、类似网站、各种个性化推荐未与内容整合且不是页面主要内容的聊天小工具营销小工具 用于与助理或机器人交流的聊天工具向用户推荐产品的小工具回电表单 其他没有单独类别但可能会在视觉上扰乱页面的小工具。 例如，天气小工具、货币汇率、职位列表和捐款等。 限制及例外 此过滤无法阻止： 与页面内容密切相关的小工具，如评论区、即时聊天流，但非官方聊天流网站上的非主持聊天除外，因为这些聊天通常充斥着垃圾邮件和类似内容。用于自我宣传和网站特定宣传活动的小工具。捐款小工具，除非这些小工具占据了页面的很大一部分，并在内容中非常显眼。 是否屏蔽由过滤器开发人员决定。 AdGuard 其他恼人广告过滤器​ 该滤镜旨在屏蔽其他滤镜不包含的恼人元素，并进行各种调整。 其目的是： 阻止网站的自我宣传（任何类型的广告，宣传网站所有者拥有的未从第三方获得商业补偿的商品或服务），如果被认为是一个恼人元素。屏蔽不属于其他类别的烦人元素。如果页面上的操作（如打开右键菜单、选择和复制文本）被阻止，则取消阻止这些操作。在从网站加载文件时，如果检查不受服务器控制或不受阻，则加快倒计时器的速度。应用对过滤器开发人员有用的各种规则。 例如，阻止网络调试器检测。 限制及例外 该过滤器可能包含不适合所有用户的规则。 在这种情况下，建议禁用此过滤器。 向该过滤器添加规则的决定由过滤器开发人员逐条做出。 "},{"title":"社交媒体过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#社交媒体过滤器","content":""},{"title":"过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器-3","content":"AdGuard 社交媒体过滤器包含： AdGuard 社交媒体过滤器 "},{"title":"过滤器的用途​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器的用途-3","content":"该过滤器将阻止第三方网站上的社交媒体小工具，如「赞」和「分享」按钮、群组小工具、推荐和类似小工具。 "},{"title":"限制及例外​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#限制及例外-2","content":"作为网站功能或内容一部分的小工具（如评论、嵌入式帖子、投票以及社交媒体登录小工具）不会被阻止。 指向网站社交媒体页面的链接也不会被阻止。 "},{"title":"其他过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#其他过滤器","content":"该组包含的过滤器对屏蔽广告并不重要。 "},{"title":"专用名词​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#专用名词-3","content":"背景广告是一种互联网广告，根据互联网页面的内容、所选受众、位置、时间或其他情境显示广告。 搜索广告是上下文广告的一个子类，根据访问者的搜索查询显示广告。 网站自我宣传是指网站横幅宣传网站所有者拥有的商品和服务，网站所有者不从第三方收取报酬。 有关这些类型广告的更多详情，请参阅搜索广告。 "},{"title":"过滤器​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器-4","content":"解除搜索广告和自我推销过滤器AdGuard DNS 过滤器AdGuard 实验性过滤器 "},{"title":"过滤器的用途​","type":1,"pageTitle":"AdGuard 过滤策略","url":"general/ad-filtering/filter-policy/#过滤器的用途-4","content":"解除搜索广告和自我推销过滤器​ 此过滤器可解除屏蔽： 使用搜索引擎（例如 Google、Bing、Yandex、DuckDuckGo）时在搜索结果中显示内容相关广告网站的自我宣传 限制及例外 搜索广告只有在与用户的搜索查询相对应的情况下才会解除屏蔽，因为它与上下文相关。 否则，广告仍会被屏蔽。自我宣传只有在符合过滤策略的情况下才会被解封。 过滤器开发人员可能会拒绝解封请求。任何其他广告都不会被解封。 AdGuard DNS 过滤器​ 此过滤器用于 AdGuard DNS。 它不能替代广告拦截过滤器。 限制及例外 跟广告拦截过滤器一样。 AdGuard 实验性过滤器​ 该过滤器用于测试和调试可能会破坏网站功能的规则。 规则由过滤器开发人员在需要测试特定解决方案时添加。 由于该过滤器是为调试目的而设计的，因此其局限性很小。 限制及例外 规则不得破坏网站功能。则不得阻止广告或以其他方式违反政策。 "},{"title":"Search ads and self-promotion","type":0,"sectionRef":"#","url":"general/ad-filtering/search-ads/","content":"","keywords":""},{"title":"Search ads​","type":1,"pageTitle":"Search ads and self-promotion","url":"general/ad-filtering/search-ads/#search-ads","content":"Search ads are ads that you see among search query results when using online search engines, such as Google, Bing, DuckDuckGo, etc.  These ads are always contextual: they are targeted to match the keywords you used in the query. This helps you find exactly what you are searching for. Moreover, search ads (because they go through manual moderation) are often more relevant and helpful than the rest of the search results. Another argument in defense of search ads is that they are much less intrusive than many other ad formats. "},{"title":"What is websites' self-promotion?​","type":1,"pageTitle":"Search ads and self-promotion","url":"general/ad-filtering/search-ads/#what-is-websites-self-promotion","content":"In principle, when an ad on a website promotes this particular website or closely related websites, social media, and so on, such an ad is considered a self-promoting one.  Our general stance here is very similar to the EasyList policy regarding self-promotion ads. According to our filter policy, we should not block these ads; however, we should not make an exception if such an ad gets blocked by some rule 'alongside' a regular ad. Partly, this is due to ethical reasons, but mostly because such ads are rarely too intrusive and are often useful for the visitor of the website (who is supposedly interested in this website's content). By enabling 'Search ads and self-promotion', AdGuard users can unblock some of these self-promotion ads. "},{"title":"What ads are on the list?​","type":1,"pageTitle":"Search ads and self-promotion","url":"general/ad-filtering/search-ads/#what-ads-are-on-the-list","content":"When you enable 'Search ads and self-promotion', search ads from the following search engines are shown: GoogleYahooBingAskYandexDuckDuckGoStartPage As well as all self-promotional ads that satisfy our filter policy. "},{"title":"Summary​","type":1,"pageTitle":"Search ads and self-promotion","url":"general/ad-filtering/search-ads/#summary","content":"Allowing 'Search ads and self-promotion' is a 100% optional feature that may be helpful in some cases. If you don't like it, you can turn it off at any time. It does not, and never will, include any ad types or individual ads that do not fall into one of the two categories described above. "},{"title":"Tracking filter rules statistics","type":0,"sectionRef":"#","url":"general/ad-filtering/tracking-filter-statistics/","content":"","keywords":""},{"title":"Why do we need ad filters?​","type":1,"pageTitle":"Tracking filter rules statistics","url":"general/ad-filtering/tracking-filter-statistics/#why-do-we-need-ad-filters","content":"Let's start by defining what ad filters are. Thanks to these filters, AdGuard removes ads from websites. They are manually compiled based on your complaints about ads on websites. Ad filters are an essential element of AdGuard — their quality determines the overall quality of AdGuard ad blocking. However, there is a downside. Over the years, more and more ad filters have been appearing. And the more ad filters are there, the more memory AdGuard consumes, thus slowing down the rendering of web pages. At the same time, some of the filters start to expire, gradually becoming a dead weight that has no use, only consumes memory, and slows down the program. "},{"title":"Why do we need statistics?​","type":1,"pageTitle":"Tracking filter rules statistics","url":"general/ad-filtering/tracking-filter-statistics/#why-do-we-need-statistics","content":"We want to solve the problem of outdated filtering rules once and for all. But we need your help to do so. By gathering statistics on used filtering rules, we detect and remove the rules that are no longer used. As a result, it will help all those who use AdGuard. If your computer is powerful enough, it won’t really affect you. But the difference will be very noticeable for users of low-power netbooks or tablets. "},{"title":"What kind of statistics will be sent?​","type":1,"pageTitle":"Tracking filter rules statistics","url":"general/ad-filtering/tracking-filter-statistics/#what-kind-of-statistics-will-be-sent","content":"If you enable the Send statistics for ad filters usage option, the following information is sent periodically: Extension versionBrowser type (Chrome/Firefox/Opera/Yandex.Browser/Safari).List of enabled ad filters.The list that consists of the following elements: The domain name of the websiteThe number of recent page viewsThe list of filtering rules and Filter ID which were activated on this websiteThe domain name of blocked requests is sent for URL rules The list is created based on the website's visit statistics since the last time statistical data was sent. The collected statistics will be sent periodically to our server for analysis and filter optimization. It's important to note that all the statistics we get are averaged and anonymized. We don't use these statistics for any purpose other than optimizing the filters, and we do not sell this data to third parties. You can read about it in our Privacy policy. "},{"title":"What does tracking filter rules statistics fraught with?​","type":1,"pageTitle":"Tracking filter rules statistics","url":"general/ad-filtering/tracking-filter-statistics/#what-does-tracking-filter-rules-statistics-fraught-with","content":"For the vast majority of users, the change in computer speed will not be really noticeable. However, netbook and tablet users may notice a slight slowdown. Periodically, we will send the gathered statistics to the server. The size of the transmitted data is not very large and is comparable to the size of an average web page. "},{"title":"钓鱼和恶意保护","type":0,"sectionRef":"#","url":"general/browsing-security/","content":"","keywords":""},{"title":"How does AdGuard check websites?​​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#how-does-adguard-check-websites","content":"Each time you visit a website, your local client exchanges information with our backend server in the form of hashes and hash prefixes. Based on this exchange, the local client determines whether or not the website is listed in the potentially dangerous websites database. There is a difference in the scope of this check for apps and extensions. "},{"title":"In apps​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#in-apps","content":"AdGuard provides the best possible protection by inspecting both the pages and all objects loaded on them. AdGuard checks URLs and domain names using hash prefixes, not the full URLs, so our servers retain no information about the websites you visit and your personal information is completely safe. Our servers respond to the app’s query with a list of all possible addresses that match the hash prefix. When a potential threat is detected based on hash matches, access to that website is immediately blocked.  "},{"title":"In browser extensions​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#in-browser-extensions","content":"Our browser extensions can only check domain names, not full URLs. They are also unable to check subqueries. This means that if there are potentially malicious elements on the page, they will be loaded even if the page itself is from a safe domain. The extension won’t be able to protect against them. It's also important to note that the check performed is asynchronous, i.e. it happens at the same time as the page is loaded, so it’s possible that malware could be loaded as well. "},{"title":"Setting up phishing and malware protection in AdGuard products​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#setting-up-phishing-and-malware-protection-in-adguard-products","content":"For Windows: Activate the Browsing Security module in the Settings menu  For Mac: Enable the Security module in Preferences  For Android: Turn on Browsing Security in the Protection tab  For iOS: Although there’s no separate module, you can go to Safari protection → Filters → Security and enable the available filters. Additionally, enable DNS protection and select one of the AdGuard DNS servers  For Browser extensions: Enable Phishing and malware protection in the Settings tab. For enhanced protection, go to Filters → Security and activate available filters  For Private AdGuard DNS: Enable malware protection in Server settings under Security  "},{"title":"What we block​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#what-we-block","content":"We maintain two primary filters: one that protects against phishing and fraudulent websites that attempt to steal user credentials, and another that blocks access to websites known to distribute malware, which could lead to data loss, information leaks, or damage to your device. These filters also protect you from websites with various scams and fraudulent schemes. For more detailed information, refer to this Wikipedia article. "},{"title":"Maintaining our filters​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#maintaining-our-filters","content":"AdGuard maintains an extensive database of phishing and malware websites, and it’s updated regularly and automatically as new threats are discovered. We collect information from a variety of reliable, high-quality sources, both public and from other companies, and aggregate it into a common database of dangerous sites. We automatically analyze complaints about suspicious sites and spend a great deal of time keeping the database up-to-date, cleaning up false positives, and implementing mechanisms to prevent them in the future. "},{"title":"Want to help?​​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#want-to-help","content":"Any help is welcome! If you encounter a phishing or malware website, please report it to support@adguard.com. "},{"title":"False-positive responses​​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#false-positive-responses","content":"Occasionally, some non-malicious websites are added to AdGuard’s filters. We do our best to reduce the percentage of false positives, but they still occur. If you encounter this behavior from AdGuard, please report the false positive to our technical support at support@adguard.com. "},{"title":"If you are suspicious about a website​","type":1,"pageTitle":"钓鱼和恶意保护","url":"general/browsing-security/#if-you-are-suspicious-about-a-website","content":"If you suspect that a certain website might be dangerous, check it first by using our security check tool.  "},{"title":"How ad blocking works","type":0,"sectionRef":"#","url":"general/ad-filtering/how-ad-blocking-works/","content":"","keywords":""},{"title":"General principle​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#general-principle","content":"Filter lists, also called filters, lie at the core of any ad blocker. Filters are literally lists of rules written in a special syntax. Ad blockers can understand this complex syntax. They interpret filtering rules and perform actions on web traffic based on what the rules tell them to do: block specific elements, alter web pages in certain ways, etc.  "},{"title":"Filter lists​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#filter-lists","content":"To better understand ad blocking, it's important to know the underlying principles of how filters work. Filtering rules that make up filters are not created automatically. They are developed by filter maintainers, including professionals and volunteers, who use browser developer consoles and other tools (such as the AdGuard's filtering log) to determine which rules will block a particular ad or tracker. This description of the process is very simplistic — some ads are particularly hard to block and require multiple rules, multiple iterations, and the use of complex syntax. And even when a rule finally gets added to a filter, it doesn't mean that it stays there forever. Ads change, ways to serve the same ads on the same websites change, and the filter rules have to change, too. Sometimes rules become obsolete, a new ad appears, or a new filtering rule is needed to block the same ad. Filters are often maintained by one person, but even for a team of maintainers, it's impossible to constantly monitor the entire web. That's why many ad blockers have tools to help users easily report any filter-related issues they encounter.  AdGuard users have access to a special web reporting tool. Thanks to user complaints, filter developers can focus on correcting their filter lists and not on scouring the Internet for new and old unblocked ads. Filters can do more than just block ads. There are filters that block tracking, social media widgets, and annoyances such as cookie notices. Different users may choose different combinations of filters to match their personal preferences. There are websites like filterlists.com that are dedicated to filter lists and have huge databases. We develop and maintain our own set of filter lists that can be used with AdGuard or other ad blockers. "},{"title":"Types of filtering rules​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#types-of-filtering-rules","content":"There are many types of filtering rules that serve different purposes. Depending on the ad blocker you use, and especially on your OS, some types of rules may not be supported. "},{"title":"Basic filtering rules​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#basic-filtering-rules","content":"To be displayed on a web page or in an app, the ad has to be loaded from a server first. To do so, the browser or the app needs to send a web request. The most basic way of preventing an ad from appearing on your screen is to block this request so it never reaches the server, and thus there's no reply. Basically, all AdGuard Ad Blocker products can block web requests according to the active filter rules. This method is very effective at stopping the ad, but it has some drawbacks. The most obvious one is: whatever place an ad was taking up will be left empty or occupied by an ad leftover. "},{"title":"Cosmetic filtering rules​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#cosmetic-filtering-rules","content":"Every web page has a Document Object Model (DOM), an HTML document containing the structure and elements of this page. As ads are also page elements, they get recorded in the DOM. Ad blockers can remove parts of the DOM, while filtering rules help them understand which parts are ads and should be removed, and which parts should be left intact. This method allows you to avoid above-mentioned blank spaces and ad leftovers, as well as perform other more complicated tasks. "},{"title":"HTML filtering rules​","type":1,"pageTitle":"How ad blocking works","url":"general/ad-filtering/how-ad-blocking-works/#html-filtering-rules","content":"In most cases, it's enough to use the above-mentioned basic and cosmetic rules to filter ads. But when it is necessary to change the HTML code of the page itself before it is loaded, you need filtering rules for HTML content. These rules allow you to specify the HTML elements to be cut out before the browser even loads the page. These rules are quite complicated and require the ad blocker to be granted certain access rights, so not all platforms support them. Currently, these rules work only in the AdGuard Firefox add-on and in the AdGuard apps for Windows, Mac, and Android. 信息 There are other types of filtering rules, but they require more advanced technical knowledge to understand how they work. If you are interested, check out our comprehensive guide on filtering rules in the linked article. "},{"title":"如何安装 AdGuard","type":0,"sectionRef":"#","url":"general/how-to-install/","content":"如何安装 AdGuard 根据您想安装的 AdGuard 应用程序或浏览器扩展，请按照以下不同的链接找到相关文章： AdGuard Android版 AdGuard iOS版 AdGuard Windows版 AdGuard Mac版 AdGuard 浏览器扩展 AdGuard Safari版 AdGuard 内容拦截器","keywords":""},{"title":"Known issues","type":0,"sectionRef":"#","url":"general/https-filtering/known-issues/","content":"","keywords":""},{"title":"Known issues​","type":1,"pageTitle":"Known issues","url":"general/https-filtering/known-issues/#known-issues","content":"HTTPS filtering in AdGuard has its drawbacks. Almost all of them are scheduled to be eliminated in the next few AdGuard versions. All the issues known to us and the ETAs on their fixes are listed below. "},{"title":"Inspecting the original certificate​","type":1,"pageTitle":"Known issues","url":"general/https-filtering/known-issues/#inspecting-the-original-certificate","content":"The most important drawback of the HTTPS filtering mechanism is that it hides the real certificate of a website. You cannot simply check its original certificate because you can only see the one issued by AdGuard. This problem is solved in Browser Assistant. This browser extension helps you manage filtering directly from the browser and allows you to inspect the original certificate of any website. "},{"title":"Certificate Transparency​","type":1,"pageTitle":"Known issues","url":"general/https-filtering/known-issues/#certificate-transparency","content":"Thanks to modern cryptography, browsers can usually detect malicious websites that are provisioned with forged or fake SSL certificates. However, current cryptographic mechanisms aren’t so good at detecting malicious websites if they’re provisioned with mistakenly issued certificates or certificates that have been issued by a certificate authority (CA) that’s been compromised or gone rogue. Certificate Transparency aims to remedy these certificate-based threats by making the issuance and existence of SSL certificates open to scrutiny by domain owners, CAs, and domain users. AdGuard products which use CoreLibs starting with version 1.11 will implement a policy based on Chrome Certificate Transparency Policy. "},{"title":"Have remarks or suggestions?​","type":1,"pageTitle":"Known issues","url":"general/https-filtering/known-issues/#have-remarks-or-suggestions","content":"If you’d like to add something, report any errors, or ask a question, please contact us at: devteam@adguard.com. "},{"title":"Local.adguard.org 域名","type":0,"sectionRef":"#","url":"general/https-filtering/local-adguard-com-domain/","content":"","keywords":""},{"title":"技术说明​","type":1,"pageTitle":"Local.adguard.org 域名","url":"general/https-filtering/local-adguard-com-domain/#技术说明","content":"但是，这是怎么回事，为什么要这样做？ 请阅读以下技术说明。 AdGuard is a network-level content blocker so it cannot simply add custom JavaScript and CSS to webpages like what browser extensions do. 但是，这样做对于高质量的内容拦截至关重要。为了做到这一点，AdGuard 注入了一个“内容脚本”：&lt;script src=&quot;https://local.adguard.org/.../content-script.js&quot;&gt;。 这个“内容脚本”会处理修饰符过滤，隐藏或删除网页中的广告内容。AdGuard 在网络级别拦截 local.adguard.org 域名地址的连接并在本地进行处理。 这就是为什么该域名具有多年不变的“静态” IP 地址。 为什么我们需要使用真实的 IP 地址呢？ 我们不能使用 127.0.0.1，因为浏览器不接受它。可以使用私有子网中的一些 IP 地址，但是该解决方案具有两个弊端。 首先，很有可能与现有的内部网络服务冲突并破坏对其的访问。其次，一些 DNS 服务器可能会认为这是 DNS 重新绑定的攻击，并拒绝回应 local.adguard.org。 "},{"title":"验证​","type":1,"pageTitle":"Local.adguard.org 域名","url":"general/https-filtering/local-adguard-com-domain/#验证","content":"这很容易验证。 如果您禁用 AdGuard，您会发现根本无法建立到 local.adguard.org 的连接，因为没有具有该地址的服务器。 只需在 AdGuard 被禁用时尝试在浏览器中打开它。 "},{"title":"What is HTTPS filtering","type":0,"sectionRef":"#","url":"general/https-filtering/what-is-https-filtering/","content":"","keywords":""},{"title":"What is HTTPS?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#what-is-https","content":"HTTPS (HyperText Transfer Protocol Secure) is an extension of the HTTP protocol that supports encryption to increase security. This protocol is used to securely transmit valuable information like personal data, credit card details, etc. Using HTTPS is highly advantageous because encrypted traffic is protected against eavesdropping by a third party, and we can only welcome this. HTTPS acceptance has been growing in recent years, mainly because it is encouraged by Google and also due to the emergence of a free certificate authority Let’s Encrypt. The diagram below describes the difference between plain HTTP protocol and secure HTTPS protocol.  "},{"title":"What is a security certificate?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#what-is-a-security-certificate","content":"Simply put, HTTPS means data encryption. But there’s still a problem: how can you be sure that you’ve established an encrypted connection with the right website? That’s where security certificates come into play. A certificate serves as proof that the website is really what it tells you it is. If a website doesn’t have such a certificate, or if the certificate contains incorrect information, the browser will not allow you to establish a secure connection. It is important that the certificate a website uses is issued by a certificate authority (CA) trusted by your browser. Such a CA guarantees that the SSL certificate is, indeed, issued to the website’s owner. "},{"title":"Why does AdGuard need to be able to filter HTTPS?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#why-does-adguard-need-to-be-able-to-filter-https","content":"当前大部分网站使用 HTTPS，广告亦是如此。 Here are a few popular websites where you can’t remove ads without HTTPS filtering: youtube.com, facebook.com, and twitter.com. "},{"title":"How does HTTPS filtering work?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#how-does-https-filtering-work","content":"If it were easy, HTTPS wouldn’t be that secure. When a browser attempts to connect to a server, AdGuard establishes two secure connections: one with the browser (or another app) and the other with the server. The browser must trust AdGuard and the connections it creates. For this purpose, AdGuard generates a special (and unique) root certificate and installs it into the system and, when it is required, into some browsers (e.g., Firefox). Thus, AdGuard can see what is happening inside the secure connection and do its job — block ads and trackers. For better understanding we depicted this process:  "},{"title":"Does my traffic remain encrypted and secure?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#does-my-traffic-remain-encrypted-and-secure","content":"Of course! Your connection with a remote server remains encrypted and secure. AdGuard, just like your browser, checks the server’s certificate before deciding whether to filter it or not. However, HTTPS filtering has its drawbacks. The most important one is that it hides from the browser the actual certificate of the website. Instead, the browser sees the certificate issued by AdGuard. Because of this, we have taken additional measures to improve connection security. "},{"title":"Financial websites and websites with sensitive personal data​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#financial-websites-and-websites-with-sensitive-personal-data","content":"By default, AdGuard doesn’t filter any information on websites of banks, payment systems, or websites with valuable personal data. We maintain a list of thousands of exclusions. If you believe some website should be added to this list, please let us know. "},{"title":"Extended Validation (EV) certificates​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#extended-validation-ev-certificates","content":"AdGuard allows you to disable filtering for all websites that use extended validation certificates. An EV certificate offers a higher level of security and provides more guarantees than a regular certificate, proving that the website is not fraudulent or fake. "},{"title":"Problems related to HTTPS filtering​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#problems-related-to-https-filtering","content":"A 2017 study shows that 5 to 10% of HTTPS connections are established by HTTPS-filtering applications. It is usually done by various kinds of antivirus software. The bad news is that 24 out of 26 tested antiviruses reduced, in various ways, the connection security level, while two-thirds created connections prone to hacking. The researchers came to a simple conclusion: the Internet security community should pay close attention to applications that filter secure connections. And the developers of such software must pay serious attention to the quality of filtering implementations. We would like to note that AdGuard was not tested in the above study. We ran estimates according to their set of tests, and at the time of testing, we could have received the maximum score — A*. However, this score is not perfect. During the study, the researchers identified some issues that were omitted in the final evaluation. Here at AdGuard, we fully agree with those conclusions. Moreover, we would like to be as open with users as possible and talk about the problems we are currently experiencing and the steps we are taking to improve the quality and security of the filtering mechanism. The list of these problems is sorted by priority. Most of the problems discovered in the above study are related to certificate validation mechanisms. This is what we want to focus on first. We are working on a separate certificate validation library. Moreover, we want to make it open source. A separate article lists all the known drawbacks of HTTPS filtering in AdGuard and our plans to fix them. HTTPS filtering issues on Android 7+​ Starting from Android 7, developers have to explicitly indicate that their apps trust user-installed certificates. Not everyone wants to, or bothers with it. What does it mean for AdGuard? AdGuard installs a user certificate to be able to filter HTTPS traffic. If an app doesn't trust this certificate, its HTTPS traffic will not be filtered. What to do? The first thing worth mentioning is that many apps (even modern ones) still trust user certificates. Nothing has changed in this regard. Almost all browsers also trust such certificates. There may be some exotic browsers that do not, but they are a rare exception to common practice. Finally, if your device is rooted, you can move the AdGuard certificate to the system storage. This way, you don't have to worry about any permissions a particular app may or may not have — HTTPS traffic will be filtered for modern apps just as well as for older ones. Please keep in mind that in this case, some additional security restrictions (e.g., HPKP or Expect-CT) apply to AdGuard. "},{"title":"How to manually check HTTPS quality?​","type":1,"pageTitle":"What is HTTPS filtering","url":"general/https-filtering/what-is-https-filtering/#how-to-manually-check-https-quality","content":"There are several dedicated websites where you can check the quality of your HTTPS connection. These websites check if your browser (or, in our case, your browser plus AdGuard) is susceptible to common vulnerabilities. If you plan to use any program that filters HTTPS, not necessarily AdGuard (e.g., an antivirus), we advise that you check the connection quality on these websites. https://www.ssllabs.com/ssltest/viewMyClient.htmlhttps://www.howsmyssl.com/https://badssl.com/ "},{"title":"取消订阅或退款","type":0,"sectionRef":"#","url":"general/license/cancel-refund/","content":"","keywords":""},{"title":"取消订阅的方式​","type":1,"pageTitle":"取消订阅或退款","url":"general/license/cancel-refund/#取消订阅的方式","content":"用户可以在 AdGuard 账号中取消订阅。 使用以下方式取消订阅： 前往 AdGuard 账号 选择「许可证」 在不再需要的订阅下方点击「取消订阅」 被取消的订阅将在其到期日之前有效。 注意 通过应用商店购买的订阅可在应用商店账号或设备设置内管理。 "},{"title":"如何退款​","type":1,"pageTitle":"取消订阅或退款","url":"general/license/cancel-refund/#如何退款","content":"依据我们的销售条款，用户在 https://adguard.com 官网上购买的 AdGuard 许可证密钥后可 100% 退款。 要申请退款，请联系我们的支持团队 support@adguard.com 并说明您购买时所用的付款方式。 在以下情况下，退款可能会受到拒绝： 许可证是在 60 多天前购买的许可证是通过经销商购买的许可证是从 App Store 购买的用户为许可证密钥的升级或续订申请部分退款 "},{"title":"激活许可证的方式","type":0,"sectionRef":"#","url":"general/license/activation/","content":"","keywords":""},{"title":"在 Windows 版的 AdGuard 激活许可证​","type":1,"pageTitle":"激活许可证的方式","url":"general/license/activation/#在-windows-版的-adguard-激活许可证","content":"在过期许可证页面上，单击「激活」。 或者，在主屏幕右上角选择「许可证」，然后单击「激活」。 以便捷的方式激活许可证。 如果许可证与电子邮件地址绑定，请单击「AdGuard 账号」或选择与此电子邮件地址关联的社交网络。 或者，请输入您的许可证密钥。 "},{"title":"在 Mac 版的 AdGuard 激活许可证​","type":1,"pageTitle":"激活许可证的方式","url":"general/license/activation/#在-mac-版的-adguard-激活许可证","content":"在过期许可证页面上，单击「激活」。 或者，单击 AdGuard 菜单中的齿轮图标，然后单击「许可证」。 在打开的窗口中，点击「激活」。 以便捷的方式激活许可证。 如果许可证与电子邮件地址绑定，请单击「AdGuard 账号」或选择与此电子邮件地址关联的社交网络。 或者，请输入您的许可证密钥。 "},{"title":"在 Android 版的 AdGuard 激活许可证​","type":1,"pageTitle":"激活许可证的方式","url":"general/license/activation/#在-android-版的-adguard-激活许可证","content":"点击「设置」，然后点选「许可证」。 点击「激活许可证」。 以便捷的方式激活许可证。 如果许可证与电子邮件地址绑定，请点击「用电子邮件继续」或选择与此电子邮件地址相关联的社交网络。 或者，请输入您的许可证密钥。 "},{"title":"在 iOS 版的 AdGuard 激活许可证​","type":1,"pageTitle":"激活许可证的方式","url":"general/license/activation/#在-ios-版的-adguard-激活许可证","content":"点击「设置」，然后点选「许可证」。 然后点击屏幕右上角的「登录」 使用电子邮件地址或社交媒体账户激活许可证。 "},{"title":"购买/升级订阅的方式","type":0,"sectionRef":"#","url":"general/license/payment-options/","content":"","keywords":""},{"title":"如何购买许可证​","type":1,"pageTitle":"购买/升级订阅的方式","url":"general/license/payment-options/#purchase","content":"用户可以在 adguard.com 上购买 AdGuard 许可证。 平台支持 Visa、Mastercard、Apple Pay、Google Pay、PayPal、支付宝和银联支付。 我们还接受以下加密货币：Bitcoin、Ethereum、Litecoin 和 Tether。 iOS 版 的 AdGuard Pro 可以在 App Store 上购买。 此外，用户也可以通过经销商购买广告拦截程序的许可证。 AdGuard 软件在应用商店和分销商店的购买情况取决于用户的位置。 "},{"title":"如何升级许可证​","type":1,"pageTitle":"购买/升级订阅的方式","url":"general/license/payment-options/#upgrade","content":"为了更好地利用 AdGuard 产品，用户可升级许可证以获得以下好处。 要扩展设备数量，用户可以将 AdGuard 广告拦截程序的个人许可证升级到家庭版或者也可以，将许可证升级到终身许可证 用户可以在 AdGuard 账号中升级许可证。 请单击「升级成终身版」或「增加设备数量」。  "},{"title":"关于旧版许可证的常见问题","type":0,"sectionRef":"#","url":"general/license/legacy/","content":"","keywords":""},{"title":"关于旧版的许可证​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#关于旧版的许可证","content":"最开始，我们有以下的许可证用来激活 AdGuard 软件： 标准版：用于 Windows/Mac 版 AdGuard 桌面端应用程序 移动版：用于 Android/iOS 版 AdGuard 移动端应用程序 高级版：同时用于桌面端和移动端的许可证 标准版和移动版可以支付用于1到9台设备。 标准版限制用于桌面端，而移动版只能用于手机和平板电脑。 高级版的许可证可以同时在2-18台设备上使用。 取决于用户购买时选择的所需要的设备数量。用户可以在同等数量的桌面端和移动端设备上激活许可证：2+2、3+3 等等。 比如说，您可能有可用于2+2的高级版许可证，该许可证可以安装在两台电脑和两台手机/平板电脑。 或者，比方说，您购买力9+9（总共18 台设备），那么您可以在9个电脑和9个手机/平板电脑安装该许可证。 所有许可证的类型（标准版、移动版、高级版）有一年和终身的效期。 2019年10月 AdGuard 有新版许可证。用户仍然可以选择两个效期，即一年和终身，但是许可证的类型改变了。现在我们有个人版（可以用于3台设备）和家庭版（可以用于9台设备）。 请注意：新版的许可证密钥可以用于所有设备上，无论是哪一种桌面端或移动端组合。 比如说，个人版的许可证可以用于三台设备，即 Android、Mac 和 iOS，或是两个 Windows 电脑和一个 Apple 平板电脑上等等。 "},{"title":"旧版许可证现在怎么用？​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#旧版许可证现在怎么用","content":"标准版的许可证自动换成“通用版”，即可以用于所有设备，无论是桌面端还是移动端。 移动版的许可证未受改变（设备数量保持不变，依然只能用于手机或平板电脑上）。 高级版的许可证也没改变，依然收到设备数量的限制。 虽然高级版的许可证显示在用户的个人账号里（包括总计设备数量）。该许可证现在也可以激活在桌面端+移动端的设备组合。 比如说，以下是1+1许可证密钥的例子：  无论设备的总数（2）许可证密钥仅仅可以在1个桌面端和1个移动端激活。 所有旧版的许可证在 AdGuard 账号里带有「旧版」标记。 当用户续订获省级许可证时，它们自动转换成新版的许可证。 不过，也有一些细微的差别。 让我们看看哪些许可证可以转换成新版，以及如何做到这一点。 "},{"title":"我有旧版许可证密钥。 我有什么续订/升级选择？​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#我有旧版许可证密钥-我有什么续订升级选择","content":"用户可以在续订网页或 AdGuard 账号里查看该消息：  请前往「我的许可证」选项卡，检查每个特定密钥有哪些操作可供执行。 下面我们将用具体的例子给您解释。 "},{"title":"1/2/3台设备的许可证​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#123台设备的许可证","content":"用于1、2、3台设备的一年许可证可以转换成个人或家庭：  根据您需要保护的设备数量进行选择。 除了续订，您可以转为终身版：  由于技术限制终身版的许可证只能转换成家庭版（9台设备）：  "},{"title":"4+台设备的许可证（最多可连接到9台设备）​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#4台设备的许可证最多可连接到9台设备","content":"一年的许可证密钥配置仅能转换成家庭版的许可证：  由于技术限制用于4太或更多设备上的终身版许可证无法升级：  "},{"title":"9台设备的许可证​","type":1,"pageTitle":"关于旧版许可证的常见问题","url":"general/license/legacy/#9台设备的许可证","content":"高级版的许可证密钥（5+5 和更多）和您在我们帮助下单独购买的10多个设备的定制密钥。 这些都是比较特殊的情况，所以如果您想把自己的许可证升级为终身制，请联系我们：partners@adguard.com。 我们将根据您的许可证的具体配置，并提供一个不同的价格。 "},{"title":"隐身模式","type":0,"sectionRef":"#","url":"general/stealth-mode/","content":"","keywords":""},{"title":"常规​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#general","content":""},{"title":"隐藏搜索查询​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#searchqueries","content":"当用户从 Google、Yahoo 或任何其它搜索引擎定向到某个网站时，该设置隐藏您用于查找相应网站的搜索查询。 "},{"title":"要求网站不进行跟踪​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#donottrack","content":"向用户访问的网站发送全球隐私控制与请勿跟踪信号。 "},{"title":"剥离 URL 内的跟踪参数​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#剥离-url-内的跟踪参数","content":"开启此功能后，AdGuard 将从网页的 URL 内剥离跟踪参数，如 utm_* 和 fb_ref。 "},{"title":"跟踪方式​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#tracking-methods","content":""},{"title":"自销毁第三方 Cookie​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#3p-cookie","content":"网站使用 Cookie 存储用户的信息和首选项，如所选语言，地理位置或购物车上的物品清单。 当您回到网站时，浏览器会回送所属网站的 Cookie，允许其“记住”您的数据。 第三方 Cookie 由用户当前所在网站以外的其他网站设置。 例如，cnn.com 主页上可能有一个 Facebook「赞」小部件。 此小工具将执行 Cookie，Facebook 可能会在稍后读取它。 某些广告商使用此类 Cookie 跟踪用户访问的被托管广告的网站。 以分钟为单位设置销毁所有第三方 Cookie 的时间段。 设置计时器为 0 以完全阻止它们。 警告 此设置会删除所有第三方 Сookie，包括用户通过社交网络或其他第三方服务登录的信息。 您可能需要定期重新登录一些网站并面临其他与 Cookie 相关的问题。 要仅阻止跟踪 Cookie，请使用「AdGuard 跟踪保护过滤器」。 "},{"title":"自销毁第一方 Cookie​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#1p-cookie","content":"以分钟为单位设置销毁所有 Cookie 的时间段。 设置计时器为 0 以完全阻止它们。 警告 我们不推荐您开启此项，因为它可能会严重干扰某些网站的工作。 "},{"title":"禁用缓存第三方请求​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#3p-cache","content":"当浏览器寻址某个网页时，服务器会指派 ETag 给相应的网页。 此 ETag 是用于浏览器缓存网页内容。 在进行后续的请求时，浏览器会发送 ETag 给相应的服务器，从而让服务器知晓访问者的身份。 只要网站文件处于缓存状态，浏览器每次访问此网站时都会发送 ETag。 如此网站内嵌其它服务器的内容（如图像或 iframe），则服务器可在您不知情的情况下跟踪您的活动。 "},{"title":"拦截第三方授权头部​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#3p-auth","content":"“Authorization”（授权）头部值由浏览器缓存，然后与每个请求一起发送到相应的域。 这意味着它可以如 Cookie 一般用于跟踪目的。 "},{"title":"浏览器 API​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#browser-api","content":""},{"title":"拦截 WebRTC​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#webrtc","content":"WebRTC（网络实时通信）是一种允许在浏览器和应用程序之间直接传输数据流的技术。 其允许其他人知晓您的实际 IP，即使您使用代理或 VPN。 开启此项可能会干扰某些浏览器应用的工作，如通信工具、电影或游戏。 "},{"title":"拦截推送 API​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#push","content":"无论浏览器是否活动，推送 API 都能让服务器发送讯息给网络应用。 因此，用户可能看到源自各网站的通知，甚至是在您浏览器隐藏到托盘或未启动的情况下。 开启此项以完全阻止浏览器的推送 API。 "},{"title":"拦截定位 API​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#location","content":"启用此选项将阻止浏览器发送可用于确定用户的位置、修改搜索结果或以其他方式影响用户的网络体验的 GPS 数据。 "},{"title":"拦截 Flash​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#flash","content":"Flash Player 插件越来越容易受到如病毒和黑客之类的在线威胁的影响；它还可能会显著影响网站的加载时间。 启用此设置后，AdGuard 将阻止浏览器检测允许 Flash 显示内容的组件（例如插件和 ActiveXObject 对象）。 这实际上意味着浏览器无法支持 Flash。 "},{"title":"拦截 Java​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#java","content":"有些网站和 Web 服务仍然使用旧技术支持 Java 插件。 Java 插件 API 是 Java 插件的基础，存在严重的安全漏洞。 为安全起见，用户可以禁用此类插件。 尽管如此，即使用户决定使用「阻止 Java」选项，JavaScript 仍将启用。 "},{"title":"其它​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#miscellaneous","content":""},{"title":"隐藏第三方 Referer​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#referer","content":"Referrer 是浏览器发送请求到服务器时所用的 HTTP 头部。 其包含请求源的 URL。 当您在各网页间导航时，Referer ​ ​会保存初始页的 URL。 托管目标网页的服务器通常具备解析 Referrer 的软件，并从中提取各种信息。 开启「隐藏第三方 Referrer」选项后，通过更改 HTTP 头部使第三方网站不可视当前网站。 您也可在 Referer ​ ​字段输入任意值以设置 Referer。 要使用默认 Referer，置空此字段即可。 请注意，要过滤流量，AdGuard 应用会“劫持”浏览器到服务器的请求。 对广告，跟踪和钓鱼网站的请求可在发送其请求到服务器之前更改或完全拦截。 「隐藏第三方 Referer」也是如此：AdGuard 拦截 HTTP(S) 请求，在启用该选项后软件删除或更改 Referer 标头。 但是，只有在这些请求“离开”浏览器后软件才开始拦截。 这意味着，如果在浏览器内监视 Referer（例如，借助 Chrome 浏览器的开发者工具），用户将看到原来的 Referer，因为请求尚未到达 AdGuard。 您可以使用 Fiddler 等软件来确保 Referer 被正确更改。 相反，由于所有浏览器扩展的性质，AdGuard 浏览器扩展在浏览器“内部”运行。 它将立即更改 Referer，因此开发工具将为用户的请求显示所需的 Referer。 "},{"title":"隐藏 User-Agent​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#useragent","content":"当您访问网站时，浏览器会发送其信息给服务器。 其如一行文本，是以 &quot;User-Agent:&quot; 为开头作为 HTTP 请求的一部分。 其通常包括浏览器的名称和版本，以及操作系统和语言设置。 我们移除身份识别信息内的 User-Agent，以使广告商无法获取它。 您也可在自定义 User-Agent 字段输入任意值以设置 User-Agent。 要使用默认 User-Agent，置空此字段即可。 "},{"title":"隐藏 IP 地址​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#ip","content":"隐身模式无法隐藏 IP 地址。 但该设置可以帮用户伪装地址，让您访问的网站认为您是一个代理。 有时这会有帮助，网站将忽略用户的真实 IP 地址。 用户可以设置任意 IP 地址，只需将其输入到相应的字段中即可，让其他人将其视为您的 IP 地址。 要使用默认 IP 地址，置空此字段即可。 "},{"title":"移除 HTTP 请求中的 X-Client-Data 头部​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#xclientdata","content":"禁止 Google Chrome 向 Google 域（包括 Double Click 和 Google Analytics）发送包含版本和修改信息的请求。 "},{"title":"保护免受 DPI 影响​","type":1,"pageTitle":"隐身模式","url":"general/stealth-mode/#dpi","content":"深度数据包检测（英语：Deep Packet Inspection，缩写成 DPI）是一种按数据包内容对流量进行深度分析和过滤以及统计数据积累的系统。 利用这项技术，互联网服务提供商能够控制流量传输及限制客户访问内容。 AdGuard 可以修改传出数据包，使客户端不受 DPI 拦截标准限制。 这意味着通过启用此选项，用户可以访问他们想要的内容。 目前还不能绕过所有 DPI 系统，但我们不断努力改进。 Windows 版 AdGuard、Mac 版 AdGuard 和 Android 版 AdGuard 已经有「保护免受 DPI 影响」功能。 "},{"title":"什么是 AdGuard 许可证密钥?","type":0,"sectionRef":"#","url":"general/license/what-is/","content":"","keywords":""},{"title":"AdGuard 许可证的类型​","type":1,"pageTitle":"什么是 AdGuard 许可证密钥?","url":"general/license/what-is/#adguard-许可证的类型","content":"在购买页面上，用户可以查看以下许可证类型： 一年订阅：许可证每年自动更新，也可手动续订。 个人（最多支持 3 台设备）家庭（最多支持 9 台设备） 终身：许可证没有时间限制。 个人（最多支持 3 台设备）家庭（最多支持 9 台设备） 用户还可以从其他渠道购买或免费获得许可证： 试用许可证是有时间限制的免费许可证，允许用户测试软件的全部功能。 AdGuard Windows版：14 天试用期AdGuard Mac版：14 天试用期AdGuard Android版：7 天试用期 经销商许可证和赠送的许可证可以是有时间限制的，也可以是无时间限制的。 有过期日期的许可证只能手动更新。 个人（最多支持 3 台设备）家庭（最多支持 9 台设备） AdGuard Pro iOS版 许可证可以通过 App Store 购买和管理，只能在具有相同 Apple ID 的 iOS 和 iPadOS 设备上使用。 提示 要扩展许可证的设备数量，用户可以升级许可证。 "},{"title":"如何使用 AdGuard 许可证​","type":1,"pageTitle":"什么是 AdGuard 许可证密钥?","url":"general/license/what-is/#如何使用-adguard-许可证","content":"要在设备上使用许可证，请使用与许可证关联的电子邮件地址登录 AdGuard 应用程序。 如果许可证尚未绑定到电子邮件地址，用户可以在 AdGuard 账号中进行绑定。 请打开「许可证」选项卡，然后单击「绑定许可证」即可。 或者，用户也可以在 AdGuard 应用程序中输入许可证密钥。 "},{"title":"许可证密钥​","type":1,"pageTitle":"什么是 AdGuard 许可证密钥?","url":"general/license/what-is/#许可证密钥","content":"许可证密匙是一种独特的字符序列以代表 AdGuard 广告拦截程序许可证。 许可证密钥将自动绑定到用户购买许可证时使用的电子邮件地址上。如果有用户从经销商处购买许可证，密钥会单独提供给用户。 有了许可证密钥，用户可以： 在软件里激活许可证（如果没有 AdGuard 账号）将许可证绑定到 AdGuard 账号并解除绑定 解除许可证绑定时，请务必先保存许可证密钥。 用户需要密钥来重新绑定许可证或将其转移到另一个账号。 "},{"title":"如何恢复许可证密钥​","type":1,"pageTitle":"什么是 AdGuard 许可证密钥?","url":"general/license/what-is/#如何恢复许可证密钥","content":"如果用户不记得许可证密钥，请查看 AdGuard 账号。在账号里可以查看与电子邮件地址绑定的所有许可证。 如果有用户丢失了从经销商处购买的许可证密钥，请通过 support@adguard.com 联系我们。 联系前，请准备好收据或其他购物凭证。 "},{"title":"转移许可证的方式","type":0,"sectionRef":"#","url":"general/license/transfer/","content":"","keywords":""},{"title":"将许可证转移到另一台设备​","type":1,"pageTitle":"转移许可证的方式","url":"general/license/transfer/#transfer","content":"许可证密钥可以在有限数量的设备上激活。 如果许可证密钥已经在最大数量的设备上被使用，用户需要通过账号解除设备绑定。 "},{"title":"如何解绑设备绑定​","type":1,"pageTitle":"转移许可证的方式","url":"general/license/transfer/#如何解绑设备绑定","content":"在 AdGuard 应用程序中单击「重置许可证」或「退出」。 从 AdGuard 账号中删除设备： 在 AdGuard 账号点击「AdGuard 广告拦截程序」。 单击要解除绑定的设备。 单击「删除」。 在解绑所需要的设备数量后，用户可以在新设备上登录 AdGuard 账号。 许可证就会绑定到用户登录的新设备。 "},{"title":"如何将许可证转移到另一个 AdGuard 账号​","type":1,"pageTitle":"转移许可证的方式","url":"general/license/transfer/#transferaccount","content":"转到包含想要转移许可证的 AdGuard 账号。 转到「许可证」部分。 在列表中找到要转移的许可证，点击「从账号中解绑」。 点击「取消绑定」(重要：请记下许可证密钥以免忘记)。 前往想转移许可证的 AdGuard 账号。 转到「许可证」部分。 在右上角点击「绑定许可证」 输入许可证密钥（步骤 3） 如果有用户无法登录初始账号，请联系我们的支持团队：support@adguard.com "},{"title":"恶意广告软件和病毒","type":0,"sectionRef":"#","url":"guides/adware/","content":"","keywords":""},{"title":"免费的防病毒软件​","type":1,"pageTitle":"恶意广告软件和病毒","url":"guides/adware/#free-antivirus","content":"实用程序不可枚举，您可以使用任何自己喜欢的。 如果防病毒实用程序的检查没有发现任何问题，但计算机仍然运行可疑。请您尝试对设备进行广告软件检测，查看计算机上是否有恶意广告软件。 "},{"title":"如何清除在系统上的恶意广告软件​","type":1,"pageTitle":"恶意广告软件和病毒","url":"guides/adware/#adware","content":"在互联网上可以找到许多用于解决此问题的应用程序。 您可以使用任何自己喜欢的实用程序。 但我们强烈建议使用 Malwarebytes 的 AdwareCleaner、Avast 的 Avast One，或 Adaware。 这些广告软件扫描器非常易于使用，自行处理也一般不会遇到任何问题。 让我们以 AdwareCleaner 为例。 结束下载应用程序并成功安装后，请执行以下步骤： 启动此程序并点击「立即扫描」。  扫描完成后，用户需要发送可疑项目到「隔离区」。  将选项被移至「隔离区」后，您将能够「清除系统」中不必要的选项。 在某些情况下，清理完成后，您可能需要「重启系统」。  重启系统后，清理随之完成。 如有必要，用户可以随时阅读有关已完成工作的报告。  如果没有效果，请根据此说明暂时禁用浏览器中的所有扩展程序，以及其他设置。 如果禁用设置和扩展也无济于事，请您尝试重新创建浏览器的快捷键。 在此页接下来的内容中，我们会介绍如何删除一些最常见的广告附加信息。 "},{"title":"如何在浏览器中禁用设置和扩展​","type":1,"pageTitle":"恶意广告软件和病毒","url":"guides/adware/#instructions","content":"以下是有关如何针对最流行的浏览器禁用设置和扩展的说明： Google Chrome 浏览器 Firefox 浏览器 Opera 浏览器 "},{"title":"如何为浏览器重新创建快捷键​","type":1,"pageTitle":"恶意广告软件和病毒","url":"guides/adware/#shortcuts","content":"恶意软件和广告软件程序通常以非常简单的方式安装其首页。它们替代浏览器的桌面快捷键，任务栏和「开始」菜单项。 在这种情况下，最简单的解决方式是手动删除所有快捷键，然后自己重新创建它们。 "},{"title":"如何阻止推送通知","type":0,"sectionRef":"#","url":"guides/block-push-notifications/","content":"","keywords":""},{"title":"Google Chrome 浏览器​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#google-chrome-浏览器","content":"单击浏览器右上角的三点图标，然后选择「设置」。转到「隐私和安全」→「网站设置」→「通知」。在「默认」中，选择「不允许网站发送通知」。 或者，也可以在「自定义」中管理站点特定的设置。 "},{"title":"Firefox 浏览器​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#firefox-浏览器","content":"点击导航栏右上角的三条水平线，然后选择「设置」。在左侧菜单中选择「隐私和安全」。向下滚动到「权限」部分，然后点击「通知」旁边的「设置」按钮。要停止所有先前设置的网站的通知，请单击「删除所有网站」。 或者，也可以单独管理每个网站的通知。用户还可以选择「阻止要求允许通知的新请求」以一次性停止所有推送通知请求。单击「保存更改」。 "},{"title":"Safari 浏览器​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#safari-浏览器","content":"点击菜单栏中的「Safari」→「系统设置」。转到「网站」选项卡。从左侧边栏选择「通知」。要阻止所有请求，请取消选中「允许网站发送通知的请求」。 或者，为每个要屏蔽的网站分别选择「拒绝」。 "},{"title":"Microsoft Edge 浏览器​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#microsoft-edge-浏览器","content":"点击右上角的三点菜单，选择「设置」。在左侧边栏中，点击「Cookie 和网站权限」。向下滚动点击「站点权限」下的「通知」。关闭「发送前询问」以阻止 Microsoft Edge 中的所有浏览器通知。或者，在「阻止」部分添加想要拦截的每个站点的域名。 "},{"title":"用 AdGuard 拦截推送通知​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#用-adguard-拦截推送通知","content":"要避免将来出现类似的广告，用户还可以用 AdGuard 应用程序阻止推送通知。 "},{"title":"Windows 版​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#windows-版","content":"打开 AdGuard。 前往「设置」→「隐身模式」。向下滚动到「浏览器 API」部分。启用「拦截推送 API」。 "},{"title":"Mac 版​","type":1,"pageTitle":"如何阻止推送通知","url":"guides/block-push-notifications/#mac-版","content":"打开 AdGuard。 转到「首选项」。在「隐身模式」选项卡中，转到「浏览器 API」。启用「拦截推送 API」。 "},{"title":"如何为 Google Family Link 启用 HTTPS 过滤","type":0,"sectionRef":"#","url":"guides/family-link-certificate/","content":"如何为 Google Family Link 启用 HTTPS 过滤 要在使用 Google Family Link 的设备上启用 HTTPS 过滤，请按照以下说明安装 AdGuard 证书： 设备提前做好备份，以防万一。 删除设备上的孩子账户： 在孩子的设备上，转到「设置」→「账户」→「Google」。点击孩子的账户，选择「删除」选项。 如果没有删除选项，请执行下一步。点击屏幕右上角的三个点，点击「删除账户」选项。按照说明从设备上删除孩子的账户。 启动 AdGuard 软件并安装 CA 文件。 恢复设备上的孩子账户： 在孩子的设备上，转到「设置」→「账户」→「Google」→「添加账户」。登录孩子的账户。跟随屏幕上的指示说明设置孩子的账户。","keywords":""},{"title":"收集 HAR 文件的方式","type":0,"sectionRef":"#","url":"guides/collect-har-file/","content":"","keywords":""},{"title":"Chrome 浏览器​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#chrome","content":"要在 Chrome 中创建 HAR 文件，请按照以下步骤操作： 前往出现问题的 URL。 暂时不要重复导致问题的操作。 打开开发者工具： 在菜单中点击「菜单」→「更多工具」→「开发者工具」。键盘： Ctrl+Shift+C，或 Ctrl+Alt+I，或 ⌥+⌘+I (Mac)。 点击「Network」标签。 找到 Network 标签中的左上角的圆形按钮，并确认它处于红色录音模式。 如果是灰色的，请您单击使其变为红色的，并开始录音。 使用「Clear」按钮（记录按钮旁边带有一条线的圆圈按钮）以清除所有之前的活动。 选择 Network 标签中的「Preserve log」（保留日志）复选框。 选中「Disable cache」 。 重复导致问题的步骤。 通过右键单击网格并选择「将所有内容另存为 HAR」将会话另存为 .har 文件。 发送至 AdGuard 支持团队（support@adguard.com），并详细描述问题。 屏幕截图也会有所帮助。 "},{"title":"Edge 浏览器​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#edge","content":"前往出现问题的 URL。 暂时不要重复导致问题的操作。 打开开发者工具： 在菜单中点击「菜单」→「更多工具」→「开发者工具」。键盘： Ctrl+Shift+C，或 Ctrl+Alt+I，或 ⌥+⌘+I (Mac)。 点击「Network」标签。 找到 Network 标签中的左上角的圆形按钮，并确认它处于红色录音模式。 如果是灰色的，请您单击使其变为红色的，并开始录音。 使用「Clear」按钮（记录按钮旁边带有一条线的圆圈按钮）以清除所有之前的活动。 选择 Network 标签中的「Preserve log」（保留日志）复选框。 选中「Disable cache」 。 重复导致问题的步骤。 通过右键单击网格并选择「将所有内容另存为 HAR」将会话另存为 .har 文件。 发送至 AdGuard 支持团队（support@adguard.com），并详细描述问题。 屏幕截图也会有所帮助。 "},{"title":"Firefox 浏览器​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#firefox","content":"要在 Firefox 中创建 HAR 文件，请按照以下步骤操作： 前往出现问题的 URL。 暂时不要重复导致问题的操作。 在Network模式下打开「开发工具」： 从菜单中找到：「菜单」→「Web 开发者」→「网络」。键盘：Ctrl+Shift+C，或 ⌥+⌘+E(Mac)。 注意：Network 标签左上方的继续/暂停按钮。 按钮应处于继续记录模式。 如果当前在网格中显示任何信息，请单击继续/暂停按钮旁边的「Empty trash can」按钮进行清除。 选中网络标签上的「Persist Logs」（继续记录）复选框。 选中「Disable cache」。 重复导致问题的步骤。 通过右键单击网格并选择「Save all as HAR」将会话另存为 .har 文件。 发送至 AdGuard 支持团队（support@adguard.com），并详细描述问题。 屏幕截图也会有所帮助。 "},{"title":"Internet Explorer11 浏览器​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#ie11","content":"要在 Internet Explorer 11 浏览器中创建 HAR 文件，请按照以下步骤操作： 前往出现问题的 URL。 暂时不要重复导致问题的操作。 在Network模式下打开「开发工具」： 工具齿轮菜单：「开发工具」→「Network」。键盘：F12 →「Network」选项卡。 请注意网络标签左上方的开始分析会话「Play」（继续）按钮和停止分析的「Stop」（停止）按钮。 录音时继续按钮将变为灰色，停止按钮为红色。 进入「Play」模式。 使用网络标签上的「Clear session」（清除会话）按钮以清除显示在下部网格中的所有会话信息。 将鼠标悬停在图标上可以查看名称。 「Clear session 」（清除会话）按钮是一个三行图标，上面带有一个「X」。 选中「Disable cache」 。 重复导致问题的步骤。 单击网络标签上的「Save disk」（保存磁盘） 按钮（导出为 HAR）将会话内容另存为 .har 文件。 发送至 AdGuard 支持团队（support@adguard.com），并详细描述问题。 屏幕截图也会有所帮助。 "},{"title":"Safari 浏览器​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#safari","content":"要在 Safari 中创建 HAR 文件，请按照以下步骤操作： 查看屏幕顶部的 Safari 菜单栏是否有「Develop」（开发）菜单。 如果沒有开发者菜单，请转到「Safari」→「Preferences 」（首选项）→「Advanced」（高级）将其启用。选菜单栏中的「Show Develop menu in menu bar」（显示开发菜单）和底部的复选框。 前往出现问题的 URL。 暂时不要重复导致问题的操作。 在网络检查器中打开「Network」选项卡： 菜单：「开发」→「显示 Web 检查器」→「Network」。键盘：F12 →「Network」选项卡。 在网络选项卡左侧的「Other filter options...」（其他过滤选项...）菜单中勾选「Preserve Log」（保留日志）复选框。 单击「Network」最右侧的「Delete Trash」（删除垃圾箱）图标，清除当前的网络项目。 键盘：⌘+K 选中「Disable cache」（禁用缓存）。 重复导致问题的步骤。 单击「Preserve Log」旁边的「Export」（导出）图标，将会话内容另存为 .har 文件。 发送至 AdGuard 支持团队（support@adguard.com），并详细描述问题。 屏幕截图也会有所帮助。 "},{"title":"Android 系统​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#android","content":"要创建 HAR 文件，请执行以下步骤： 打开 AdGuard ，前往「设置」。 在菜单中选择「高级」。 选择「低级设置」。 激活 pref.har.capture（必须重新启动保护）。 重试导致问题的操作：打开应用程序，执行必要的操作以使广告出现。 现在再次关闭 pref.har.capture。 返回并点击「导出日志和系统信息」→「保存」。 "},{"title":"Windows 系统​","type":1,"pageTitle":"收集 HAR 文件的方式","url":"guides/collect-har-file/#windows","content":"打开「设置」→「常规设置」→「高级设置」并向下滚动。 选中「启动 HAR 写入」。 复现问题。 转到「常规设置」→ 单击「导出日志」→「保存」。 通过取消勾选相应的方框禁止 HAR 写入。 "},{"title":"用户脚本","type":0,"sectionRef":"#","url":"general/userscripts/","content":"","keywords":""},{"title":"Recommended AdGuard scripts​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#recommended-adguard-scripts","content":"These userscripts come directly from the AdGuard developers, and we can guarantee that they are effective and safe. For some of the userscripts developed by others that we consider good and reliable, scroll down to the next section. You can also find some of the popular websites with scripts below, but remember that whenever you download a userscript from an unknown source, you expose yourself to a certain risk, as some scripts may be harmful to your computer. "},{"title":"AdGuard Extra​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#adguard-extra","content":"An extension that blocks ads in difficult cases when the usual filter-based approach is not enough. AdGuard Extra comes pre-installed with all premium AdGuard versions, so you don't need to do anything to enable it. However, if you want to use it alongside AdGuard Browser Extension or any other ad blocker, you'll need to use an additional extension. Learn more about this userscript and how to install it on GitHub.  "},{"title":"AdGuard Popup Blocker​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#adguard-popup-blocker","content":"The name speaks for itself: it blocks pop-ups — one of the most annoying types of ads on web pages. Learn more about this userscript, its key features, and how to install it on GitHub.  "},{"title":"AdGuard Assistant (legacy version)​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#adguard-assistant-legacy-version","content":"This custom extension is designed to control filtering directly from the browser page (manual blocking, exclusion of the site, etc.). 注意 This version of Assistant is legacy and there is no point in using it on new systems, since it has been replaced with the full-fledged Browser Assistant. But the legacy Assistant might be of help if there is no Browser Assistant for your browser. If this is your case, your can learn how to install AdGuard Assistant on GitHub. "},{"title":"Disable AMP​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#disable-amp","content":"A script that is only pre-installed in AdGuard for Android. It disables AMP (Accelerated Mobile Pages) on the Google search results page. Learn more about this userscript and how to install it on GitHub.  "},{"title":"Top picks outside AdGuard​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#top-picks","content":"These userscripts are not developed by AdGuard and therefore we can't give a 100% guarantee that they are safe and/or work at all times. However, in our experience they deserve a recommendation as they've all earned their good reputation. "},{"title":"Don't track me Google​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#dont-track-me-google","content":"This script removes Google's tracking feature from the links in Google search results. It speeds up the loading of search results and allows you to right-click or tap to copy the link URL. Its source code is available on GitHub. This userscript can be downloaded from GreasyFork and installed in any AdGuard CoreLibs-based app. "},{"title":"microShield​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#microshield","content":"A userscript for people who visit Korean websites and some international websites. The microShield userscript blocks Ad-Shield advertisement and anti-adblock. Its original source code is available at asdefuser and AdShield Defuser. This userscript can be installed in AdGuard CoreLibs-based apps, Violentmonkey, Tampermonkey, and quoid/userscripts. Learn more about microShield and how to install it on GitHub. "},{"title":"Where can you get more userscripts?​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#more-userscripts","content":"As userscripts are mainly created by enthusiasts, you should be cautious when installing them. Any script from an unknown source carries a potential risk. Yet, there is a great variety of interesting scripts that, if installed carefully and responsibly, can really make using some websites more convenient. Here we will describe some of the most popular userscript catalogs. "},{"title":"Stylish (userstyles.org)​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#stylish-userstylesorg","content":"Userstyles.org is a catalog of user styles, but it allows you to load them as userscripts. Thus, any user style can be installed via AdGuard. Be careful if you decide to install an unpopular script — there's a risk it might be harmful. "},{"title":"Greasy Fork​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#greasy-fork","content":"Greasy Fork is a userscript catalog by Stylish creators. Unlike the above-mentioned userstyles.org, the scripts in this catalog undergo moderation, so their credibility is much higher. "},{"title":"OpenUserJS.org​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#openuserjsorg","content":"OpenUserJS.org is an open source userscript catalog written in nodeJS. It doesn't have moderation so stay alert to any suspicious scripts. "},{"title":"Community​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#community","content":"If you like the idea of personifying your browser with the help of userscripts, and you have any questions, you can ask them on one of these websites: StackoverflowFreeNodeReddit "},{"title":"Development​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#development","content":""},{"title":"Request license​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#request-license","content":"If you are developing your own custom script and want to test how it works with AdGuard, request a beta license key for the app. To get it, please send an email to devteam@adguard.com with the following information: Subject: Userscript author license request Body: Please tell us about the userscripts you are working on. Here is a mailto link. "},{"title":"Compatibility​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#compatibility","content":"Metadata block​ Supported properties​ @name @namespace @description @version @match @include @exclude @grant @connect @require @resource @downloadURL @updateURL @supportURL @homepageURL @homepage @website @source @run-at @noframes @icon @iconURL @defaulticon @icon64 @icon64URL  Unsupported properties​ These properties will be simply ignored by Adguard. @unwrap  Supported GM functions​ AdGuard supports both old GM_ functions and new GM4 API that use GM object. Values​ 注意 All listed old Greasemonkey functions are deprecated but still supported. GM.info / GM_info GM.setValue / GM_setValue GM.getValue / GM_getValue GM.listValues / GM_listValues GM.deleteValue / GM_deleteValue GM.getResourceUrl / GM_getResourceURL GM.setClipboard / GM_setClipboard GM.xmlHttpRequest / GM_xmlhttpRequest GM.openInTab / GM_openInTab GM.notification unsafeWindow GM_getResourceText GM_addStyle GM_log  Here you can find more information about Greasemonkey API. "},{"title":"示例​","type":1,"pageTitle":"用户脚本","url":"general/userscripts/#示例","content":"// ==UserScript== // @name Name as shown to the user when locale is english or unknown // @name:ru Name as shown to the user when locale is russian // @description Description as shown to the user when locale is english or unknown // @description:ru Description as shown to the user when locale is russian // @icon https://myhomepage.com/myuserscript.png // @version 1.0.0.0 // @downloadURL https://dl.myhomepage.org/myuserscript.user.js // @updateURL https://dl.myhomepage.org/myuserscript.meta.js // @homepageURL https://myhomepage.com/myuserscript // @include * // @exclude *://website.com/* // @resource https://myhomepage.com/myuserscript.css // @require https://myhomepage.com/mylibrary.js // @grant property:settings // @grant GM_getValue // @grant GM_setValue // @grant GM_deleteValue // @grant GM_listValues // @grant GM_getResourceText // @grant GM_getResourceURL // @grant GM_addStyle // @grant GM_log // @grant GM_setClipboard // @grant GM_xmlhttpRequest // @grant unsafeWindow // @grant GM_info // @grant GM_openInTab // @grant GM_registerMenuCommand // @run-at document-start // ==/UserScript== !function(){( console.log(&quot;I am loaded!&quot;); )}();  "},{"title":"如何创建 Minidump 文件以修复 BSoD 错误","type":0,"sectionRef":"#","url":"guides/minidump/","content":"","keywords":""},{"title":"什么是 Minidump 文件？​","type":1,"pageTitle":"如何创建 Minidump 文件以修复 BSoD 错误","url":"guides/minidump/#什么是-minidump-文件","content":"Minidump 文件是一个包含有关系统崩溃信息的转储文件。 它是在蓝屏出现之前创建的，仅包含可用于解决问题的最少量有用信息集。 Minidump 文件通常具有 .dmp 扩展名。 注意 在 Windows 10 上，蓝屏显示一个停止代码和一个 QR 码。 用户可以使用这些信息在网络上搜索特定问题。 默认情况下，创建 Minidump 文件被禁用，因此在我们更详细地讨论如何使用该转储文件之前，我们要启用它。 "},{"title":"设置 Windows 以创建 Minidump 文件​","type":1,"pageTitle":"如何创建 Minidump 文件以修复 BSoD 错误","url":"guides/minidump/#设置-windows-以创建-minidump-文件","content":"即使您的电脑没有出现蓝屏错误，您仍然可以设置此选项。这是一个普遍建议，不一定与 AdGuard 服务有关。 请按照下面的指示说明自动创建 Minidump 文件。 在 Windows 搜索栏中输入 sysdm.cpl，然后单击「打开」。 系统属性控制面板菜单窗口将出现在屏幕上。 提示 或者，单击「设置」→「系统」→「关于」→「高级系统设置」。 ::: ![系统属性 *mobile_border](https://cdn.adtidy.org/blog/new/c2huSystem_Properties.jpeg)  转到「高级」标签。 在「启动和恢复」部分，单击「设置」。 请启用以下三个选项： 在系统日志写入事件自动重启编写调试信息 → 小内存转储（256KB） 单击「确定」应用设置。 重启计算机。 您已成功启用 Minidump 文件。 现在，系统崩溃时转储文件将自动创建。 注意 默认情况下，Minidump 文件存储在 %SystemRoot%\\Minidump 文件夹中。 用户可以更改目录位置为自己喜欢的位置，但请记住，许多程序都默认设置为查找此位置，因此我们建议您不要更改位置。 "},{"title":"如何安装代理证书","type":0,"sectionRef":"#","url":"guides/proxy-certificate/","content":"","keywords":""},{"title":"如何下载并安装证书​","type":1,"pageTitle":"如何安装代理证书","url":"guides/proxy-certificate/#如何下载并安装证书","content":"根据要过滤流量的设备操作系统，执行以下操作： "},{"title":"Windows 系统​","type":1,"pageTitle":"如何安装代理证书","url":"guides/proxy-certificate/#windows","content":"记下装有 AdGuard 的台式计算机的 IP 地址。 请确保 AdGuard 保护已启用。 在 Windows 电脑上转到设置中的「网络」，勾选「将 AdGuard 用作 HTTP 代理」。 Mac 用户，请前往「设置」→「首选项」→「网络」并启用「HTTP 代理」。 在装有 AdGuard 的计算机上，通过浏览器打开此链接：http://local.adguard.org/cert 单击「下载」按钮。 如果下载未开始，请使用另一个浏览器，例如 Firefox 浏览器。 将下载的 cert.cer 文件传输到您想通过 AdGuard 路由流量的 Windows 设备上。 用户还可以使用 USB 电缆，蓝牙或云服务来完成此操作。 在该设备上，按「Win」按钮，输入「Manage computer certificates」（管理计算机证书），按「Enter」键。 在「证书 —— 本地计算机」页面，找到「受信任的根证书颁发机构」→「证书」文件夹。 右键单击「证书」文件夹，并单击「所有任务」→「导入」。 在「证书导入向导」页面，单击「下一步」。 点击「浏览」，导入证书。 导航到 cert.cer 证书文件，选择它，点击「打开」，然后点击「下一步」。 选择「将所有证书放置在以下存储区中」复选框。 确保「证书存储」字段显示「受信任的根证书颁发机构」，然后点击「下一步」。 单击「完成」。 按「Win」，然后打开设置。 选择「网络&amp;Internet 」→「代理」。 关闭「自动检测设置」。 在「使用代理服务器」中，点击「设置」。 打开开关。 要设置代理 IP 地址，请键入您在步骤 1 记下的桌面端计算机的 IP 地址。 对于端口，输入在桌面 AdGuard 应用程序的网络设置中选择的端口。 单击「保存」。 "},{"title":"Mac 系统​","type":1,"pageTitle":"如何安装代理证书","url":"guides/proxy-certificate/#mac","content":"记下装有 AdGuard 的台式计算机的 IP 地址。 请确保 AdGuard 保护已启用。 在 Windows 电脑上转到设置中的「网络」，勾选「AdGuard 用作 HTTP 代理」。 Mac 用户，请前往「设置」→「首选项」→「网络」并启用「HTTP 代理」。 通过浏览器打开此链接：http://local.adguard.org/cert 单击「下载」按钮。 如果下载未开始，请使用另一个浏览器，例如 Firefox 浏览器。 将下载的 cert.cer 文件传输到您想通过 AdGuard 路由流量的 Mac 设备上。 用户还可以使用 USB 电缆，蓝牙或云服务来完成此操作。 双击下载的证书文件。 输入管理员密码，然后点击「修改钥匙串」。 转到「Spotlight」（右上角的搜索图标），输入「Keychain Access」（钥匙串访问），然后从搜索结果中选择「Keychain Access」（钥匙串访问）。 在「系统」（System）中，突出显示您添加的证书。 右键单击证书并从上下文菜单中选择「更多信息」（Get info）。 展开「信任」（Trust）以显示该证书的信任政策。 在「安全套接层（SSL）」（Secure Sockets Layers (SSL)），选择「始终信任」（Always Trust）。 打开「系统偏好」→「网络」，选择顶部的活动连接。 点击「更多信息...」，并转到「代理」。 勾选两个复选框：「网络代理（HTTP）」和「安全网络代理（HTTPS）」。 在「服务器」字段中，键入您在步骤 1 记下的计算机的 IP 地址。 在「端口」，输入在桌面 AdGuard 应用程序的网络设置中选择的端口。 "},{"title":"Android 系统​","type":1,"pageTitle":"如何安装代理证书","url":"guides/proxy-certificate/#android","content":"记下装有 AdGuard 的台式计算机的 IP 地址。 请确保 AdGuard 保护已启用。 在 Windows 电脑上转到设置中的「网络」，勾选「将 AdGuard 用作 HTTP 代理」。 Mac 用户，请前往「设置」→「首选项」→「网络」并启用「HTTP 代理」。 在装有 AdGuard 的计算机上，通过浏览器访问此链接：http://local.adguard.org/cert。 单击「下载」按钮。 如果下载未开始，请使用另一个浏览器，例如 Firefox 浏览器。 将下载的 cert.cer 文件传输到您想通过 AdGuard 路由流量的 Android 设备上。 用户还可以使用 USB 电缆，蓝牙或云服务来完成此操作。 找到并点击先前下载的 cert.cer 证书，打开文件并按照说明安装证书。 Android 设备默认不信任证书，所以会出现警告。用户可以忽略它。 在某些手机上，可能会要求您输入设备密码。 然后再按「确定」。 证书将安装成功。 打开连接的 Wi-Fi 网络的高级设置。 将「代理类型」更改为「手动」。 在「代理主机名」请输入在第一步记下的 IP 地址。 对于「代理端口」，输入在桌面 AdGuard 应用程序的网络设置中选择的端口。 "},{"title":"iOS 系统​","type":1,"pageTitle":"如何安装代理证书","url":"guides/proxy-certificate/#ios","content":"记下装有 AdGuard 的台式计算机的 IP 地址。 请确保 AdGuard 保护已启用。 在 Windows 电脑上转到设置中的「网络」，勾选「将 AdGuard 用作 HTTP 代理」。 Mac 用户，请前往「设置」→「首选项」→「网络」并启用「HTTP 代理」。 在装有 AdGuard 的计算机上，通过浏览器访问此链接：http://local.adguard.org/cert。 单击「下载」按钮。 如果下载未开始，请使用另一个浏览器，例如 Firefox 浏览器。 将下载的 cert.cer 文件传输到您想通过 AdGuard 路由流量的 iOS 设备上。 用户还可以使用 USB 电缆，蓝牙或云服务来完成此操作。 在 iOS 设备上，打开「设置」→「已下载的配置文件」，然后点击右上角的「安装」。 输入密码并确认安装。 点击完成。 转到「设置」→ 「常规」→ 「关于」→ 「证书信任设置」。 启用「Adguard Personal CA」旁边的开关。 证书安装成功。 在该设备上，打开连接的 Wi-Fi 网络的高级设置。 将「代理类型」更改为「手动」。 在「代理主机名」请输入在第一步记下的 IP 地址。 对于「代理端口」，输入在桌面 AdGuard 应用程序的网络设置中选择的端口。 "},{"title":"如何报告错误","type":0,"sectionRef":"#","url":"guides/report-bugs/","content":"","keywords":""},{"title":"开始前​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#开始前","content":""},{"title":"什么时候需要报告错误​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#什么时候需要报告错误","content":"检查您是否已有最新的版本，如果还没，我们建议您请先试试升级：该错误可能已经在新版本中得到了解决。 还有请留意这个错误是否还没有被其他用户上报过。 我们建议大家留意处理中和已解决的问题。  "},{"title":"如何描述错误​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#如何描述错误","content":"请您提供尽量多的细节，这将使我们更容易重现该错误，然后着手修复它。 因此，请大家在上报错误时参考以下模版： 应用程序版本操作系统版本发现问题的时间在您发现问题前，您进行什么操作或应用程序执行什么操作。 请重现操作步骤问题是否重复发生，发生频率如何您是否开启 VPN 或防病毒软件 "},{"title":"如何收集日志记录​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#如何收集日志记录","content":"请在描述相应操作系统的文章上了解如何收集日志记录。 "},{"title":"为错误报告或功能请求投票​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#为错误报告或功能请求投票","content":"如您想添加新功能或尽快修复某一个错误，用户可以在 GitHub 上投票。 要留下您的反馈，发送某一个表情即可。   您可以在问题的右上角或底部找到表情反应。 "},{"title":"用于不同操作系统的说明​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#用于不同操作系统的说明","content":""},{"title":"AdGuard Windows版​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-windows版","content":"请查看 Windows 存储库以确保尚未报告该问题。 打开创建新问题的页面并选择「错误报告」。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。  "},{"title":"AdGuard Mac版​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-mac版","content":"请查看 Mac 存储库以确保尚未报告该问题。 打开创建新问题的页面。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。 "},{"title":"AdGuard Android版​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-android版","content":"请查看 Android 存储库以确保尚未报告该问题。 打开创建新问题的页面并选择「错误报告」。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。 "},{"title":"AdGuard iOS版​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-ios版","content":"请查看 iOS 存储库以确保尚未报告该问题。 打开创建新问题的页面并选择「错误报告」。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。 "},{"title":"AdGuard 浏览器扩展​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-浏览器扩展","content":"请查看浏览器扩展存储库以确保尚未报告该问题。 打开创建新问题的页面并选择「错误报告」。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。 "},{"title":"AdGuard Safari版​","type":1,"pageTitle":"如何报告错误","url":"guides/report-bugs/#adguard-safari版","content":"请查看 Safari 存储库以确保尚未报告该问题。 打开创建新问题的页面并选择「错误报告」。 填写表格。 如果可以，请插入屏幕截图或屏幕视频。 "},{"title":"如何报告网站和应用程序错误","type":0,"sectionRef":"#","url":"guides/report-website/","content":"","keywords":""},{"title":"报告网站​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#report","content":"注意 在您通过本应用或 AdGuard 浏览器助手发送投诉时，所有信息是自动预先填写的。 除了屏幕截图，您还必须自己制作并附加它们。 如果您使用的是此链接，则需要手动输入数据。 要报告广告已重新插入或网站显示不正确，您需要： "},{"title":"浏览器扩展​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#extension","content":"点击相应图标打开浏览器扩展设置；点击「报告问题」：  填写举报表格后，将自动在 GitHub 上创建一个问题。 也将有一个链接让用户监视解决问题的进度。 "},{"title":"Windows 系统​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#windows","content":"打开 AdGuard 浏览器助手，点击「报告问题」：  填写举报表格；完成后，将自动在 GitHub 上创建一个问题。 也将有一个链接让用户监视解决问题的进度。 "},{"title":"Android 系统​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#android","content":"打开 AdGuard 设置；选择支持，然后点击报告错误拦截：  填写举报表格后，将自动在 GitHub 上创建一个问题。 也将有一个链接让用户监视解决问题的进度。 "},{"title":"Mac 系统​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#mac","content":"打开 AdGuard 浏览器助手并点击「报告问题」：  填写举报表格；完成后，将自动在 GitHub 上创建一个问题。 也将有一个链接让用户监视解决问题的进度。 "},{"title":"iOS 系统​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#ios","content":"打开 AdGuard 设置；选择支持，然后点击报告错误拦截：  填写举报表格；完成后，将自动在 GitHub 上创建一个问题。 也将有一个链接让用户监视解决问题的进度。 "},{"title":"填写表格​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#form","content":"注意 在用户通过本应用或 AdGuard 助手发送投诉时，所有信息都是自动预填写的。 除了屏幕截图，您还必须自己制作并附加它们。 如果您使用的是此链接，则需要手动输入数据。 在表单内填写产品的详细类型和版本； 指定问题类型以及使用的第三方软件之附加信息（反病毒软件，VPN）； 输入您遇到问题的页面地址和浏览器（或如是应用，则提供下载链接）； 须指定应用程序配置： 您使用的过滤器；如隐身模式已开启，则指定其设置。 提供捕获问题的屏幕截图； 重要：请隐藏个人信息（电子邮件地址，电话号码等），因为屏幕截图将公开显示。 提供额外信息以帮助过滤器开发人员了解情况； 如可用，您也可输入 GitHub 账号（这对于开发人员联系您以了解额外详细信息是必需的）； 发送表单前检查每个步骤； 您将获得一个链接以查看任务进度。 "},{"title":"问题诊断​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#issue","content":"此选项适用于那些不怕困难并且不介意自行寻找问题的人。 这不需要任何特殊技能或对 HTML 和 CSS 深入了解。 例如，您面临着您喜爱的网站无法打开、授权中断或某些页面元素显示不正确的情况。 原因可能是使用特定的过滤器/扩展/隐身模式设置。 要诊断这些问题，您需要执行以下操作： "},{"title":"过滤器​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#过滤器","content":"禁用广告拦截程序；如果解决了问题，请重新开启模块并逐个禁用过滤器。 这样做是为了识别“破坏”页面的过滤器。如果您设法找出“破坏”页面的过滤器，则应在填写表单时通知开发人员（请参见上文）。 在此种情况下，最好返回到初始设置；如果关闭所有过滤器均未产生任何结果，则应用规则 @@||example.com^$document,extension； 其中 example.com 是示例网站名称，需要用您自己的选项替换；在失败的情况下（问题未能解决），请转到隐身模式部分。 "},{"title":"隐身模式​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#隐身模式","content":"禁用隐身模式；如果问题解决，请打开此模块并逐个关闭隐身模式内的各选项。 这样做是为了检测出“破坏”页面的过滤器；如果您设法找出“破坏”页面的过滤器，请在填写表单时通知开发人员（请参见上文）。 在此种情况下，最好返回到初始设置；如果失败（问题未解决），请参阅扩展部分。 "},{"title":"浏览器扩展​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#浏览器扩展","content":"禁用扩展；如果问题解决，则请打开此模块并逐个关闭扩展内的各设置。 这样做是为了找出“破坏”页面的设置；如果您设法找出“破坏”页面的设置，则应在填写表单时通知开发人员（请参见上文）。 在此种情况下，最好返回到初始设置。 "},{"title":"第三方拦截器​","type":1,"pageTitle":"如何报告网站和应用程序错误","url":"guides/report-website/#第三方拦截器","content":"某些浏览器和防病毒程序（例如 Yandex 浏览器，卡巴斯基等）具有内置的广告拦截器。 它们可能会影响并引起网站运行发生问题。 如果用户在使用此类程序，请首先确定问题是由AdGuard 引起的：禁用 AdGuard 过滤并尝试重现问题。 如果问题仍存在，则表示问题是由其他应用程序或浏览器引起的。 如问题是由 AdGuard 引起的，则请按照前面段落中描述的步骤进行操作。 "},{"title":"如何进行屏幕截图","type":0,"sectionRef":"#","url":"guides/take-screenshot/","content":"","keywords":""},{"title":"Android 系统​","type":1,"pageTitle":"如何进行屏幕截图","url":"guides/take-screenshot/#android","content":"一台 Android 手机设备上可以通过多种方式截图，这依赖于其设备型号及其开发商。 大部分情况下，组合按键被应用于 Android 且支持屏幕截图。 同时按住下音量键和开关机键 您的安卓设备将捕获整个屏幕并将其保存为照片。 您可以在「相册」的「截屏」文件夹中找到该屏幕快照。 对于较早的设备而言，用户可能需要使用到这些组合按键来进行屏幕截图： 同时按住主页键 和开关机键同时按住返回键 和主页键 包括 Android 8 在内的更高版本的 Android 手机中，用户还可以通过其它组合操作进行屏幕截图，例如，用手以90°角在屏幕上滑动来触发屏幕截图（Samsung 设备），或用三根手指向下滑动（OnePlus 设备）等。 屏幕截图的操作因 Android 手机品牌和型号而异。 查看您手机设备中的设置并找到最适合您的方式进行屏幕截图。 此外，用户总可以随时使用任何特殊的应用程序在手机设备上进行屏幕截图，例如 Screenshot Easy、Screenshot Ultimate、Screenshot Snap，等等。 "},{"title":"iOS 系统​","type":1,"pageTitle":"如何进行屏幕截图","url":"guides/take-screenshot/#ios","content":"任何 iOS 设备 (早期设备除外) 都能让用户使用标准工具来进行屏幕截图的操作。 要在 iOS 设备上截图，请使用以下组合： 同时按下睡眠/唤醒（侧）按钮和主页按钮，然后快速松开它们 而下面的方法适用于 iPhone X 或更高版本： 同时按下睡眠/唤醒按钮和增大音量按钮，然后迅速松开它们 您的 iOS 设备将捕获整个屏幕，并将其另存为照片。 您可以在照片应用中找到它。 "},{"title":"Windows 系统​","type":1,"pageTitle":"如何进行屏幕截图","url":"guides/take-screenshot/#windows","content":"在 Windows 电脑上进行屏幕截图操作，可以按下 PrtScn 键 在某些笔记本电脑上，您要按住 Fn，然后再按 PrtScn。 请注意：PrtScn（Print Screen）键可能在不同的计算机键盘上有不同的缩写：PrntScrn、PrtScn、PrtScr，或 PrtSc。 Windows 可以截取整个屏幕并将截图复制到剪贴板。 要获取活动窗口的屏幕截图，请使用以下组合： 同时按住 Alt 和 PrtScn (或在某些笔记本电脑上按 Fn + Alt + PrtScn ) 要获取活动窗口的屏幕截图，请使用以下组合： 按住 Win + Shift + S** 截屏后，它将保存在剪贴板中。 在大多数情况下，用户可以使用 Ctrl + V 按钮组合将其粘贴到当前正在编辑的文档中。 另外，如果您需要将屏幕截图保存到文件中，则应打开标准的 Paint 程序（或任何其他可以处理图像的应用程序）。 使用相同的按钮组合或单击「粘贴」按钮（通常在屏幕的左上角）将您的屏幕截图粘贴到那里，然后将其保存。 在 Windows 8 和 10 上可以通过 Win + PrtScn 组合快速捕获屏幕截图。 按下这些按钮后，屏幕快照将自动作为文件保存到图片 → 屏幕截图文件夹中。 还有一个专用的屏幕截图程序，称为 Snipping Tool (自带截图工具) ，可通过开始菜单在计算机的标准程序中找到。 该截图工具使您可以捕获桌面的任何区域或整个屏幕。 使用此程序拍摄屏幕快照后，您可以编辑图片并将其保存到计算机上的任何文件夹中。 此外，您还可以尝试使用其他应用在计算机上截图，例如 PicPick、Nimbus Screenshot、Screenshot Captor、Snipaste、Monosnap 等。 "},{"title":"macOS 系统​","type":1,"pageTitle":"如何进行屏幕截图","url":"guides/take-screenshot/#mac","content":"要获取活动窗口的屏幕截图，请使用以下组合： 同时按住 ⌘Cmd + Shift + 3** Mac 会捕获整个屏幕，并将其另存为在桌面上的文件。 要获取活动窗口的屏幕截图，请使用以下组合： 同时按住 ⌘Cmd + Shift + 4 + 空格键。 指针将变为相机图标。 单击窗口以捕获它。 按 Esc 按钮取消截屏 要获取活动窗口的屏幕截图，请使用以下组合： 按 ⌘ Cmd + Shift + 5**。 拖动十字准线以选择所需的区域。 释放鼠标或触控板以截取屏幕截图。然后按 Esc 按钮将其取消。 要获取 Touch Bar（MacBook Pro）的截图，请使用以下组合： 按住 Win + Shift + S** 您的 Mac 会捕获整个 Touch Bar，并在桌面上另存为文件。 若您想将屏幕截图复制到剪贴板而不是保存到剪贴板，请同时按住 Ctrl 和上面的任意组合。 然后，您可以使用 Cmd + V 组合将屏幕截图（从剪贴板）粘贴到您当前正在编辑的文档或图像中。 您还可以通过使用预览并选择截图（获取所选区域，窗口或整个屏幕的）来截屏。 使用预览时，您可以将屏幕截图保存为 JPG、TIFF、PDF 等文件格式。 "},{"title":"致谢","type":0,"sectionRef":"#","url":"miscellaneous/acknowledgements/","content":"","keywords":""},{"title":"第三方软件​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#software","content":"帮我们开发 AdGuard 软件的文库、开源软件和其他资源的列表： "},{"title":"AdGuard Windows版​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#win","content":"SQLLite database engine: sqlite.orgADO.NET provider for SQLite: system.data.sqlite.org/index.html/doc/trunk/www/index.wikiJson.NET — high-performance JSON framework for .NET: www.newtonsoft.com/jsonAvalonEdit — WPF-based text editor component: avalonedit.net "},{"title":"AdGuard Mac版​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#mac","content":"用于 RSVerticallyCenteredTextFieldCell 组件的 Red Sweater Software, LLC： http://www.red-sweater.com/blog/148/what-a-difference-a-cell-makesIlija Tovilo for ITProgressIndicator component: github.com/iluuu1994/ITProgressIndicatorSparkle.framework 组件的 Sparkle 项目： http://sparkle-project.orgRobbie Hanson for GCDAsyncSocket component: github.com/robbiehanson/CocoaAsyncSocketTony Million for Reachability component: github.com/tonymillion/ReachabilityAugust «Gus» Mueller for Fmdb component: github.com/ccgus/fmdbStephen F. Booth for SFBCrashReporter project: github.com/sbooth/SFBCrashReporterBartosz Janda for Acextract component: github.com/bartoszj/acextractFLOPageViewController: github.com/floschliep/FLOPageViewController "},{"title":"AdGuard 安卓版​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#android","content":"Logback-android by Tony19: tony19.github.io/logback-androidOtto by Square: http://square.github.io/ottoRootTools Library by Stericson: github.com/Stericson/RootToolsMaterialDateRangePicker by Supratim Chakraborty: github.com/borax12/MaterialDateRangePickerHelloCharts by Leszek Wach: github.com/lecho/hellocharts-android "},{"title":"AdGuard iOS版​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#ios","content":"Reachability component by Tony Million: github.com/tonymillion/ReachabilityFmdb component by August «Gus» Mueller: github.com/ccgus/fmdbNSStringPunycodeAdditions component by Nate Weaver: github.com/Wevah/Punycode-CocoaMinizip-ng library by Nathan Moinvaziri: github.com/zlib-ng/minizip-ngLottie for iOS library by Brandon Withrow: github.com/airbnb/lottie-ios "},{"title":"AdGuard 浏览器扩展​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#extension","content":"SHA256: github.com/AndersLindman/SHA256D3: github.com/d3/d3c3: github.com/c3js/c3nanobar: github.com/jacoborus/nanobarcrypto-js: github.com/brix/crypto-jsace: github.com/ajaxorg/acelodash: github.com/lodash/lodashmobx: github.com/mobxjs/mobxxstate: github.com/statelyai/xstatepunycode: github.com/mathiasbynens/punycode.jsjs-lru: github.com/rsms/js-lrutldts: github.com/remusao/tldtszod: github.com/colinhacks/zodswc: github.com/swc-project/swc "},{"title":"适用于 Safari 的 AdGuard 应用​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#safari","content":"ace: github.com/ajaxorg/aceadm-zip: github.com/cthackers/adm-zipconfig: github.com/lorenwest/node-configelectron-debug: github.com/sindresorhus/electron-debugelectron-log: github.com/megahertz/electron-logelectron-remote: github.com/electron-userland/electron-remoteelectron-simple-updater: github.com/megahertz/electron-simple-updaterelectron-store: github.com/sindresorhus/electron-storeelectron-updater: github.com/electron-userland/electron-builderi18n: github.com/mashpie/i18n-noderequest-promise: github.com/request/request-promisexmlhttprequest: github.com/driverdan/node-XMLHttpRequestaxios: github.com/axios/axiosdevtron: github.com/electron-userland/devtronelectron: github.com/electron/electronelectron-osx-sign: github.com/electron/electron-osx-signelectron-rebuild: github.com/electron/electron-rebuildfind-in-files: github.com/kaesetoast/find-in-filesgulp: github.com/gulpjs/gulpgulp-hash-creator: github.com/wahaha2012/gulp-hash-creatorrequest: github.com/request/requestrequire-dir: github.com/aseemk/requireDir "},{"title":"AdGuard 浏览器助手​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#assistant","content":"React: github.com/facebook/reactwebextension-polyfill: github.com/mozilla/webextension-polyfillreact-intl: github.com/formatjs/formatjs/tree/main/packages/react-intlmobx: github.com/mobxjs/mobxmobx-react: github.com/mobxjs/mobx-reactlodash: github.com/lodash/lodashnanoid: github.com/ai/nanoidreact-modal: github.com/reactjs/react-modalclassnames: github.com/JedWatson/classnamesbabel: github.com/babel/babelaxios: github.com/axios/axioscrx: github.com/oncletom/crxeslint: github.com/eslint/eslintjest: github.com/facebook/jestpostcss: github.com/postcss/postcssweb-ext: github.com/mozilla/web-extwebpack: github.com/webpack/webpack "},{"title":"CoreLibs​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#corelibs","content":"BoringSSL: github.com/google/boringssl/blob/master/LICENSEbrotli: github.com/google/brotli/blob/master/LICENSEChromium: github.com/chromium/chromium/blob/master/LICENSEDetours: github.com/microsoft/Detours/blob/main/LICENSE.mdeDistantObject: github.com/google/eDistantObject/blob/master/LICENSEFF/FFOS libs by Simon Zolin: github.com/stsaz/ffbase/blob/master/README.mdGoogle test: github.com/google/googletest/blob/master/LICENSEhttp-parser: github.com/nodejs/http-parser/blob/master/LICENSE-MITjsmn: github.com/zserge/jsmn/blob/master/LICENSEklib: github.com/attractivechaos/klib/blob/master/khash.hlibevent: github.com/libevent/libevent/blob/master/LICENSELibreSSL: github.com/libressl-portable/openbsd/blob/master/src/lib/libssl/LICENSElwIP: lwip.wikia.com/wiki/Licenseminiz: github.com/richgel999/miniz/blob/master/LICENSEnghttp2: github.com/nghttp2/nghttp2/blob/master/COPYINGPCRE2: www.pcre.org/licence.txtSQLite: www.sqlite.org/copyright.htmlzlib: zlib.net/zlib_license.html "},{"title":"特别感谢​","type":1,"pageTitle":"致谢","url":"miscellaneous/acknowledgements/#testers","content":"热烈感谢所有 beta 测试人员和其他参与的用户，TA 们在查找/解决所有错误、翻译 AdGuard 和管理我们的社区方面的帮助是无价的。 特别感谢： ag_bug_finder — Windows版 AdGuard 的测试者Aikatsui — AdGuard Home 的积极贡献者Andy Kleinert (AndyKl) — Crowdin 的德语翻译和 ProofreaderBigDargon — 将 hostsVN 项目作为一个来源贡献给了 AdGuard DNS 列表Blaz — 最初是过滤器贡献者，现在在 AdGuard 工作Boo Berry — Telegram group moderatorbuuuuuuu190 — beta testerclarke — beta testerdartrax — beta testerdja2k — beta testerEduardo Addad de Oliveira (eduardoaddad) — 在 Crowdin 上葡萄牙语和巴西葡萄牙语的翻译和审核员fabjazz — beta testerGörkem Emrah Güler (gork7777) — Crowdin 的土耳其语翻译和审核员hanschke — beta testeriDjay — AdGuard iOS版的优秀 beta 测试人员Imre Kristoffer Eilertsen (DandelionSprout) — 包含在所有 AdGuard 工具中的 &quot;Dandelion Sprout’s Nordic Filters&quot; 的创造者IONIL — Crowdin 上的希伯来语翻译和审核员itabmedia — beta testerkirasam — beta testerkrystian3w — 非常活跃的过滤器贡献者lancelot.moon — Crowdin 繁体中文的翻译和审核员，beta 测试员Lord Ami — beta testerLukas Novotny (novas78) — 在 Crowdin 上捷克语的翻译和审核员malware1 — beta testermilder — beta testerNicos18 — beta testerOizaro — Crowdin 的意大利语翻译和审核员Oleg Chashko — AdGuard Safari版的非常活跃 beta 测试人员Oskari Lavinto (olavinto) — Crowdin 的芬兰语翻译和审核员ouzbed — beta testerPentagramTr — 过滤器贡献者，即他为土耳其过滤器带来了很多改进Peter Hubinsky (hubak) — Crowdin 的斯洛伐克语翻译和审核员PiQuark6046 — 过滤器贡献者rickyoh — beta testerRonin427 — beta testerSanjay Nand — beta testersaturnotaku — beta testersteve1209 — beta testerstreetwolf — beta testersuperlex — 帮助我们测试 Safari 的小脚本、过滤器和 AdGuardTayTayTheKiller — beta testerTPS — 错误测试者、过滤器贡献者Yuki2718 — 积极为 AdGuard 过滤器做出贡献zznosar — 活跃的 beta 测试人员，专注于 iOS 的 AdGuardSergey Zozulya (sviperz) — 我们 Telegram 群的活跃成员，beta 测试员  除此之外，我们想感谢 xda-developers 的用户。 非常感谢您向我们发送反馈意见！ 我们总是很感谢收到用户的反馈意见，特别是建设性的。 大家能随时随地与我们联系，请求改善 AdGuard、新增功能，以及提交错误报告。 Join the AdGuard Subreddit, Xda-developers Forum or visit our page on GitHub. "},{"title":"AdGuard Beta 测试版测试","type":0,"sectionRef":"#","url":"miscellaneous/contribute/beta-testing/","content":"","keywords":""},{"title":"如何成为 Beta 版测试者​","type":1,"pageTitle":"AdGuard Beta 测试版测试","url":"miscellaneous/contribute/beta-testing/#intro","content":"我们对 Beta 测试者的要求很简单：使用 AdGuard，随时升级到 Beta 测试版，并报告您发现的错误。 However, you will need a GitHub account to become our beta tester, so you may want to get that out of the way first. In any case, every single thing you need to know is gathered on a dedicated page. 如果您想跳过描述部分，直接进入行动阶段，您可以在这里申请。 你的申请将在1-3个工作日内得到审查，我们将电子邮件回复。 "},{"title":"如何报告错误​","type":1,"pageTitle":"AdGuard Beta 测试版测试","url":"miscellaneous/contribute/beta-testing/#report-a-bug","content":"If you spotted a bug or just want to share your suggestion, let us know: go to GitHub, find a suitable repository, create a new issue there, and describe the bug/feature request in detail. The above method is the most preferred, but you can use others if necessary: 在各种社交媒体平台上找到我们，例如 Facebook、Reddit 等等。 然而，这并不是讨论技术问题的最有效方式。 从应用程序中的「支持」选项以向我们的支持团队发送电子邮件，或通过 support@adguard.com 电子邮件联系我们。 "},{"title":"如何在 iOS 版的应用程序上激活 Beta 测试版密钥​","type":1,"pageTitle":"AdGuard Beta 测试版测试","url":"miscellaneous/contribute/beta-testing/#ios","content":"如果您已经收到测试版的密钥，并且有许可证密钥列出在 adguard.com 账号中，请进入应用程序并打开许可证部分（「获取高级版」）。 在相应的部分，请输入您的 AdGuard 账号的登录信息。 然后，高级版本的功能将自动可用。 "},{"title":"还有什么？​","type":1,"pageTitle":"AdGuard Beta 测试版测试","url":"miscellaneous/contribute/beta-testing/#还有什么","content":"基本上，我们没有什么要补充的。 您不要勉强自己去找错误。 像往常一样，您可以继续享受 AdGuard 使用体验。 然而，如果您遇到一个错误，请向我们发送报告。 Of course, we appreciate any additional effort. 有时，您会收到我们的新闻简报，让您了解测试版的最新改进（以防您错过）和其他重要消息。 您可以随时取消订阅。 "},{"title":"对 AdGuard 过滤器做出贡献","type":0,"sectionRef":"#","url":"miscellaneous/contribute/filters/","content":"","keywords":""},{"title":"过滤规则​","type":1,"pageTitle":"对 AdGuard 过滤器做出贡献","url":"miscellaneous/contribute/filters/#filtering-rules","content":"可能众所周知，AdGuard 使用过滤规则拦截广告。这些规则被组合成不同主题的拦截过滤器，例如，AdGuard 基础过滤器，移动广告过滤器等等。本知识库的文章内容包括更多关于，如何拦截广告的信息。 许多网站会不断更改插入广告的方式。为了过滤器保持有效，我们要持续更新过滤器以及添加新规则。 过滤器工程师一直都在努力创建新规则，但是我们也非常愿意接受一些外界的帮助。 "},{"title":"如何开始​","type":1,"pageTitle":"对 AdGuard 过滤器做出贡献","url":"miscellaneous/contribute/filters/#how-to-start","content":"当然，改进并创建拦截过滤器需要有特定的技能。 如果您已经了解如何创建规则，请直接访问我们在 GitHub 上的 AdGuard 过滤器存储库。 在那里，您可发现很多待解决的问题。每个问题都涉及某个网站上的问题，包括广告漏洞，错误报告等等。 选择任何一个问题并在注释中建议您个人的规则， AdGuard 过滤器工程师将审核您的建议。 如果正确，则您的规则会被添加到 AdGuard 过滤器中。 If you are not yet familiar with our filtering rule syntax, or maybe need a refresher, you'll find the basics about the syntax in our Knowledge base. "},{"title":"奖励​","type":1,"pageTitle":"对 AdGuard 过滤器做出贡献","url":"miscellaneous/contribute/filters/#rewards","content":"假设您已经提出了一些过滤规则，且其中一些还被批准通过了，您可以获取奖励了。 使用您的 GitHub 账号向 st@adguard.com 上给我们发送消息，即可获取免费的 AdGuard 许可密钥。 我们并没有硬性规定，至少需要获得多少个规则批准才能获得免费许可。 不过考虑到这个任务的难度系数，大约五个被批准的规则就足够了。 "},{"title":"如何成为翻译员/审核员","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/become-translator/","content":"","keywords":""},{"title":"如何成为审核员​","type":1,"pageTitle":"如何成为翻译员/审核员","url":"miscellaneous/contribute/translate/become-translator/#proofreaders","content":"每一个语言都有审核员（Proofreaders），之前叫版主（Moderator）。 每个活跃的翻译人员都可以成为一名审核员。 TA 们负责什么？ 审核员： 审核并留下高质量的翻译，拒绝不好的翻译； 注意翻译的关联性； 参加注释中的讨论。 Every year, the best proofreaders receive gifts from AdGuard. 积极的翻译者也不会没有回报。 阅读更多关于我们的奖励机制。 "},{"title":"复数形式","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/plural-forms/","content":"","keywords":""},{"title":"复数形式是什么意思？​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#plurals","content":"不同语言的名词可以有几种复数形式。 它们的用法取决于单词前面的特定数字，以指示该单词表示的数目。 For instance, English words have two word forms when speaking about something in the singular, like 'one star', and in the plural — 'two stars'. It doesn’t matter if you say five, twenty six or even five hundred thirty two stars — the ending 's' will remain the same. 但是有些语言只有一种形式，反之，有些语言也可以有更多种复数形式。 与英语相比，波兰语里的名词具有三种复数形式。 One of them is used when speaking about something in the singular, another form is used in the plural but with numbers ending in 2–4, excluding 12–14, and the third form — for words with other numbers in front of them. Let’s take a look at this picture. 在这里，可以看到一组数字。按这些数字要选择数字后面的单词形式。  我们来在英语和波兰语之间做个小比较，以便更好理解：  英文版： 波兰语等效： 1. form — It takes one hour. 1. form — Zajmuje to godzinę. 2. form — It takes two hours. 2. form — Zajmuje to dwie godziny. 3. form — It takes five hours. 3. form — Zajmuje to pięć godzin.  现在很明显的是，波兰语 'godzinę'（小时）具有三种不同的形式，而英语单词仅更改两次单词形式。 除波兰语之外，世界上还有许多其他具有三种复数形式的语言，包括俄语，塞尔维亚语，斯洛伐克语，捷克语等语言。 但并非所有语言都遵循相同语法规则。 That's why it's so important to know how many plurals your language has, and how to use them correctly. "},{"title":"在哪里可以了解复数形式的变体数量？​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#where-to-learn","content":"当您需要使用复数形式的翻译时，您很可能无法立即意识到某些语言的单词形式的数量。 以下是您可以使用的一些信息来源。 本地化指南 包含广泛的语言列表。 The number of plural forms for different languages is shown this way: nplurals=2, nplurals=4 and so on. The numeral after the Equals sign = means the number of plural forms of the respective language. 此外，您还可以在 Unicode 通用语言环境数据存储库（CLDR）中获取有关复数形式的相关信息。 CLDR 复数规则，即指十进制数字（1.5; 2.3; 100.1…）的其他词形式。但在 AdGuard 翻译中我们不使用它们。 "},{"title":"AdGuard 翻译中的复数形式​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#translations","content":"首先，您得明白并非每个 AdGuard 译文都需要使用复数形式。 当前，我们在 Crowdin 上有四种使用复数形式字符串的类型。 我们来仔细看看它们。 "},{"title":"1. 带有 .singular、.dual、.plural 作为结尾的字符串键的短语​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#1type","content":" 其中大多数属于 AdGuard for Windows 项目中，仅包含一两个单词： days；extensions；hours 请注意字符串键，在 &quot;Context&quot; 字段中您会看到一些关于复数形式的重要注解。 字符串键可能包含 Singular、 Dual、 Plural 单词（例如FormatDayDeclensionDual）。 在这种情况下，您应该保留键中指定的适当复数形式。 "},{"title":"2. 单数和复数名词字符串以逗号分隔​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#2type","content":"这种字符串主要在 AdGuard for Android 项目中。 请看示例：  如果您的语言名词具有三种复数形式（正如波兰语)，请用逗号分隔每一个复数形式。 hour, hours — godzinę, godziny, godzin 如果一个名词只有两种形式，则无需重复写同一形式（通常仅适用于这种带有复数形式的字符串！）。 但是，如果您把同一个形式重写两次也不会出错。 "},{"title":"3. 使用 Crowdin 发展模式的字符串​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#3type","content":"这是进行复数字符串翻译的最佳用户友好的方案。 Crowdin 为用户提供翻译一定数量具有不同复数形式的短语的功能。 如果您的语言仅有一种复数形式，则您只会看到一个要翻译的短语。 如果语言具有三种形式，Crowdin 将为您提供被分出另外两到三部分的字符串进行翻译。 例如：  在翻译和批准这些字符串时，请注意一下， 如果您不知道 “Other” 字段的含义，则只需粘贴与 “ Many” 字段中相同的表单即可。 “Many” 和 “Other” 字段的内容可以相同。 "},{"title":"4. 带有用竖线分隔模板的字符串​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#4type","content":"This is the most complicated type of AdGuard strings which is mostly used in the AdGuard Websites project. Pay close attention to a vertical bar sign between the sentences and %count% placeholders in original phrases — this will help you identify phrases where translations require the use of plural forms.  现在，我们来想象一下。您将面临这样的短语：&quot;Standard license for %count% computer | Standard license for %count% computers&quot;。 您应该知道哪些信息才能正确翻译它？ 这些用竖线符号的句子称为“ templates”，因为它们被用作具有不同数字的短语的模板。 回到示例，由于英语仅包含两种复数形式，因此应分别有两个模板： Standard license for *%count%* computer | Standard license for *%count%* computers where template 1 is Standard license for %count% computer, and template 2 is Standard license for %count% computers 您应注意的另一重要事项是 ％count％ 占位符，通常在其定义的单词前出现。 根据选择的模板，此处将显示不同的数字，而不是 ％count％ 。 在另一种语言具有三种复数形式的情况下，应该有三个模板，即两个竖线符号。 例如，当我们将上面提到的短语翻译成斯洛伐克语时，根据 Localization Guide 的规则，它具有三种词形，正确的翻译应该是这样的： **Štandartná licencia pre *%count%* počítač | Štandartná licencia pre *%count%* počítače | Štandartná licencia pre *%count%* počítačov**  在这种情况下，我们看到三个模板，其中包含斯洛伐克语中单词 &quot;počítač&quot; （计算机）的三种形式。 如果我们忽略其中一种形式，而只为斯洛伐克语使用两个，而不是三个模板，则系统将无法为某些数字采用适当的模板。结果是，句子中将出现语法错误，例如英语：Standard license for 5 computer（正确应是：Standard license for 5 computers）。 Always use as many forms as there are in your language, even when the word itself has fewer word forms. 例如，塞尔维亚单词 'računar'（计算机（computer））只有两种形式。 但是塞尔维亚语有 3 种复数形式。  因此，英语翻译成塞尔维亚语是： **Standardna licenca za *%count%* računar | Standardna licenca za *%count%* računara | Standardna licenca za *%count%* računara** 尽管很明显，最后两个模板没有区别，但保持规则非常重要：模板的数量应反映相应语言的复数形式 (通常针对这种带复数的字符串)。 "},{"title":"简短的摘要​","type":1,"pageTitle":"复数形式","url":"miscellaneous/contribute/translate/plural-forms/#summury","content":"在翻译 AdGuard 项目时，请密切注意需要使用复数形式的短语。 尽管前三种类型的字符串或多或少容易执行，但第四类要求更高的警惕性。 重申一次：如果您遇到包含两个重要元素的原始词组：竖线符号和 ％count％ 占位符，请执行以下操作： 指翻译成一种语言的复数规则； The number of your templates should be consistent with the number of plural forms your language includes, even in cases some words have fewer forms themselves. Two plural forms — two templates in translations; five plural forms — five templates, etc. 不要忘记在模板之间使用竖线符号； 请勿翻译，填写或删除 ％count％ 占位符。 By following these simple rules you will help AdGuard developers avoid a lot of unnecessary complications during the localization process. "},{"title":"AdGuard 翻译","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/program/","content":"AdGuard 翻译 免责声明：欢迎您通过给我们发邮件的方式：translate@adguard.com 询问任何与 AdGuard 翻译相关的问题，或您也可以加入我们的 Telegram 群。 说到翻译，我们 AdGuard 非常依赖志愿者们的无私奉献。 现在我们使用 Crowdin 平台来管理我们产品的翻译。 所以，所有想通过翻译任何喜欢的产品对 AdGuard 做贡献的志愿者们请移步 Crowdin 平台。 如您想加入 AdGuard 的翻译员大家族，请阅读信息以了解更多关于如何成为 AdGuard 翻译员，以及我们双方合作方式的详情。","keywords":""},{"title":"奖励系统","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/rewards/","content":"","keywords":""},{"title":"Here’s how our reward system works​","type":1,"pageTitle":"奖励系统","url":"miscellaneous/contribute/translate/rewards/#heres-how-our-reward-system-works","content":"翻译 500 个字后，可以获取 AdGuard 一年许可证； 翻译 1,000 字（总共 1,500 字）后，可以获取第二个许可证； 往后，每个许可证都对应1500 字的翻译。 翻译 2,500 个字后，可以得到 AdGuard VPN 一年许可证； 所有后续的订阅或续订也都为 2500 字。  Just send us a request to translate@adguard.com and you’ll get the license as a token of our gratitude. Besides, the most active translators may receive proofreader status in the future, should they express such an intention, and that promises even more good stuff. Every year we present gifts with the AdGuard logo to our active proofreaders. If you want to become one of them, please write to translate@adguard.com. "},{"title":"指导与建议","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/guidelines/","content":"指导与建议 在您开始翻译前，我们想要让您了解一些内容。 这样您不仅可以节省您的时间与精力，而且也能保证您翻译的句子与我们的本意更相近。 一旦您在 Crowdin 上打开我们的页面，选择您需要的任何项目并选择您的语言。 即使在打开某一个软件文件夹后，您也能切换语言。 选择任何可用的软件文件夹并选择一个文件，现在您可以开始翻译了。 注意 You can also change the Crowdin interface language by clicking the Settings icon in the top right corner of the page. 在打开的窗口中向下滚动到「UI language」标签。 打开它，选择一种语言，然后点击「Change」。 以下指南将帮助您多了解翻译的过程。 You can filter translations by clicking this button and selecting any offered option. Easily move between the files of the project. Pay attention to the glossary terms highlighted with a dotted line in a source phrase. Usually, they are special words (like brand names) that should not be translated. You can suggest your translation for translatable terms in the AdGuard Glossary project. In Crowdin, strings can have notes that make it easier to understand and translate phrases. Look for them in the &quot;Context&quot; field of the source string. Note that source strings may also have screenshots in the Context section. They help to understand the context and convey the exact meaning. 提示 You can request context by clicking the &quot;REQUEST&quot; button. ::: ![crowdin *border](https://cdn.adtidy.org/public/Adguard/kb/en/ag-translations/request.png) In addition to suggesting new translations, you can also leave comments on strings. Use comments to let us know about mistakes in the source text or existing translations, make notes, or ask questions. If you see a comment left on your translation — try to respond to it. There's also a Discussions tab on the main project page that conveniently allows you to see all the comments for the specific language in this project. Crowdin provides a very useful and convenient tool called Translation Memory. With its help, you can find the previously made translations of the same words and phrases and reuse them in your translations. Once you join a project by clicking the &quot;Join&quot; button, you will see the Tasks tab on the project page, where the tasks for specific project files get created. Please pay attention to them: they usually have a higher priority. Sometimes you can find phrases with plural forms. Please be especially attentive when translating such phrases. You can read how to translate plural forms here. Using proper plural forms is extremely important: please ask us in the comments if anything is unclear. Please do not write directly to the project managers and proofreaders listed in the Project info. If you have questions about translations, you can always ask our proofreaders or admins through comments. Also, you can send an email to translate@adguard.com or ask a question in the Telegram chat. The Admins will answer you as soon as possible.","keywords":""},{"title":"撰写 AdGuard 相关文章","type":0,"sectionRef":"#","url":"miscellaneous/contribute/writing-about-adguard/","content":"撰写 AdGuard 相关文章 If you like AdGuard and want to spread the word and share your thoughts about it on social media or on a personal blog or website, this article may interest you. After sharing your experience, email pr@adguard.com and include a link to your post. The authors of the most well-written reviews will receive a free AdGuard license key. It doesn't matter if your website's audience is small or large; we value every effort. Please note that your review should be around 300 to 500 words. If you are planning to make a video about AdGuard or do anything else offbeat, please let us know in advance to avoid any possible misunderstandings. The same applies if your plan includes the use of the AdGuard logo, banners, or other visual elements. The contact email address remains the same: pr@adguard.com.","keywords":""},{"title":"更新知识库","type":0,"sectionRef":"#","url":"miscellaneous/contribute/updating-knowledge-base/","content":"","keywords":""},{"title":"如何建议更改或写新文章​","type":1,"pageTitle":"更新知识库","url":"miscellaneous/contribute/updating-knowledge-base/#suggest-change","content":"您可以使用上述 GitHub 的功能建议对当前文章进行更改并将新文章添加到知识库。 如果您不熟悉该平台的使用方法，请先阅读 GitHub 的文档。 准备就绪后，在知识库处理。 我们知识库中的所有文本都是用 Markdown 标记语言编写的。 在编辑或撰写文章时，请牢记这一点。 点击链接了解关于 Markdown 语法的更多信息。 知识库网站是用 Docusaurus 2 建立的，这是一个现代静态网站生成器。 在提出修改或补充建议时，要考虑到所有文件必须符合平台的规则。 用户可以在 Docusaurus 指南了解它们。 您可以把这个知识库部署在您的电脑上，以概述您建议的变化。 有关执行此操作的详细说明，可以在此知识库的 GitHub 页面上的 README 文件中找到。 "},{"title":"翻译文章​","type":1,"pageTitle":"更新知识库","url":"miscellaneous/contribute/updating-knowledge-base/#translate-adguard","content":"知识库现有文章的翻译是在 Crowdin 平台上进行的。 有关翻译和使用 Crowdin 的所有详细信息，都可以在 AdGuard 广告拦截程序知识库的专用文章中找到。 在撰写 AdGuard 知识库文章时，您可能会遇到包含复数形式的字符串，您应该格外注意翻译。 在另一篇文章中，我们详细描述了翻译具有复数形式的字符串时可能出现的困难，并就如何在 Crowdin 平台上处理这些问题给出了大量说明。 "},{"title":"处理未解决的问题​","type":1,"pageTitle":"更新知识库","url":"miscellaneous/contribute/updating-knowledge-base/#处理未解决的问题","content":"有时存在与更新知识库相关的未完成任务。 您可以帮助我们以加速完成就像您对这个知识库提出任何其他修改建议一样。 选择您认为有吸引力的任何问题并开始处理它。 如果您有任何问题，您可以在对该问题的评论中直接提问。 "},{"title":"AdGuard Crowdin：先翻译什么文件","type":0,"sectionRef":"#","url":"miscellaneous/contribute/translate/translation-priority/","content":"AdGuard Crowdin：先翻译什么文件 Crowdin上有五个主要的 AdGuard 项目，包括 AdGuard 应用程序（AdGuard Applications）、AdGuard 网站（AdGuard Websites）、AdGuard 广告拦截程序的知识库（AdGuard Ad Blocker Knowledge base）、AdGuard VPN 知识库（AdGuard VPN Knowledge Base）和 AdGuard DNS 知识库（AdGuard DNS Knowledge Base）。 我们没有明确的用户该从哪一个文件或软件开始翻译 AdGuard Applications 项目的要求。 用户可以选择最喜欢的文件或软件即可。 我们只想强调几个要点： 用户在 Crowdin 上完成软件的所有翻译后，我们才能在相应的应用程序里添加新翻译。我们建议译员在翻译软件内容后才翻译应用商店上的描述，因为没有软件的翻译，应用商店上的说明就没有必要了。 在 AdGuard Websites 项目里情况有所不同。 即使没有 100% 的翻译，我们也可以添加网站的新语言版本。 但是，这取决于已经翻译的文件。 这就是我们建议您从最重要的文件开始翻译。下面是文件排序（重要的文件排在前面，次要的文件排在后面）： AdGuard 广告拦截程序的网站 critical.resxauth.resxwelcome.resx AdGuard VPN 网站 critical.resxauth.resx AdGuard DNS 网站 critical.resxauth.resx Adding new strings as well as updating existing ones in these files requires special attention from the project translators and proofreaders. In addition to websites, there is a file for translating transactional emails in the AdGuard Websites project. Newly added strings in this file also have a high translation priority.","keywords":""},{"title":"How to create your own ad filters","type":0,"sectionRef":"#","url":"general/ad-filtering/create-own-filters/","content":"","keywords":""},{"title":"Comments​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#comments","content":"Any line that starts with an exclamation mark is a comment. In the list of rules it is displayed in gray color. AdGuard will ignore this line, so you can write anything you want. Comments are usually placed above the rules and used to describe what a rule does. For example: ! This is the comment. Below this line, there is an actual filtering rule. ||example.org^  "},{"title":"Examples​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#examples","content":""},{"title":"Blocking by domain name​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#blocking-by-domain-name","content":" This rule blocks: http://example.org/ad1.gifhttp://subdomain.example.org/ad1.gifhttps://ads.example.org:8000/ This rule does not block: http://ads.example.org.us/ad1.gifhttp://example.com/redirect/http://ads.example.org/ By default, such rules do not work for document requests. This means that the ||example.org^ rule will block a request made to example.org when you try to navigate to this domain from another website, but if you type example.org into the address bar and try to navigate to it, the website will open. To block the document request, you will need to use a rule with the $document modifier: ||example.org^$document. "},{"title":"Blocking exact address​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#blocking-exact-address","content":" This rule blocks: http://example.org/ This rule does not block: https://example.org/banner/img "},{"title":"Basic rule modifiers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rule-modifiers","content":"Filtering rules support numerous modifiers that allow you to fine-tune the rule behavior. Here is an example of a rule with some simple modifiers.  This rule blocks: http://example.org/script.js if this script is loaded from example.com. This rule does not block: https://example.org/script.js if this script is loaded from example.org.https://example.org/banner.png because it is not a script. "},{"title":"Unblocking an address​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#unblocking-an-address","content":" This rule unblocks: http://example.org/banner.png even if there is a blocking rule for this address. Blocking rules with $important modifier can override exceptions. "},{"title":"Unblocking an entire website​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#unblocking-an-entire-website","content":" This rule unblocks It disables all cosmetic rules on example.com.It unblocks all requests sent from this website even if there is are blocking rules matching these requests. "},{"title":"Cosmetic rule​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#cosmetic-rule","content":" Cosmetic rules are based on using a special language named CSS, which every browser understands. Basically, it adds a new CSS style to the website which purpose is to hide particular elements. You can learn more about CSS in general here. AdGuard extends CSS and lets filters developers handle much more complicated cases. However, to use these extended rules, you need to be fluent in regular CSS. Popular CSS selectors Name\tCSS selector\tDescriptionID selector\t#banners\tMatches all elements with id attribute equal to banners. Class selector\t.banners\tMatches all elements with class attribute containing banners. Attribute selector\tdiv[class=&quot;banners&quot;]\tMatches all div elements with class attribute exactly equal to banners. Attribute substring selector\tdiv[class^=&quot;advert1&quot;]\tMatches all div elements which class attribute starts with the advert1 string. Attribute substring selector\tdiv[class$=&quot;banners_ads&quot;]\tMatches all div elements which class attribute ends with the banners_ads string. Attribute substring selector\ta[href^=&quot;http://example.com/&quot;]\tMatches all links that are loaded from http://example.com/ domain. Attribute selector\ta[href=&quot;http://example.com/&quot;]\tMatches all links to exactly the http://example.com/ address.  "},{"title":"Restrictions and limitations​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#restrictions-and-limitations","content":""},{"title":"Trusted filters​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#trusted-filters","content":"Some rules can be used only in trusted filters. This category includes: filter lists created by the AdGuard team,custom filter lists installed as trusted,user rules. "},{"title":"AdGuard 内容拦截器​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#adguard-内容拦截器","content":"AdGuard Content Blocker is an extension for Samsung and Yandex browsers that can be installed from Google Play. It is not to be confused with the fully functional AdGuard for Android that can only be downloaded from our website. Unfortunately, AdGuard Content Blocker capabilities are limited by what the browsers allow and they only support an old Adblock Plus filters syntax: Basic blocking rules with the following modifiers: $domain, $third-party, content-type modifiers.Basic exception rules with the following modifiers: $document, $elemhide.Basic element hiding rules with no extended CSS support. Because of the limitations above AdGuard Content Blocker will not be mentioned in the compatibility notes. "},{"title":"Basic rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rules","content":"The most simple rules are so-called Basic rules. They are used to block requests to specific URLs. Or to unblock it, if there is a special marker &quot;@@&quot; at the beginning of the rule. The basic principle for this type of rules is quite simple: you have to specify the address and additional parameters that limit or expand the rule scope. Sub-requests Basic rules for blocking requests are applied only to sub-requests. That means they will not block the loading of the page unless it is explicitly specified with a $document modifier. Response status Browser detects a blocked request as completed with an error. Rule length Rules shorter than 4 characters are considered incorrect and will be ignored. "},{"title":"Basic rule syntax​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rules-syntax","content":" rule = [&quot;@@&quot;] pattern [ &quot;$&quot; modifiers ] modifiers = [modifier0, modifier1[, ...[, modifierN]]]  pattern — an address mask. Every request URL is collated to this mask. In the template, you can also use the special characters described below. Note that AdGuard truncates URLs to a length of 4096 characters in order to speed up matching and avoid issues with ridiculously long URLs.@@ — a marker that is used in rules of exception. To turn off filtering for a request, start your rule with this marker.modifiers — parameters that &quot;clarify&quot; the basic rule. Some of them limit the rule scope and some can completely change they way it works. "},{"title":"Special characters​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rules-special-characters","content":"* — a wildcard character. It is used to represent any set of characters. This can also be an empty string or a string of any length.|| — an indication to apply the rule to the specified domain and its subdomains. With this character, you do not have to specify a particular protocol and subdomain in address mask. It means that || stands for http://*., https://*., ws://*., wss://*. at once.^ — a separator character mark. Separator character is any character, but a letter, a digit, or one of the following: _ - . %. In this example separator characters are shown in bold: http://example.com/?t=1&amp;t2=t3. The end of the address is also accepted as separator.| — a pointer to the beginning or the end of address. The value depends on the character placement in the mask. For example, a rule swf| corresponds to http://example.com/annoyingflash.swf , but not to http://example.com/swf/index.html. |http://example.org corresponds to http://example.org, but not to http://domain.com?url=http://example.org. 注意 |, ||, ^ can only be used with rules that have a URL pattern. For example, ||example.com##.advert is incorrect and will be ignored by the blocker. Visual representation We also recommend to get acquainted with the Adblock Plus filter cheatsheet, for better understanding of how such rules should be made. "},{"title":"Regular expressions support​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#regexp-support","content":"If you want even more flexibility in making rules, you can use Regular expressions instead of a default simplified mask with special characters. Performance Rules with regular expressions work more slowly, therefore it is recommended to avoid them or to limit their scope to specific domains. If you want a blocker to determine a regular expression, the pattern has to look like this: pattern = &quot;/&quot; regexp &quot;/&quot;  For example, /banner\\d+/$third-party this rule will apply the regular expression banner\\d+ to all third-party requests. Exclusion rule with regular expression looks like this: @@/banner\\d+/. Compatibility AdGuard Safari and AdGuard for iOS do not fully support regular expressions because of Content Blocking API restrictions (look for &quot;The Regular expression format&quot; section). "},{"title":"Wildcard support for TLD (top-level domains)​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#wildcard-for-tld","content":"Wildcard characters are supported for TLDs of the domains in patterns of cosmetic, HTML filtering and JavaScript rules. For cosmetic rules, e.g. example.*##.banner, multiple domains are matched due to the part .*, i.e. example.com, sub.example.net, example.co.uk, etc. For basic rules the described logic is applicable only for the domains specified in $domain modifier, e.g. ||*/banners/*$image,domain=example.*. Compatibility In AdGuard for Windows, Mac, Android, and AdGuard Browser Extension rules with wildcard .* match any public suffix (or eTLD). But for AdGuard for Safari and iOS the supported list of top-level domains is limited due to Safari limitations. Rules with wildcard for TLD are not supported by AdGuard Content Blocker. "},{"title":"Basic rule examples​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rule-examples","content":"||example.com/ads/* — a simple rule, which corresponds to addresses like http://example.com/ads/banner.jpg and even http://subdomain.example.com/ads/otherbanner.jpg. ||example.org^$third-party — this rule blocks third-party requests to example.org and its subdomains. @@||example.com$document — general exception rule. It completely disables filtering for example.com and all subdomains. There is a number of modifiers which can be used in exception rules. For more details, please follow the link below. "},{"title":"Basic rule modifiers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rule-modifiers","content":"Basic modifiersContent-type modifiersException modifiers 注意 The features described in this section are intended for experienced users. They extend capabilities of &quot;Basic rules&quot;, but in order to use them you need to have a basic understanding of the way your browser works. You can change the behavior of a &quot;basic rule&quot; by using additional modifiers. Modifiers should be located in the end of the rule after a $ sign and be separated by commas. Example: ||domain.com^$popup,third-party  "},{"title":"Basic modifiers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#basic-rules-basic-modifiers","content":"The following modifiers are the most simple and frequently used. Basically, they just limit the scope of rule application. Modifier \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器$app\t✅\t❌\t❌\t❌\t❌\t❌ $denyallow\t✅\t✅\t✅\t✅\t✅\t❌ $domain\t✅\t✅\t✅\t✅ *\t✅ *\t✅ $header\t✅\t⏳\t⏳\t❌\t❌\t❌ $important\t✅\t✅\t✅\t✅\t✅\t❌ $match-case\t✅\t✅\t✅\t✅\t✅\t✅ $method\t✅\t✅\t✅\t❌\t❌\t❌ $popup\t✅ *\t✅\t✅\t✅ *\t✅ *\t❌ $third-party\t✅\t✅\t✅\t✅\t✅\t✅ $to\t✅\t✅\t✅\t❌\t❌\t❌ 注意 ✅ — fully supported✅ * — supported, but reliability may vary or limitations may occur; check the modifier description for more details⏳ — feature that has been implemented or is planned to be implemented but is not yet available in any product❌ — not supported $app​ This modifier lets you narrow the rule coverage down to a specific application (or a list of applications). This might be not too important on Windows and Mac, but this is very important on mobile devices where some of the filtering rules must be app-specific. Android — use the app package name, e.g. org.example.app.Windows — use the process name, e.g. chrome.exe.Mac — use the bundle ID or the process name, e.g. com.google.Chrome. For Mac, you can find out the bundle ID or the process name of the app by viewing the respective request details in the Filtering log. Examples ||baddomain.com^$app=org.example.app — a rule to block requests that match the specified mask and are sent from the org.example.app Android app.||baddomain.com^$app=org.example.app1|org.example.app2 — the same rule but it works for both org.example.app1 and org.example.app2 apps. If you want the rule not to be applied to certain apps, start the app name with the ~ sign. ||baddomain.com^$app=~org.example.app — a rule to block requests that match the specified mask and are sent from any app except for the org.example.app.||baddomain.com^$app=~org.example.app1|~org.example.app2 — same as above, but now two apps are excluded: org.example.app1 and org.example.app2. Restrictions Apps in the modifier value cannot have a wildcard, e.g. $app=com.*.music. Rules with such modifier are considered invalid. Compatibility Only AdGuard for Windows, Mac, Android are technically capable of using rules with $app modifier.On Windows the process name is case-insensitive starting with AdGuard for Windows with CoreLibs v1.12 or later. $denyallow​ $denyallow modifier allows to avoid creating additional rules when it is needed to disable a certain rule for specific domains. $denyallow matches only target domains and not referrer domains. Adding this modifier to a rule is equivalent to excluding the domains by the rule's matching pattern or to adding the corresponding exclusion rules. To add multiple domains to one rule, use the | character as a separator. Examples This rule: *$script,domain=a.com|b.com,denyallow=x.com|y.com  is equivalent to this one: /^(?!.*(x.com|y.com)).*$/$script,domain=a.com|b.com  or to the combination of these three: *$script,domain=a.com|b.com @@||x.com$script,domain=a.com|b.com @@||y.com$script,domain=a.com|b.com  Restrictions The rule's matching pattern cannot target any specific domains, e.g. it cannot start with ||.Domains in the modifier value cannot be negated, e.g. $denyallow=~x.com, or have a wildcard TLD, e.g. $denyallow=x.*, or be a regular expression, e.g. $denyallow=/\\.(com\\|org)/.$denyallow cannot be used together with $to. It can be expressed with inverted $to: $denyallow=a.com|b.com is equivalent to $to=~a.com|~b.com. The rules which violate these restrictions are considered invalid. Compatibility Rules with $denyallow modifier are not supported by AdGuard for iOS, Safari, and AdGuard Content Blocker. $domain​ $domain limits the rule scope to requests made from the specified domains and their subdomains (as indicated by the Referer HTTP header). Syntax The modifier is a list of one or more expressions separated by the | symbol, each of which is matched against a domain in a particular way depending on its type (see below). domains = [&quot;~&quot;] entry_0 [&quot;|&quot; [&quot;~&quot;] entry_1 [&quot;|&quot; [&quot;~&quot;]entry_2 [&quot;|&quot; ... [&quot;|&quot; [&quot;~&quot;]entry_N]]]] entry_i = ( regular_domain / any_tld_domain / regexp )  regular_domain — a regular domain name (domain.com). Corresponds the specified domain and its subdomains. It is matched lexicographically.any_tld_domain — a domain name ending with a wildcard character as a public suffix, e.g. for example.* it is co.uk in example.co.uk. Corresponds to the specified domain and its subdomains with any public suffix. It is matched lexicographically.regexp — a regular expression, starts and ends with /. The pattern works the same way as in the basic URL rules, but the characters /, $, and | must be escaped with \\. 信息 Rules with $domain modifier as regular_domain or any_tld_domain are supported by all AdGuard products. Examples Just $domain: ||baddomain.com^$domain=example.org blocks requests that match the specified mask, and are sent from domain example.org or its subdomains.||baddomain.com^$domain=example.org|example.com — the same rule, but it works for both example.org and example.com. If you want the rule not to be applied to certain domains, start a domain name with ~ sign. $domain and negation ~: ||baddomain.com^$domain=example.org blocks requests that match the specified mask and are sent from the example.org domain or its subdomains.||baddomain.com^$domain=example.org|example.com — the same rule, but it works for both example.org and example.com.||baddomain.com^$domain=~example.org blocks requests matching the pattern sent from any domain except example.org and its subdomains.||baddomain.com^$domain=example.org|~foo.example.org blocks requests sent from example.org and its subdomains, except the subdomain foo.example.org.||baddomain.com^$domain=/(^\\|.+\\.)example\\.(com\\|org)\\$/ blocks requests sent from example.org and example.com domains and all their subdomains.||baddomain.com^$domain=~a.com|~b.*|~/(^\\|.+\\.)c\\.(com\\|org)\\$/ blocks requests sent from any domains, except a.com, b with any public suffix (b.com, b.co.uk, etc.), c.com, c.org, and their subdomains. $domain modifier matching target domain: In some cases the $domain modifier can match not only the referrer domain, but also the target domain. This happens when all the following conditions are met: The request has the document content typeThe rule pattern does not match any particular domainsThe rule pattern does not contain regular expressionsThe $domain modifier contains only excluded domains, e.g. $domain=~example.org|~example.com The following predicate should be satisfied to perform a target domain matching: 1 AND ((2 AND 3) OR 4)  That is, if the modifier $domain contains only excluded domains, then the rule does not need to meet the second and third conditions to match the target domain against the modifier $domain. If some of the conditions above are not met but the rule contains $cookie or $csp modifier, the target domain will still be matched. If the referrer matches a rule with $domain that explicitly excludes the referrer domain, then the rule will not be applied even if the target domain also matches the rule. This affects rules with $cookie and $csp modifiers, too. Examples *$cookie,domain=example.org|example.com will block cookies for all requests to and from example.org and example.com.*$document,domain=example.org|example.com will block all requests to and from example.org and example.com. In the following examples it is implied that requests are sent from http://example.org/page (the referrer) and the target URL is http://targetdomain.com/page. page$domain=example.org will be matched, as it matches the referrer domain.page$domain=targetdomain.com will be matched, as it matches the target domain and satisfies all requirements mentioned above.||*page$domain=targetdomain.com will not be matched, as the pattern ||*page may match specific domains, e.g. example.page.||*page$domain=targetdomain.com,cookie will be matched because the rule contains $cookie modifier despite the pattern ||*page may match specific domains./banner\\d+/$domain=targetdomain.com will not be matched as it contains a regular expression.page$domain=targetdomain.com|~example.org will not be matched because the referrer domain is explicitly excluded. $domain modifier limitations​ Restrictions Safari does not support the simultaneous use of allowed and disallowed domains, so rules like ||baddomain.com^$domain=example.org|~foo.example.org will not work in AdGuard for iOS and AdGuard for Safari. Compatibility Rules with regular expressions in the $domain modifier are supported by AdGuard for Windows, AdGuard for Mac, and AdGuard for Android with CoreLibs v1.11 or later, and AdGuard Browser Extension with TSUrlFilter v3.0.0 or later. In AdGuard for Windows, Mac and Android with CoreLibs v1.12 or later the $domain modifier can be alternatively spelled as $from. $header​ The $header modifier allows matching the HTTP response having a specific header with (optionally) a specific value. Syntax $header &quot;=&quot; h_name [&quot;:&quot; h_value] h_value = string / regexp  where: h_name — required, an HTTP header name. It is matched case-insesitively.h_value — optional, an HTTP header value matching expression, it may be one of the following: string — a sequence of characters. It is matched against the header value lexicographically;regexp — a regular expression, starts and ends with /. The pattern works the same way as in the basic URL rules, but the characters /, $ and , must be escaped with \\. The modifier part, &quot;:&quot; h_value, may be omitted. In that case, the modifier matches the header name only. Examples ||example.com^$header=set-cookie:foo blocks requests whose responses have the Set-Cookie header with the value matching foo literally.||example.com^$header=set-cookie blocks requests whose responses have the Set-Cookie header with any value.@@||example.com^$header=set-cookie:/foo\\, bar\\$/ unblocks requests whose responses have the Set-Cookie header with value matching the foo, bar$ regular expression.@@||example.com^$header=set-cookie unblocks requests whose responses have a Set-Cookie header with any value. Compatibility Rules with the $header modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.11 or later. $important​ The $important modifier applied to a rule increases its priority over rules without the identical modifier. Even over basic exception rules. Go to rules priorities for more details. Examples ! blocking rule will block all requests despite of the exception rule ||example.org^$important @@||example.org^  ! if the exception rule also has `$important` modifier, it will prevail and requests won't be blocked ||example.org^$important @@||example.org^$important  $match-case​ This modifier defines a rule which applies only to addresses that match the case. Default rules are case-insensitive. Examples */BannerAd.gif$match-case — this rule will block http://example.com/BannerAd.gif, but not http://example.com/bannerad.gif. Compatibility Rules with the $match-case are supported by AdGuard for iOS and AdGuard for Safari with SafariConverterLib v2.0.43 or later. All other products already support this modifier. $method​ This modifier limits the rule scope to requests that use the specified set of HTTP methods. Negated methods are allowed. The methods must be specified in all lowercase characters, but are matched case-insensitively. To add multiple methods to one rule, use the vertical bar | as a separator. Examples ||evil.com^$method=get|head blocks only GET and HEAD requests to evil.com.||evil.com^$method=~post|~put blocks any requests to evil.com except POST or PUT.@@||evil.com$method=get unblocks only GET requests to evil.com.@@||evil.com$method=~post unblocks any requests to evil.com except POST. Restrictions Rules with mixed negated and not negated values are considered invalid. So, for example, the rule ||evil.com^$method=get|~head will be rejected. Compatibility Rules with $method modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.12 or later and AdGuard Browser Extension for Chrome, Firefox, and Edge with TSUrlFilter v2.1.1 or later. $popup​ AdGuard will try to close the browser tab with any address that matches a blocking rule with this modifier. Please note that not all the tabs can be closed. Examples ||domain.com^$popup — if you try to go to http://domain.com/ from any page in the browser, a new tab in which specified site has to be opened will be closed by this rule. Compatibility $popup modifier works best in AdGuard Browser Extension.In AdGuard for Safari and iOS, $popup rules simply block the page right away.In AdGuard for Windows, Mac, and Android, $popup modifier may not detect a popup in some cases and it will not be blocked. $popup modifier applies the document content type with a special flag which is passed to a blocking page. Blocking page itself can do some checks and close the window if it is really a popup. Otherwise, page should be loaded. It can be combined with other request type modifiers, such as $third-party and $important.Rules with $popup modifier are not supported by AdGuard Content Blocker. $third-party​ A restriction of third-party and own requests. A third-party request is a request from a different domain. For example, a request to example.org from domain.com is a third-party request. 注意 To be considered as such, a third-party request should meet one of the following conditions: Its referrer is not a subdomain of the target domain or vice versa. For example, a request to subdomain.example.org from example.org is not a third-party requestIts Sec-Fetch-Site header is set to cross-site Examples $third-party: ||domain.com^$third-party — this rule applies to all domains, except domain.com and its subdomains. An example of a third-party request: http://example.org/banner.jpg. If there is a $~third-party modifier, the rule is only applied to the requests that are not from third parties. Which means, they have to be sent from the same domain. $~third-party: ||domain.com$~third-party — this rule is applied exclusively to domain.com. Example of a non third-party request: http://domain.com/icon.ico. 注意 You may use a shorter name (alias) instead of using the full modifier name: $3p. $to​ $to limits the rule scope to requests made to the specified domains and their subdomains. To add multiple domains to one rule, use the | character as a separator. Examples /ads$to=evil.com|evil.org blocks any request to evil.com or evil.org and their subdomains with a path matching /ads./ads$to=~not.evil.com|evil.com blocks any request to evil.com and its subdomains, with a path matching /ads, except requests to not.evil.com and its subdomains./ads$to=~good.com|~good.org blocks any request with a path matching /ads, except requests to good.com or good.org and their subdomains. Restrictions $denyallow cannot be used together with $to. It can be expressed with inverted $to: $denyallow=a.com|b.com is equivalent to $to=~a.com|~b.com. Compatibility Rules with the $to modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.12 or later and AdGuard Browser Extension with TSUrlFilter v2.1.3 or later. "},{"title":"Content-type modifiers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#content-type-modifiers","content":"There is a set of modifiers, which can be used to limit the rule's application area to certain type of content. These modifiers can also be combined to cover, for example, both images and scripts. Compatibility There is a big difference in how AdGuard determines the content type on different platforms. For AdGuard Browser Extension, content type for every request is provided by the browser. AdGuard for Windows, Mac, and Android use the following method: first, the apps try to determine the type of the request by the Sec-Fetch-Dest request header or by the filename extension. If the request is not blocked at this stage, the type will be determined using the Content-Type header at the beginning of the server response. Examples of content-type modifiers ||example.org^$image — corresponds to all images from example.org.||example.org^$script,stylesheet — corresponds to all the scripts and styles from example.org.||example.org^$~image,~script,~stylesheet — corresponds to all requests to example.org except for the images, scripts and styles. Modifier \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器$document\t✅\t✅\t✅\t✅\t✅\t❌ $font\t✅\t✅\t✅\t✅\t✅\t✅ $image\t✅\t✅\t✅\t✅\t✅\t✅ $media\t✅\t✅\t✅\t✅\t✅\t✅ $object\t✅\t✅\t✅\t✅\t✅\t✅ $other\t✅\t✅\t✅\t✅\t✅\t❌ $ping\t✅ *\t✅\t✅\t❌\t❌\t✅ $script\t✅\t✅\t✅\t✅\t✅\t✅ $stylesheet\t✅\t✅\t✅\t✅\t✅\t✅ $subdocument\t✅ *\t✅\t✅\t✅\t✅\t❌ $websocket\t✅\t✅\t✅\t✅ *\t✅ *\t✅ $xmlhttprequest\t✅\t✅\t✅\t✅\t✅\t✅ $webrtc 🚫\t❌\t❌\t❌\t❌\t❌\t❌ $object-subrequest 🚫\t❌\t❌\t❌\t❌\t❌\t❌ 注意 ✅ — fully supported✅ * — supported, but reliability may vary or limitations may occur; check the modifier description for more details❌ — not supported🚫 — removed and no longer supported $document​ The rule corresponds to the main frame document requests, i.e. HTML documents that are loaded in the browser tab. It does not match iframes, there is a $subdocument modifier for these. By default, AdGuard does not block the requests that are loaded in the browser tab (e.g. &quot;main frame bypass&quot;). The idea is not to prevent pages from loading as the user clearly indicated that they want this page to be loaded. However, if the $document modifier is specified explicitly, AdGuard does not use that logic and prevents the page load. Instead, it responds with a &quot;blocking page&quot;. If this modifier is used with an exclusion rule (@@), it completely disables blocking on corresponding pages. It is equivalent to using $elemhide, $content, $urlblock, $jsinject, $extension modifiers simultaneously. Examples @@||example.com^$document completely disables filtering on all pages at example.com and all subdomains. ||example.com^$document blocks HTML document request to example.com with a blocking page. ||example.com^$document,redirect=noopframe redirects HTML document request to example.com to an empty html document. ||example.com^$document,removeparam=test removes test query parameter from HTML document request to example.com. ||example.com^$document,replace=/test1/test2/ replaces test1 with test2 in HTML document request to example.com. 注意 You may use a shorter name (alias) instead of using the full modifier name: $doc. $font​ The rule corresponds to requests for fonts, e.g. .woff filename extension. $image​ The rule corresponds to images requests. $media​ The rule corresponds to requests for media files — music and video, e.g. .mp4 files. $object​ The rule corresponds to browser plugins resources, e.g. Java or Flash. $other​ The rule applies to requests for which the type has not been determined or does not match the types listed above. $ping​ The rule corresponds to requests caused by either navigator.sendBeacon() or the ping attribute on links. Compatibility AdGuard for Windows, Mac, and Android often cannot accurately detect navigator.sendBeacon(). Using $ping is not recommended in the filter lists that are supposed to be used by CoreLibs-based AdGuard products. Rules with $ping modifier are not supported by AdGuard for Safari and iOS. $script​ The rule corresponds to script requests, e.g. javascript, vbscript. $stylesheet​ The rule corresponds to CSS files requests. 注意 You may use a shorter name (alias) instead of using the full modifier name: $css. $subdocument​ The rule corresponds to requests for built-in pages — HTML tags frame and iframe. Examples ||example.com^$subdocument blocks built-in page requests (frame and iframe) to example.com and all its subdomains anywhere.||example.com^$subdocument,domain=domain.com blocks built-in page requests (frame и iframe) to example.com (and its subdomains) from domain.com and all its subdomains. 注意 You may use a shorter name (alias) instead of using the full modifier name: $frame. Compatibility In AdGuard for Windows, Mac, and Android subdocuments are being detected by the Sec-Fetch-Dest header if it is present. Otherwise, some main pages may be treated as subdocuments. Rules with $subdocument modifier are not supported by AdGuard Content Blocker. $websocket​ The rule applies only to WebSocket connections. Compatibility $websocket modifier is supported in all AdGuard products except AdGuard Content Blocker. As for AdGuard for Safari and AdGuard for iOS, it's supported on devices with macOS Monterey (version 12) and iOS 16 or higher. $xmlhttprequest​ The rule applies only to ajax requests (requests sent via javascript object XMLHttpRequest). 注意 You may use a shorter name (alias) instead of using the full modifier name: $xhr. Compatibility AdGuard for Windows, Mac, Android when filtering older browsers cannot accurately detect this type and sometimes detects it as $other or $script. They can only reliably detect this content type when filtering modern browsers that support Fetch metadata request headers. $object-subrequest (removed)​ Removal notice $object-subrequest modifier is removed and is no longer supported. Rules with it are considered as invalid. The rule corresponds to requests by browser plugins (it is usually Flash). $webrtc (removed)​ Removal notice This modifier is removed and is no longer supported. Rules with it are considered as invalid. If you need to suppress WebRTC, consider using the nowebrtc scriptlet. The rule applies only to WebRTC connections. Examples ||example.com^$webrtc,domain=example.org blocks webRTC connections to example.com from example.org.@@*$webrtc,domain=example.org disables the RTC wrapper for example.org. "},{"title":"Exception rules modifiers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#exception-modifiers","content":"Exception rules disable the other basic rules for the addresses to which they correspond. They begin with a @@ mark. All the basic modifiers listed above can be applied to them and they also have a few special modifiers. Visual representation We recommend to get acquainted with the Adblock Plus filter cheatsheet, for better understanding of how exception rules should be made. Modifier \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器$content\t✅\t❌\t✅\t❌\t❌\t❌ $elemhide\t✅\t✅\t✅\t✅\t✅\t✅ $extension\t✅\t❌\t❌\t❌\t❌\t❌ $jsinject\t✅\t✅\t✅\t✅\t✅\t❌ $stealth\t✅\t✅\t✅\t❌\t❌\t❌ $urlblock\t✅\t✅\t✅\t✅ *\t✅ *\t❌ $genericblock\t✅\t✅\t✅\t✅ *\t✅ *\t❌ $generichide\t✅\t✅\t✅\t✅\t✅\t✅ $specifichide\t✅\t✅\t✅\t❌\t❌\t❌ 注意 ✅ — fully supported✅ * — supported, but reliability may vary or limitations may occur; check the modifier description for more details❌ — not supported $content​ Disables HTML filtering, $hls, $replace, and $jsonprune rules on the pages that match the rule. Examples @@||example.com^$content disables all content modifying rules on pages at example.com and all its subdomains. $elemhide​ Disables any cosmetic rules on the pages matching the rule. Examples @@||example.com^$elemhide disables all cosmetic rules on pages at example.com and all subdomains. 注意 You may use a shorter name (alias) instead of using the full modifier name: $ehide. $extension​ Disables specific userscripts or all userscripts for a given domain. Syntax $extension[=&quot;userscript_name1&quot;[|&quot;userscript_name2&quot;[|&quot;userscript_name3&quot;[...]]]]  userscript_name(i) stands for a specific userscript name to be disabled by the modifier. The modifier can contain any number of userscript names or none. In the latter case the modifier disables all the userscripts. Userscript names usually contain spaces or other special characters, which is why you should enclose the name in quotes. Both single (') and double (&quot;) ASCII quotes are supported. Multiple userscript names should be separated with a pipe (|). However, if a userscript name is a single word without any special characters, it can be used without quotes. You can also exclude a userscript by adding a ~ character before it. In this case, the userscript will not be disabled by the modifier. $extension=~&quot;userscript name&quot;  注意 When excluding a userscript, you must place ~ outside the quotes. If a userscript's name includes quotes (&quot;), commas (,), or pipes (|), they must be escaped with a backslash (\\). $extension=&quot;userscript name\\, with \\&quot;quote\\&quot;&quot;  Examples @@||example.com^$extension=&quot;AdGuard Assistant&quot; disables the AdGuard Assistant userscript on example.com website.@@||example.com^$extension=MyUserscript disables the MyUserscript userscript on example.com website.@@||example.com^$extension='AdGuard Assistant'|'Popup Blocker' disables both AdGuard Assistant and Popup Blocker userscripts on example.com website.@@||example.com^$extension=~&quot;AdGuard Assistant&quot; disables all user scripts on example.com website, except AdGuard Assistant.@@||example.com^$extension=~&quot;AdGuard Assistant&quot;|~&quot;Popup Blocker&quot; disables all user scripts on example.com website, except AdGuard Assistant and Popup Blocker.@@||example.com^$extension no userscript will work on webpages on example.com.@@||example.com^$extension=&quot;AdGuard \\&quot;Assistant\\&quot;&quot; disables the AdGuard &quot;Assistant&quot; userscript on example.com website. Compatibility Only AdGuard for Windows, Mac, Android are technically capable of using rules with $extension modifier.Rules with $extension modifier with specific userscript name are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.13 or later. $jsinject​ Forbids adding of javascript code to the page. You can read about scriptlets and javascript rules further. Examples @@||example.com^$jsinject disables javascript on pages at example.com and all subdomains. $stealth​ Disables the Stealth Mode module for all corresponding pages and requests. Syntax $stealth [= opt1 [| opt2 [| opt3 [...]]]]  opt(i) stand for certain Stealth Mode options disabled by the modifier. The modifier can contain any number of specific options (see below) or none. In the latter case the modifier disables all the Stealth Mode features. The list of the available modifier options: searchqueries disables Hide your search queries optiondonottrack disables Ask websites not to track you option3p-cookie disables Self-destructing third-party cookies option1p-cookie disables Self-destructing first-party cookies option3p-cache disables Disable cache for third-party requests option3p-auth disables Block third-party Authorization header optionwebrtc disables Block WebRTC optionpush disables Block Push API optionlocation disables Block Location API optionflash disables Block Flash optionjava disables Block Java optionreferrer disables Hide Referer from third parties optionuseragent disables Hide your User-Agent optionip disables Hide your IP address optionxclientdata disables Remove X-Client-Data header from HTTP requests optiondpi disables Protect from DPI option Examples @@||example.com^$stealth disables Stealth Mode for example.com (and subdomains) requests, except for blocking cookies and hiding tracking parameters (see below).@@||domain.com^$script,stealth,domain=example.com disables Stealth Mode only for script requests to domain.com (and its subdomains) on example.com and all its subdomains.@@||example.com^$stealth=3p-cookie|dpi disables blocking third-party cookies and DPI fooling measures for example.com. 注意 Blocking cookies and removing tracking parameters is achieved by using rules with the $cookie, $urltransform and $removeparam modifiers. Exception rules that contain only the $stealth modifier will not do these things. If you want to completely disable all Stealth mode features for a given domain, you must include all three modifiers: @@||example.org^$stealth,removeparam,cookie. Restrictions Modifier options must be lowercase, i.e. $stealth=DPI will be rejected.Modifier options cannot be negated, i.e. $stealth=~3p-cookie will be rejected.AdGuard Browser Extension supports only searchqueries, donottrack, referrer, xclientdata, 1p-cookie and 3p-cookie options. Compatibility Stealth Mode is available in AdGuard for Windows, AdGuard for Mac, AdGuard for Android, and AdGuard Browser Extension. All other products will ignore the rules with $stealth modifier.Rules with $stealth modifier with specific options are supported by AdGuard for Windows, AdGuard for Mac, and AdGuard for Android with CoreLibs v1.10 or later, and AdGuard Browser Extension with TSUrlFilter v3.0.0 or later. $urlblock​ Disables blocking of all requests sent from the pages matching the rule and disables all $cookie rules. Examples @@||example.com^$urlblock — any requests sent from the pages at example.com and all subdomains are not going to be blocked. Compatibility In AdGuard for iOS and AdGuard for Safari, rules with $urlblock work as $document exclusion — unblock everything. Rules with $urlblock modifier are not supported by AdGuard Content Blocker. Generic rules​ Before we can proceed to the next modifiers, we have to make a definition of generic rules. The rule is generic if it is not limited to specific domains. Wildcard character * is supported as well. For example, these rules are generic: ###banner *###banner #@#.adsblock *#@#.adsblock ~domain.com###banner ||domain.com^ ||domain.com^$domain=~example.com  And these are not: domain.com###banner ||domain.com^$domain=example.com  $genericblock​ Disables generic basic rules on pages that correspond to exception rule. Examples @@||example.com^$genericblock disables generic basic rules on any pages at example.com and all subdomains. Compatibility In AdGuard for iOS and AdGuard for Safari, rules with $genericblock work as $document exclusion — unblock everything. Rules with $genericblock modifier are not supported by AdGuard Content Blocker. $generichide​ Disables all generic cosmetic rules on pages that correspond to the exception rule. Examples @@||example.com^$generichide disables generic cosmetic rules on any pages at example.com and its subdomains. 注意 You may use a shorter name (alias) instead of using the full modifier name: $ghide. specifichide​ Disables all specific element hiding and CSS rules, but not general ones. Has an opposite effect to $generichide. Examples @@||example.org^$specifichide disables example.org##.banner but not ##.banner. 注意 You may use a shorter name (alias) instead of using the full modifier name: $shide. 注意 All cosmetic rules — not just specific ones — can be disabled by $elemhide modifier. Compatibility Rules with $specifichide modifier are not supported by AdGuard for iOS, AdGuard for Safari, and AdGuard Content Blocker. "},{"title":"Advanced capabilities​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#advanced-modifiers","content":"These modifiers are able to completely change the behavior of basic rules. Modifier \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器$all\t✅\t✅\t✅\t✅\t✅\t❌ $badfilter\t✅\t✅\t✅\t✅\t✅\t❌ $cookie\t✅\t✅\t✅\t❌\t❌\t❌ $csp\t✅\t✅\t✅\t❌\t❌\t❌ $hls\t✅\t❌\t❌\t❌\t❌\t❌ $inline-font\t✅\t✅\t✅\t❌\t❌\t❌ $inline-script\t✅\t✅\t✅\t❌\t❌\t❌ $jsonprune\t✅\t❌\t❌\t❌\t❌\t❌ $xmlprune\t✅\t❌\t❌\t❌\t❌\t❌ $network\t✅\t❌\t❌\t❌\t❌\t❌ $permissions\t✅ *\t🧩\t🧩 *\t❌\t❌\t❌ $redirect\t✅\t✅\t✅\t❌\t❌\t❌ $redirect-rule\t✅\t✅\t✅\t❌\t❌\t❌ $referrerpolicy\t✅\t❌\t❌\t❌\t❌\t❌ $removeheader\t✅\t✅\t✅\t❌\t❌\t❌ $removeparam\t✅\t✅\t✅\t❌\t❌\t❌ $replace\t✅\t❌\t✅\t❌\t❌\t❌ $urltransform\t✅\t❌\t❌\t❌\t❌\t❌ noop\t✅\t✅\t✅\t✅\t✅\t❌ $empty 👎\t✅\t✅\t✅\t❌\t❌\t❌ $mp4 👎\t✅\t✅\t✅\t❌\t❌\t❌ 注意 ✅ — fully supported✅ * — supported, but reliability may vary or limitations may occur; check the modifier description for more details🧩 — may already be implemented in nightly or beta versions but is not yet supported in release versions❌ — not supported👎 — deprecated; still supported but will be removed in the future $all​ $all modifier is made of all content-types modifiers and $popup. E.g. rule ||example.org^$all is converting into rule: ||example.org^$document,subdocument,font,image,media,object,other,ping,script,stylesheet,websocket,xmlhttprequest,popup  This modifier cannot be used as an exception with the @@ mark. Compatibility Rules with $all modifier are not supported by AdGuard Content Blocker. $badfilter​ The rules with the $badfilter modifier disable other basic rules to which they refer. It means that the text of the disabled rule should match the text of the $badfilter rule (without the $badfilter modifier). Examples ||example.com$badfilter disables ||example.com||example.com$image,badfilter disables ||example.com$image@@||example.com$badfilter disables @@||example.com||example.com$domain=domain.com,badfilter disables ||example.com$domain=domain.com Rules with $badfilter modifier can disable other basic rules for specific domains if they fulfill the following conditions: The rule has a $domain modifierThe rule does not have a negated domain ~ in $domain modifier value In that case, the $badfilter rule will disable the corresponding rule for domains specified in both the $badfilter and basic rules. Please note that wildcard-TLD logic works here as well. Examples /some$domain=example.com|example.org|example.io is disabled for example.com by /some$domain=example.com,badfilter/some$domain=example.com|example.org|example.io is disabled for example.com and example.org by /some$domain=example.com|example.org,badfilter/some$domain=example.com|example.org and /some$domain=example.io are disabled completely by /some$domain=example.com|example.org|example.io,badfilter/some$domain=example.com|example.org|example.io is disabled completely by /some$domain=example.*,badfilter/some$domain=example.* is disabled for example.com and example.org by /some$domain=example.com|example.org,badfilter/some$domain=example.com|example.org|example.io is NOT disabled for example.com by /some$domain=example.com|~example.org,badfilter because the value of $domain modifier contains a negated domain Compatibility Rules with $badfilter modifier are not supported by AdGuard Content Blocker. $cookie​ The $cookie modifier completely changes rule behavior. Instead of blocking a request, this modifier makes AdGuard suppress or modify the Cookie and Set-Cookie headers. Multiple rules matching a single request In case if multiple $cookie rules match a single request, we will apply each of them one by one. Syntax $cookie [= name[; maxAge = seconds [; sameSite = strategy ]]]  where: name — optional, string or regular expression to match cookie name.seconds — number of seconds for current time to offset the expiration date of cookie.strategy — string for Same-Site strategy to make cookie use. For example, ||example.org^$cookie=NAME;maxAge=3600;sameSite=lax  every time AdGuard encounters a cookie called NAME in a request to example.org, it will do the following: Set its expiration date to current time plus 3600 secondsMakes the cookie use Same-Site &quot;lax&quot; strategy. Escaping special characters If regular expression name is used for matching, two characters must be escaped: comma , and dollar sign $. Use backslash \\ escape each of them. For example, escaped comma looks like this: \\,. Examples ||example.org^$cookie blocks all cookies set by example.org; this is an equivalent to setting maxAge=0$cookie=__cfduid blocks CloudFlare cookie everywhere$cookie=/__utm[a-z]/ blocks Google Analytics cookies everywhere||facebook.com^$third-party,cookie=c_user prevents Facebook from tracking you even if you are logged in There are two methods to deactivate $cookie rules: the primary method involves using an exception marked with @@ — @@||example.org^$cookie. The alternative method employs a $urlblock exception (also included under the $document exception alias — $elemhide,jsinject,content,urlblock,extension). Here's how it works: @@||example.org^$cookie unblocks all cookies set by example.org@@||example.org^$urlblock unblocks all cookies set by example.org and disables blocking of all requests sent from example.org@@||example.org^$cookie=concept unblocks a single cookie named concept@@||example.org^$cookie=/^_ga_/ unblocks every cookie that matches the regular expression Restrictions $cookie rules support three types of modifiers: $domain, $~domain, $important, $third-party, and $~third-party. Compatibility Rules with $cookie modifier are not supported by AdGuard Content Blocker, AdGuard for iOS, and AdGuard for Safari. $csp​ This modifier completely changes the rule behavior. If it is applied to a rule, the rule will not block the matching request. Response headers will be modified instead. 信息 In order to use this type of rules, it is required to have the basic understanding of the Content Security Policy security layer. For the requests matching a $csp rule, we will strengthen response security policy by enhancing the content security policy, similar to the content security policy of the $csp modifier contents. $csp rules are applied independently from any other rule type. Only document-level exceptions can influence it (see the examples section), but no other basic rules. Multiple rules matching a single request In case if multiple $csp rules match a single request, we will apply each of them. Syntax $csp value syntax is similar to the Content Security Policy header syntax. $csp value can be empty in the case of exception rules. See examples section below. Examples ||example.org^$csp=frame-src 'none' blocks all frames on example.org and its subdomains.@@||example.org/page/*$csp=frame-src 'none' disables all rules with the $csp modifier exactly matching frame-src 'none' on all the pages matching the rule pattern. For instance, the rule above.@@||example.org/page/*$csp disables all the $csp rules on all the pages matching the rule pattern.||example.org^$csp=script-src 'self' 'unsafe-eval' http: https: disables inline scripts on all the pages matching the rule pattern.@@||example.org^$document or @@||example.org^$urlblock disables all the $csp rules on all the pages matching the rule pattern. Restrictions There are a few characters forbidden in the $csp value: ,, $.$csp rules support limited list of modifiers: $domain, $important, $subdocument.Rules with report-* directives are considered invalid. Compatibility Rules with $csp modifier are not supported by AdGuard Content Blocker, AdGuard for iOS and AdGuard for Safari. $hls​ $hls rules modify the response of a matching request. They are intended as a convenient way to remove segments from HLS playlists (RFC 8216). 注意 The word &quot;segment&quot; in this document means either a &quot;Media Segment&quot; or a &quot;playlist&quot; as part of a &quot;Master Playlist&quot;: $hls rules do not distinguish between a &quot;Master Playlist&quot; and a &quot;Media Playlist&quot;. Syntax ||example.org^$hls=urlpattern removes segments whose URL matches the URL pattern urlpattern. The pattern works just like the one in basic URL rules, however, the characters /, $ and , must be escaped with \\ inside urlpattern.||example.org^$hls=/regexp/options removes segments where the URL or one of the tags (for certain options, if present) is matched by the regular expression regexp. Available options are: t — instead of testing the segment's URL, test each of the segment's tags against the regular expression. A segment with a matching tag is removed;i — make the regular expression case-insensitive. The characters /, $ and , must be escaped with \\ inside regexp. Exceptions Basic URL exceptions shall not disable rules with $hls modifier. They can be disabled as described below: @@||example.org^$hls disables all $hls rules for responses from URLs matching ||example.org^.@@||example.org^$hls=text disables all $hls rules with the value of the $hls modifier equal to text for responses from URLs matching ||example.org^. 提示 $hls rules can also be disabled by $document, $content and $urlblock exception rules. 注意 When multiple $hls rules match the same request, their effect is cumulative. Examples ||example.org^$hls=\\/videoplayback^?*&amp;source=dclk_video_ads removes all segments with the matching URL.||example.org^$hls=/\\/videoplayback\\/?\\?.*\\&amp;source=dclk_video_ads/i achieves more or less the same with a regular expression instead of a URL pattern.||example.org^$hls=/#UPLYNK-SEGMENT:.*\\,ad/t removes all segments which have the matching tag. Anatomy of an HLS playlist A quick summary of the specification: An HLS playlist is a collection of text linesA line may be empty, a comment (starts with #), a tag (also starts with #, can only be recognized by name) or a URLA URL line is called a &quot;segment&quot;Tags may apply to a single segment, i.e. the first URL line after the tag, to all segments following the tag and until the tag with the same name, or to the whole playlist Some points specific to the operation of $hls rules: When a segment is removed, all of the tags that apply only to that segment are also removedWhen there is a tag that applies to multiple segments, and all of those segments are removed, the tag is also removedSince there is no way to recognize different kinds of tags by syntax, we recognize all of the tags specified by the RFC, plus some non-standard tags that we have seen in the field. Any lines starting with # and not recognized as a tag are passed through without modification, and are not matched against the rulesTags will not be matched if they apply to the entire playlist, and $hls rrules cannot be used to remove them, as these rule types are intended for segment removals. If you know what you are doing, you can use $replace rules to remove or rewrite just a single tag from the playlist An example of a transformation done by the rules: Original response #EXTM3U #EXT-X-TARGETDURATION:10 #EXTINF,5 preroll.ts #UPLYNK-SEGMENT:abc123,ad #UPLYNK-KEY:aabb1122 #EXT-X-DISCONTINUITY #EXTINF,10 01.ts #EXTINF,10 02.ts #UPLYNK-SEGMENT:abc123,segment #UPLYNK-KEY:ccdd2233 #EXT-X-DISCONTINUITY #EXTINF,10 01.ts #EXTINF,10 02.ts #EXT-X-ENDLIST  Applied rules ||example.org^$hls=preroll ||example.org^$hls=/#UPLYNK-SEGMENT:.*\\,ad/t  Modified response #EXTM3U #EXT-X-TARGETDURATION:10 #UPLYNK-SEGMENT:abc123,segment #UPLYNK-KEY:ccdd2233 #EXT-X-DISCONTINUITY #EXTINF,10 01.ts #EXTINF,10 02.ts #EXT-X-ENDLIST  Restrictions $hls rules are only allowed in trusted filters.$hls rules are compatible with the modifiers $domain, $third-party, $app, $important, $match-case, and $xmlhttprequest only.$hls rules only apply to HLS playlists, which are UTF-8 encoded text starting with the line #EXTM3U. Any other response will not be modified by these rules.$hls rules do not apply if the size of the original response is more than 10 MB. Compatibility Rules with the $hls modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.10 or later. $inline-script​ The $inline-script modifier is designed to block inline JavaScript embedded into the web page, using Content Security Policy (CSP). It improves security and privacy by preventing application of inline ads or potentially malicious scripts. The rule ||example.org^$inline-script is converting into the CSP-syntax rule: ||example.org^$csp=script-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:  $inline-font​ The $inline-font modifier is designed to block inline fonts embedded into the web page, using Content Security Policy (CSP). It improves security and privacy by preventing application of inline fonts that could be used for data collection and fingerprinting. The rule ||example.org^$inline-font is converting into the CSP-syntax rule: ||example.org^$csp=font-src 'self' 'unsafe-eval' http: https: data: blob: mediastream: filesystem:  $jsonprune​ $jsonprune rules modify the response to a matching request by removing JSON items that match a modified JSONPath expression. They do not modify responses which are not valid JSON documents. In AdGuard for Windows, Mac, and Android with CoreLibs v1.11 or later, $jsonprune also supports modifying JSONP (padded JSON) documents. Syntax ||example.org^$jsonprune=expression removes items that match the modified JSONPath expression expression from the response. Due to the way rule parsing works, the characters $ and , must be escaped with \\ inside expression. The modified JSONPath syntax has the following differences from the original: Script expressions are not supportedThe supported filter expressions are: ?(has &lt;key&gt;) — true if the current object has the specified key?(key-eq &lt;key&gt; &lt;value&gt;) — true if the current object has the specified key, and its value is equal to the specified value?(key-substr &lt;key&gt; &lt;value&gt;) — true if the specified value is a substring of the value of the specified key of the current object Whitespace outside of double- or single-quoted strings has no meaningBoth double- and single-quoted strings can be usedExpressions ending with .. are not supportedMultiple array slices can be specified in square brackets There are various online tools that make working with JSONPath expressions more convenient: https://www.site24x7.com/tools/jsonpath-finder-validator.html https://jsonpathfinder.com/ https://jsonpath.com/ Keep in mind, though, that all JSONPath implementations have unique features/quirks and are subtly incompatible with each other. Exceptions Basic URL exceptions shall not disable rules with the $jsonprune modifier. They can be disabled as described below: @@||example.org^$jsonprune disables all $jsonprune rules for responses from URLs matching ||example.org^.@@||example.org^$jsonprune=text disables all $jsonprune rules with the value of the $jsonprune modifier equal to text for responses from URLs matching ||example.org^. $jsonprune rules can also be disabled by $document, $content and $urlblock exception rules. 注意 When multiple $jsonprune rules match the same request, they are sorted in lexicographical order, the first rule is applied to the original response, and each of the remaining rules is applied to the result of applying the previous one. Examples ||example.org^$jsonprune=\\$..[one\\, &quot;two three&quot;] removes all occurrences of the keys &quot;one&quot; and &quot;two three&quot; anywhere in the JSON document. Input { &quot;one&quot;: 1, &quot;two&quot;: { &quot;two three&quot;: 23, &quot;four five&quot;: 45 } }  Output { &quot;two&quot;: { &quot;four five&quot;: 45 } }  ||example.org^$jsonprune=\\$.a[?(has ad_origin)] removes all children of a that have an ad_origin key. Input { &quot;a&quot;: [ { &quot;ad_origin&quot;: &quot;https://example.org&quot;, &quot;b&quot;: 42 }, { &quot;b&quot;: 1234 } ] }  Output { &quot;a&quot;: [ { &quot;b&quot;: 1234 } ] }  ||example.org^$jsonprune=\\$.*.*[?(key-eq 'Some key' 'Some value')] removes all items that are at nesting level 3 and have a property &quot;Some key&quot; equal to &quot;Some value&quot;. Input { &quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: {&quot;Some key&quot;: &quot;Some value&quot;}, &quot;d&quot;: {&quot;Some key&quot;: &quot;Other value&quot;}}}, &quot;e&quot;: {&quot;f&quot;: [{&quot;Some key&quot;: &quot;Some value&quot;}, {&quot;Some key&quot;: &quot;Other value&quot;}]} }  Output { &quot;a&quot;: {&quot;b&quot;: {&quot;d&quot;: {&quot;Some key&quot;: &quot;Other value&quot;}}}, &quot;e&quot;: {&quot;f&quot;: [{&quot;Some key&quot;: &quot;Other value&quot;}]} }  Nested JSONPath expressions In AdGuard for Windows, Mac and Android with CoreLibs v1.11 or later, JSONPath expressions may be used as keys in filter expressions. ||example.org^$jsonprune=\\$.elems[?(has &quot;\\$.a.b.c&quot;)] removes all children of elems which have a property selectable by the JSONPath expression $.a.b.c. Input { &quot;elems&quot;: [ { &quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: 123}}, &quot;k&quot;: &quot;v&quot; }, { &quot;d&quot;: {&quot;e&quot;: {&quot;f&quot;: 123}}, &quot;k1&quot;: &quot;v1&quot; } ] }  Output { &quot;elems&quot;: [ { &quot;d&quot;: {&quot;e&quot;: {&quot;f&quot;: 123}}, &quot;k1&quot;: &quot;v1&quot; } ] }  ||example.org^$jsonprune=\\$.elems[?(key-eq &quot;\\$.a.b.c&quot; &quot;abc&quot;)] removes all children of elems which have a property selectable by the JSONPath expression $.a.b.c with a value equal to &quot;abc&quot;. Input { &quot;elems&quot;: [ { &quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: 123}}, }, { &quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: &quot;abc&quot;}} } ] }  Output { &quot;elems&quot;: [ { &quot;a&quot;: {&quot;b&quot;: {&quot;c&quot;: 123}} } ] }  Restrictions $jsonprune rules are only compatible with these modifiers: $domain, $third-party, $app, $important, $match-case, and $xmlhttprequest.$jsonprune rules do not apply if the size of the original response is greater than 10 MB. Compatibility Rules with the $jsonprune modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.10 or later. $xmlprune​ $xmlprune rules modify the response to a matching request by removing XML items that match an XPath 1.0 expression. The expression must return a node-set. $xmlprune rules do not modify responses which are not well-formed XML documents. Syntax ||example.org^$xmlprune=expression removes items that match the XPath expression expression from the response. Due to the way rule parsing works, the characters $ and , must be escaped with \\ inside expression. Exceptions Basic URL exceptions shall not disable rules with the $xmlprune modifier. They can be disabled as described below: @@||example.org^$xmlprune disables all $xmlprune rules for responses from URLs matching ||example.org^.@@||example.org^$xmlprune=text disables all $xmlprune rules with the value of the $xmlprune modifier equal to text for responses from URLs matching ||example.org^. $xmlprune rules can also be disabled by $document, $content and $urlblock exception rules. 注意 When multiple $xmlprune rules match the same request, they are applied in lexicographical order. Examples ||example.org^$xmlprune=/bookstore/book[position() mod 2 = 1] removes odd-numbered books from the bookstore. Input &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore&gt; &lt;book category=&quot;cooking&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;children&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;XQuery Kick Start&lt;/title&gt; &lt;author&gt;James McGovern&lt;/author&gt; &lt;author&gt;Per Bothner&lt;/author&gt; &lt;author&gt;Kurt Cagle&lt;/author&gt; &lt;author&gt;James Linn&lt;/author&gt; &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;49.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; &lt;author&gt;Erik T. Ray&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  Output &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore&gt; &lt;book category=&quot;children&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; &lt;author&gt;Erik T. Ray&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  ||example.org^$xmlprune=/bookstore/book[year = 2003] removes books from the year 2003 from the bookstore. Input &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore&gt; &lt;book category=&quot;cooking&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;children&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;XQuery Kick Start&lt;/title&gt; &lt;author&gt;James McGovern&lt;/author&gt; &lt;author&gt;Per Bothner&lt;/author&gt; &lt;author&gt;Kurt Cagle&lt;/author&gt; &lt;author&gt;James Linn&lt;/author&gt; &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;49.99&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;web&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; &lt;author&gt;Erik T. Ray&lt;/author&gt; &lt;year&gt;2003&lt;/year&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  Output &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore&gt; &lt;book category=&quot;cooking&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;book category=&quot;children&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; &lt;author&gt;J K. Rowling&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  ||example.org^$xmlprune=//*/@* removes all attributes from all elements. Input &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore location=&quot;cy&quot;&gt; &lt;book category=&quot;cooking&quot;&gt; &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  Output &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;bookstore&gt; &lt;book&gt; &lt;title&gt;Everyday Italian&lt;/title&gt; &lt;author&gt;Giada De Laurentiis&lt;/author&gt; &lt;year&gt;2005&lt;/year&gt; &lt;price&gt;30.00&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt;  Restrictions $xmlprune rules are only compatible with these modifiers: $domain, $third-party, $app, $important, $match-case, and $xmlhttprequest.$xmlprune rules do not apply if the size of the original response is greater than 10 MB. Compatibility Rules with the $xmlprune modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.15 or later. $network​ This is basically a Firewall-like rule allowing to fully block or unblock access to a specified remote address. $network rules match IP addresses only! You cannot use them to block or unblock access to a domain.To match an IPv6 address, you have to use the collapsed syntax, e.g. use [2001:4860:4860::8888]$network instead of [2001:4860:4860:0:0:0:0:8888]$network.An allowlist $network rule makes AdGuard bypass data to the matching endpoint, hence there will be no further filtering at all.If the IP part starts and ends with / character, it is treated as a regular expression. We recommend to get acquainted with this article for better understanding of regular expressions. Restrictions The $network modifier can only be used in rules together with the $app and $important modifiers, and not with any other modifiers. Examples 174.129.166.49:3478^$network blocks access to 174.129.166.49:3478 (but not to 174.129.166.49:34788).[2001:4860:4860::8888]:443^$network blocks access to [2001:4860:4860::8888]:443.174.129.166.49$network blocks access to 174.129.166.49:*.@@174.129.166.49$network makes AdGuard bypass data to the endpoint. No other rules will be applied./.+:3[0-9]{4}/$network blocks access to any port from 30000 to 39999./8.8.8.(:?8|4)/$network blocks access to both 8.8.8.8 and 8.8.8.4. Compatibility Only AdGuard for Windows, Mac, and Android are technically capable of using rules with $network modifier. $permissions​ This modifier completely changes the rule behavior. If it is applied to a rule, the rule will not block the matching request. Response headers will be modified instead. 信息 In order to use this type of rules, it is required to have a basic understanding of the Permissions Policy security layer. For the requests matching a $permissions rule, AdGuard strengthens response's permissions policy by adding an additional permission policy equal to the $permissions modifier contents. $permissions rules are applied independently from any other rule type. Only document-level exceptions can influence it (see the examples section), but no other basic rules. Syntax $permissions value syntax is similar to the Permissions-Policy header syntax with one exception: comma that separates several features MUST be escaped. Pipe separator | instead of escaped comma is supported as well for better compatibility — see examples below. The list of the available directives is available here. $permissions value can be empty in the case of exception rules — see examples below. Examples ||example.org^$permissions=autoplay=() disallows autoplay media requested through the HTMLMediaElement interface across example.org.@@||example.org/page/*$permissions=autoplay=() disables all rules with the $permissions modifier exactly matching autoplay=() on all the pages matching the rule pattern. For instance, the rule above. It is important to note that the exception rule only takes effect in the case of an exact value match. For example, if you want to disable the rule $permissions=a=()\\,b=(), you need exception rule @@$permissions=a=()\\,b=(), and not @@$permissions=b=()\\,a=(), nor @@$permissions=b=() because b=()\\,a=() or b=() does not match with a=()\\,b=().@@||example.org/page/*$permissions disables all the $permissions rules on all the pages matching the rule pattern.$domain=example.org|example.com,permissions=storage-access=()\\, camera=() disallows using the Storage Access API to request access to unpartitioned cookies and using video input devices across example.org and example.com.||example.org^$permissions=storage-access=()|camera=() — for better compatibility, we also support pipe-separated values for $permissions modifier.@@||example.org^$document or @@||example.org^$urlblock disables all the $permission rules on all the pages matching the rule pattern. 注意 $permissions rules only take effect for main frame and sub frame requests. This means they are applied when a page is loaded or when an iframe is loaded. 注意 If there are multiple $permissions rules that match the same request, multiple Permissions-Policy headers will be added to the response for each rule with their $permissions value. So if you have two rules: ||example.org^$permissions=autoplay=() and ||example.org^$permissions=geolocation=()\\,camera=() that match the same request, the response will contain two Permissions-Policy headers: autoplay=() and geolocation=()\\,camera=(). $permissions modifier limitations​ Limitations Firefox ignores the Permissions-Policy header. For more information, see this issue. Restrictions Characters forbidden in the $permissions value: $$permissions is compatible with three types of modifiers: $domain, $important, and $subdocument. Compatibility Rules with the $permissions modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.11 or later, and AdGuard Browser Extension with TSUrlFilter v3.0.0 or later.Pipe separator | instead of escaped comma is supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.14 or later, and AdGuard Browser Extension with TSUrlFilter v3.0.0 or later. $redirect​ AdGuard is able to redirect web requests to a local &quot;resource&quot;. Syntax AdGuard uses the same filtering rule syntax as uBlock Origin. Also, it is compatible with ABP $rewrite=abp-resource modifier. $redirect is a modifier for the basic filtering rules so rules with this modifier support all other basic modifiers like $domain, $third-party, $script, etc. The value of the $redirect modifier must be the name of the resource that will be used for redirection. Disabling $redirect rules​ ||example.org/script.js$script,redirect=noopjs — this rule redirects all requests to example.org/script.js to the resource named noopjs.||example.org/test.mp4$media,redirect=noopmp4-1s — this rule redirects all requests to example.org/test.mp4 to the resource named noopmp4-1s.@@||example.org^$redirect will disable all $redirect rules for URLs that match ||example.org^.@@||example.org^$redirect=nooptext will disable all rules with $redirect=nooptext for any request that matches ||example.org^. More information on redirects and their usage is available on GitHub. Priorities of $redirect rules​ $redirect rules have higher priority than regular basic blocking rules. This means that if there is a basic blocking rule, the $redirect rule will override it. Allowlist rules with @@ mark have higher priority than $redirect rules. If a basic rule with the $important modifier and the $redirect rule matches the same URL, the latter is overridden unless it's also marked as $important. In short: $important &gt; @@ &gt; $redirect &gt; basic rules. Go to rules priorities for more details. Compatibility Rules with $redirect modifier are not supported by AdGuard Content Blocker, AdGuard for iOS and AdGuard for Safari.$redirect in uBlock Origin supports specifying priority, e.g. $redirect=noopjs:42. AdGuard does not support it and instead just discards the priority postfix. $redirect-rule​ This is basically an alias to $redirect since it has the same &quot;redirection&quot; values and the logic is almost similar. The difference is that $redirect-rule is applied only in the case when the target request is blocked by a different basic rule. Go to rules priorities for more details. Negating $redirect-rule works exactly the same way as for regular $redirect rules. Even more than that, @@||example.org^$redirect will negate both $redirect and $redirect-rule rules. Examples ||example.org/script.js ||example.org^$redirect-rule=noopjs  In this case, only requests to example.org/script.js will be &quot;redirected&quot; to noopjs. All other requests to example.org will be kept intact. Compatibility Rules with $redirect-rule modifier are not supported by AdGuard Content Blocker, AdGuard for iOS, and AdGuard for Safari. $referrerpolicy​ These rules allow overriding of a page's referrer policy. Responses to matching requests will have all of their Referrer-Policy headers replaced with a single header with the value equal to the matching rule's modifier value. If the response carries an HTML document with a &lt;meta name=&quot;referrer&quot;... tag, the content attribute of the tag will also be replaced with the modifier value. An exception rule with a modifier value disables the blocking rule with the same modifier value. An exception rule without a modifier value disables all matched referrer-policy rules. If a request matches multiple $referrerpolicy rules not disabled by exceptions, only one of them (it is not specified which one) is applied. $referrerpolicy rules without specified content-type modifiers apply to $document and $subdocument content types. Examples ||example.com^$referrerpolicy=unsafe-url overrides the referrer policy for example.com with unsafe-url.@@||example.com^$referrerpolicy=unsafe-url disables the previous rule.@@||example.com/abcd.html^$referrerpolicy disables all $referrerpolicy rules on example.com/abcd.html. Compatibility Rules with the $referrerpolicy modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.12 or later. $removeheader​ Rules with $removeheader modifier are intended to remove headers from HTTP requests and responses. The initial motivation for this rule type is to be able to get rid of the Refresh header which is often used to redirect users to an undesirable location. However, this is not the only case where this modifier can be useful. Just like $csp, $redirect, $removeparam, and $cookie, this modifier exists independently, rules with it do not depend on the regular basic rules, i.e. regular exception or blocking rules will not affect it. By default, it only affects response headers. However, you can also change it to remove headers from HTTP requests as well. Syntax Basic syntax ||example.org^$removeheader=header-name removes a response header called header-name||example.org^$removeheader=request:header-name removes a request header called header-name $removeheader is case-insensitive, but we suggest always using lower case. Negating $removeheader This type of rules works pretty much the same way it works with $csp and $redirect modifiers. Use @@ to negate $removeheader: @@||example.org^$removeheader negates all $removeheader rules for URLs that match ||example.org^.@@||example.org^$removeheader=header negates the rule with $removeheader=header for any request matching ||example.org^. $removeheader rules can also be disabled by $document and $urlblock exception rules. But basic exception rules without modifiers will not do that. For example, @@||example.com^ will not disable $removeheader=p for requests to example.com, but @@||example.com^$urlblock will. 注意 In case of multiple $removeheader rules matching a single request, we will apply each of them one by one. Examples ||example.org^$removeheader=refresh removes Refresh header from all HTTP responses returned by example.org and its subdomains. ||example.org^$removeheader=request:x-client-data removes X-Client-Data header from all HTTP requests. Next block of rules removes Refresh and Location headers from all HTTP responses returned by example.org save for requests to example.org/path/*, for which no headers will be removed: ||example.org^$removeheader=refresh ||example.org^$removeheader=location @@||example.org/path/$removeheader  Restrictions This type of rules can be used only in trusted filters. In order to avoid compromising the security $removeheader cannot remove headers from the list below: access-control-allow-originaccess-control-allow-credentialsaccess-control-allow-headersaccess-control-allow-methodsaccess-control-expose-headersaccess-control-max-ageaccess-control-request-headersaccess-control-request-methodorigintiming-allow-originallowcross-origin-embedder-policycross-origin-opener-policycross-origin-resource-policycontent-security-policycontent-security-policy-report-onlyexpect-ctfeature-policyorigin-isolationstrict-transport-securityupgrade-insecure-requestsx-content-type-optionsx-download-optionsx-frame-optionsx-permitted-cross-domain-policiesx-powered-byx-xss-protectionpublic-key-pinspublic-key-pins-report-onlysec-websocket-keysec-websocket-extensionssec-websocket-acceptsec-websocket-protocolsec-websocket-versionp3psec-fetch-modesec-fetch-destsec-fetch-sitesec-fetch-userreferrer-policycontent-typecontent-lengthacceptaccept-encodinghostconnectiontransfer-encodingupgrade $removeheader rules are only compatible with $domain, $third-party, $app, $important, $match-case, and content type modifiers such as $script and $stylesheet. The rules which have any other modifiers are considered invalid and will be discarded. Compatibility Rules with $removeheader modifier are supported by AdGuard for Windows, Mac, and Android, and AdGuard Browser Extension for Chrome, Firefox, and Edge. $removeparam​ 注意 $queryprune is an alias of $removeparam. Since $queryprune is deprecated, avoid using it and use $removeparam instead. Rules with $removeparam modifier are intended to strip query parameters from requests' URLs. Please note that such rules are only applied to GET, HEAD, OPTIONS, and sometimes POST requests. $removeparam rules that do not have any content type modifiers will match only requests where content type is document. Syntax Basic syntax $removeparam=param removes query parameter with the name param from URLs of any request, e.g. a request to http://example.com/page?param=1&amp;another=2 will be transformed into http://example.com/page?another=2. Compatibility Rules with $removeparam modifier are supported by AdGuard for Windows, Mac and, Android with CoreLibs v1.7 or later and AdGuard Browser Extension v3.6 or later. Regular expressions You can also use regular expressions to match query parameters and/or their values: $removeparam=/regexp/[options] — removes query parameters that matches the regexp regular expression from URLs of any request. Unlike basic syntax, it means &quot;remove query parameters normalized to a name=value string which match the regexp regular expression&quot;. [options] here is the list of regular expression options. At the moment, the only supported option is i which makes matching case-insensitive. Escaping special characters Do not forget to escape special characters like ,, / and $ in the regular expressions. Use \\ character for that purpose. For example, an escaped comma should look like this: \\,. 注意 Regexp-type rules target both name and value of the parameter. To minimize mistakes, it is safer to start every regexp with /^ unless you specifically target parameter values. We will try to detect and ignore unescaped $ automatically using a simple rule of thumb — it is not an options delimiter if all three are true: It looks like $/There is another slash character / to the left of itThere is another unescaped dollar sign $ to the left of that slash character Remove all query parameters Specify naked $removeparam to remove all query parameters: ||example.org^$removeparam — removes all query parameters from URLs matching ||example.org^. Inversion Use ~ to apply inversion: $removeparam=~param — removes all query parameters with the name different from param.$removeparam=~/regexp/ — removes all query parameters that do not match the regexp regular expression. Negating $removeparam This sort of rules work pretty much the same way it works with $csp and $redirect modifiers. Use @@ to negate $removeparam: @@||example.org^$removeparam negates all $removeparam rules for URLs that match ||example.org^.@@||example.org^$removeparam=param negates the rule with $removeparam=param for any request matching ||example.org^.@@||example.org^$removeparam=/regexp/ negates the rule with $removeparam=/regexp/ for any request matching ||example.org^. Multiple rules matching a single request In the case when multiple $removeparam rules match a single request, each of them will be applied one by one. Examples $removeparam=/^(utm_source|utm_medium|utm_term)=/ $removeparam=/^(utm_content|utm_campaign|utm_referrer)=/ @@||example.com^$removeparam  With these rules some UTM parameters will be stripped out from any request, except that requests to example.com will not be stripped at all, e.g. http://google.com/page?utm_source=s&amp;utm_referrer=fb.com&amp;utm_content=img will be transformed to http://google.com/page, but http://example.com/page?utm_source=s&amp;utm_referrer=fb.com&amp;utm_content=img will not be affected by the blocking rule. $removeparam=utm_source removes utm_source query parameter from all requests. $removeparam=/utm_.*/ removes all utm_* query parameters from URL queries of any request, e.g. a request to http://example.com/page?utm_source=test will be transformed to http://example.com/page. $removeparam=/^utm_source=campaign$/ removes utm_source query parameter with the value equal to campaign. It does not touch other utm_source parameters. Negating one $removeparam rule and replacing it with a different rule $removeparam=/^(gclid|yclid|fbclid)=/ @@||example.com^$removeparam=/^(gclid|yclid|fbclid)=/ ||example.com^$removeparam=/^(yclid|fbclid)=/  With these rules, Google, Yandex, and Facebook Click IDs will be removed from all requests. There is one exception: Google Click ID (gclid) will not be removed from requests to example.com. Negating $removeparam for all parameters $removeparam=/^(utm_source|utm_medium|utm_term)=/ $removeparam=/^(utm_content|utm_campaign|utm_referrer)=/ @@||example.com^$removeparam  With these rules, specified UTM parameters will be removed from any request save for requests to example.org. $removeparam rules can also be disabled by $document and $urlblock exception rules. But basic exception rules without modifiers do not do that. For example, @@||example.com^ will not disable $removeparam=p for requests to example.com, but @@||example.com^$urlblock will. Restrictions Rules with $removeparam modifier can be used only in trusted filters.$removeparam rules are compatible with basic modifiers, content-type modifiers, and with $important and $app modifiers. Rules with any other modifiers are considered invalid and will be discarded. Compatibility Rules with $removeparam modifier are supported by AdGuard for Windows, Mac, and Android and AdGuard Browser Extension for Chrome, Firefox, and Edge.$removeparam syntax for regular expressions is supported by AdGuard Browser Extension v4.0 and AdGuard for Windows, Mac, and Android with CoreLibs v1.8 or later.POST request types are supported only by AdGuard for Windows, Mac, and Android with CoreLibs v1.10 or later, and AdGuard Browser Extension with TSWebExtension v0.4.6 or later. $replace​ This modifier completely changes the rule behavior. If it is applied, the rule will not block the request. The response is going to be modified instead. You will need some knowledge of regular expressions to use $replace modifier. Features $replace rules apply to any text response, but will not apply to binary (media, image, object, etc.).$replace rules do not apply if the size of the original response is more than 10 MB.$replace rules have a higher priority than other basic rules (including exception rules). So if a request corresponds to two different rules one of which has the $replace modifier, this rule will be applied.Document-level exception rules with $content or $document modifiers do disable $replace rules for requests matching them.Other document-level exception rules ($generichide, $elemhide or $jsinject modifiers) are applied alongside $replace rules. It means that you can modify the page content with a $replace rule and disable cosmetic rules there at the same time. $replace value can be empty in the case of exception rules. See examples section for further information. Multiple rules matching a single request In case if multiple $replace rules match a single request, we will apply each of them. The order is defined alphabetically. Syntax In general, $replace syntax is similar to replacement with regular expressions in Perl. replace = &quot;/&quot; regexp &quot;/&quot; replacement &quot;/&quot; modifiers  regexp — a regular expression.replacement — a string that will be used to replace the string corresponding to regexp.modifiers — a regular expression flags. For example, i — insensitive search, or s — single-line mode. In the $replace value, two characters must be escaped: comma , and dollar sign $. Use backslash \\ for it. For example, an escaped comma looks like this: \\,. Examples ||example.org^$replace=/(&lt;VAST[\\s\\S]*?&gt;)[\\s\\S]*&lt;\\/VAST&gt;/\\$1&lt;\\/VAST&gt;/i  There are three parts in this rule: regexp — (&lt;VAST(.|\\s)*?&gt;)(.|\\s)*&lt;\\/VAST&gt;;replacement — \\$1&lt;\\/VAST&gt; where $ is escaped;modifiers — i for insensitive search. You can see how this rule works here: http://regexr.com/3cesk Multiple $replace rules ||example.org^$replace=/X/Y/||example.org^$replace=/Z/Y/@@||example.org/page/*$replace=/Z/Y/ Both rule 1 and 2 will be applied to all requests sent to example.org.Rule 2 is disabled for requests matching ||example.org/page/, but rule 1 still works! Disabling $replace rules @@||example.org^$replace will disable all $replace rules matching ||example.org^.@@||example.org^$document or @@||example.org^$content will disable all $replace rules originated from pages of example.org including the page itself. Restrictions Rules with $replace modifier can be used only in trusted filters. Compatibility Rules with $replace modifier are supported by AdGuard for Windows, Mac, and Android and AdGuard Browser Extension for Firefox. Such rules do not work in extensions for other browsers because they are unable to modify content on the network level. urltransform​ The $urltransform rules allow you to modify the request URL by replacing the text matched by the regular expression. Features $urltransform rules apply to any request URL text.$urltransform rules can also modify the query part of the URL.$urltransform will not be applied if the original URL is blocked by other rules.$urltransform will be applied before $removeparam rules. The $urltransform value can be empty for exception rules. Multiple rules matching a single request If multiple $urltransform rules match a single request, we will apply each of them. The order is defined alphabetically. Syntax $urltransform syntax is similar to replacement with regular expressions in Perl. urltransform = &quot;/&quot; regexp &quot;/&quot; replacement &quot;/&quot; modifiers  regexp — a regular expression.replacement — a string that will be used to replace the string corresponding to regexp.modifiers — a regular expression flags. For example, i — insensitive search, or s — single-line mode. In the $urltransform value, two characters must be escaped: the comma , and the dollar sign $. Use the backslash character \\ for this. For example, an escaped comma looks like this: \\,. Examples ||example.org^$urltransform=/(pref\\/).*\\/(suf)/\\$1\\$2/i  There are three parts in this rule: regexp — (pref\\/).*\\/(suf);replacement — \\$1\\$2 where $ is escaped;modifiers — i for insensitive search. Multiple $urltransform rules ||example.org^$urltransform=/X/Y/||example.org^$urltransform=/Z/Y/@@||example.org/page/*$urltransform=/Z/Y/ Both rule 1 and 2 will be applied to all requests sent to example.org.Rule 2 is disabled for requests matching ||example.org/page/, but rule 1 still works! Re-matching rules after transforming the URL If the $urltransform rule is applied to a request, all the rules will be re-evaluated against the new URL. E.g., with the following rules: ||example.com^$urltransform=/firstpath/secondpath/ ||example.com/secondpath^  the request to https://example.com/firstpath will be blocked before it is sent. However, $urltransform rules will not be re-applied in this case to avoid infinite recursion, e.g., with the following rules: ||example.com/firstpath^$urltransform=/firstpath/secondpath/ ||example.com/secondpath^$urltransform=/secondpath/firstpath/  the request to https://example.com/fisrtpath will be transformed to https://example.com/secondpath and the second rule will not be applied. Disabling $urltransform rules @@||example.org^$urltransform will disable all $urltransform rules matching ||example.org^.@@||example.org^$urltransform=/Z/Y/ will disable the rule with $urltransform=/Z/Y/ for any request matching ||example.org^. $urltransform rules can also be disabled by $document and $urlblock exception rules. But basic exception rules without modifiers do not do that. For example, @@||example.com^ will not disable $urltransform=/X/Y/ for requests to example.com, but @@||example.com^$urlblock will. Restrictions Rules with the $urltransform modifier can be used only in trusted filters. Compatibility Rules with the $urltransform modifier are supported by AdGuard for Windows, AdGuard for Mac, and AdGuard for Android with CoreLibs v1.15 or later. noop​ noop modifier does nothing and can be used solely to increase rules' readability. It consists of a sequence of underscore characters (_) of any length and can appear in a rule as many times as needed. Examples ||example.com$_,removeparam=/^ss\\\\$/,_,image ||example.com$replace=/bad/good/,___,~third-party  Compatibility Rules with noop modifier are not supported by AdGuard Content Blocker. $empty (deprecated)​ Deprecation notice This modifier is deprecated in favor of the $redirect modifier. Rules with $empty are still supported and being converted into $redirect=nooptext now but the support shall be removed in the future. Usually, blocked requests look like a server error to browser. If you use $empty modifier, AdGuard will emulate a blank response from the server with200 OK status. Examples ||example.org^$empty returns an empty response to all requests to example.org and all subdomains. Compatibility Rules with $empty modifier are not supported by AdGuard Content Blocker, AdGuard for iOS, and AdGuard for Safari. $mp4 (deprecated)​ Deprecation notice This modifier is deprecated in favor of the $redirect modifier. Rules with $mp4 are still supported and being converted into $redirect=noopmp4-1s,media now but the support shall be removed in the future. As a response to blocked request AdGuard returns a short video placeholder. Examples ||example.com/videos/$mp4 blocks all video downloads from ||example.com/videos/* and changes the response to a video placeholder. Compatibility Rules with $mp4 modifier are not supported by AdGuard Content Blocker, AdGuard for iOS, and AdGuard for Safari. "},{"title":"Rule priorities​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#rule-priorities","content":"Each rule has its own priority, which is necessary when several rules match the request and the filtering engine needs to select one of them. Priority is measured by a positive integer. Collisions When two rules with the same priority match the same request, it depends on the filtering engine implementation which one will be selected. 信息 The concept of rule priorities becomes increasingly important in light of Manifest V3 as the existing rules need to be converted to declarativeNetRequest rules. Priority calculation​ To calculate priority, we've categorized modifiers into different groups. These groups are ranked based on their priority, from lowest to highest. A modifier that significantly narrows the scope of a rule adds more weight to its total priority. Conversely, if a rule applies to a broader range of requests, its priority decreases. It's worth noting that there are cases where a single-parameter modifier has a higher priority than multi-parameter ones. For instance, in the case of $domain=example.com|example.org, a rule that includes two domains has a slightly broader effective area than a rule with one specified domain, therefore its priority is lower. The base priority of any rule is 1. If the calculated priority is a floating-point number, it will be rounded up to the smallest integer greater than or equal to the calculated priority. Compatibility The concept of priority has been introduced in TSUrlFilter v2.1.0 and CoreLibs v1.13. Before that AdGuard didn't have any special priority computation algorithm and collisions handling could be different depending on AdGuard product and version.AdGuard for iOS, Safari, and AdGuard Content Blocker rely on the browsers implementation and they cannot follow the rules specified here. 注意 Modifier aliases (1p, 3p, etc.) are not included in these categories, however, they are utilized within the engine to compute the rule priority. Basic modifiers, the presence of each adds 1 to the priority​ $app with negated applications using ~,$denyallow,$domain with negated domains using ~,$match-case,$method with negated methods using ~,$third-party,$to,restricted content-types with ~. When dealing with a negated domain, app, method, or content-type, we add 1 point for the existence of the modifier itself, regardless of the quantity of negated domains or content-types. This is because the rule's scope is already infinitely broad. Put simply, by prohibiting multiple domains, content-types, methods or apps, the scope of the rule becomes only minimally smaller. Defined content-type modifiers, defined methods, defined headers, $all, $popup, specific exceptions​ All allowed content types: $document,$font,$image,$media,$object,$other,$ping,$script,$stylesheet,$subdocument,$websocket,$xmlhttprequest; This also includes rules that implicitly add all content types: $all; Or rules that implicitly add the modifier $document: $popup; Or some specific exceptions that implicitly add $document,subdocument: $content,$elemhide,$extension,$genericblock,$generichide,$jsinject,$specifichide,$urlblock; Or allowed methods via $method. Or rules with $header. The presence of any content-type modifiers adds (50 + 50 / N), where N is the number of modifiers present, for example: ||example.com^$image,script will add 50 + 50 / 2 = 50 + 25 = 75 to the total weight of the rule. The $all also belongs to this category, because it implicitly adds all content type modifiers, e.g., $document,subdocument,image,script,media,&lt;etc&gt; + $popup. The $popup also belongs to this category, because it implicitly adds the modifier $document. Similarly, specific exceptions add $document,subdocument. If there is a $method modifier in the rule with allowed methods it adds (50 + 50 / N), where N is the number of methods allowed, for example: ||example.com^$method=GET|POST|PUT will add 50 + 50 / 3 = 50 + 16.6 = 67 to the total weight of the rule. If there is a $header modifier in the rule it adds 50. $domain or $app with allowed domains or applications​ Specified domains through $domain or specified applications through $app add 100 + 100 / N, where N is the number of modifier values for example: ||example.com^$domain=example.com|example.org|example.net will add 100 + 100 / 3 = 134.3 = 135 or ||example.com^$app=org.example.app1|org.example.app2 will add 100 + 100 / 2 = 151 or ||example.com^$domain=example.com,app=org.example.app1|org.example.app2 will add 100 + 100/1 ($domain part) and 100 + 100/2 ($app part), totaling 350. Modifier values that are regexps or tld will be interpreted as normal entries of the form example.com and counted one by one, for example: ||example.com^$domain=example.* will add 100 + 100 / 1 = 200 or ||example.com^$domain=example.*|adguard.* will add 100 + 100 / 2 = 150. $redirect rules​ $redirect,$redirect-rule. Each of which adds 10^3 to rule priority. Specific exceptions​ $content,$elemhide,$extension,$genericblock,$generichide,$jsinject,$specifichide,$urlblock; Each of which adds 10^4 to the priority. As well as exception with $document modifier: because it's an alias for $elemhide,content,jsinject,urlblock,extension. It will add 10^4 for each modifier from the top list, 10^4 * 5 in total. In addition, each of these exceptions implicitly adds the two allowed content-type modifiers $document,subdocument. Allowlist rules​ Modifier @@ adds 10^5 to rule priority. $important rules​ Modifier $important adds 10^6 to rule priority. Rules for which there is no priority weight​ Other modifiers, which are supposed to perform additional post- or pre-processing of requests, do not add anything to the rules priority. 注意 The $replace modifier takes precedence over all blocking rules of categories 1-3, as well as exception rules from categories 3-5, except $content, because an exception with the $content modifier overrides all $replace rules. Examples​ ||example.com^ Weight of the rule without modifiers: 1. ||example.com^$match-case Rule weight: base weight + weight of the modifier from category 1: 1 + 1 = 2. ||example.org^$removeparam=p Rule weight: base weight + 0, since $removeparam is not involved in the priority calculation: 1 + 0 = 1. ||example.org^$document,redirect=nooptext Rule weight: base weight + allowed content type, category 3 + $redirect from category 6: 1 + (100 + 100 / 1) + 1000 = 1201. @@||example.org^$removeparam=p,document Rule weight: base weight + allowlist rule, category 5 + 0 because $removeparam is not involved in the priority calculation + allowed content type, category 2: 1 + 10000 + 0 + (50 + 50 / 1) = 10101. @@||example.com/ad/*$domain=example.org|example.net,important Rule weight: base weight + allowlist rule, category 5 + important rule, category 7 + allowed domains, category 3: 1 + 10000 + 1000000 + (100 + 100 / 2) = 1010152. @@||example.org^$document without additional modifiers is an alias for @@||example.com^$elemhide,content,jsinject,urlblock,extension Rule weight: base weight + specific exceptions, category 4 + two allowed content types (document and subdocument), category 2: 1 + 10000 * 4 + (50 + 50 / 2) = 40076. *$script,domain=a.com,denyallow=x.com|y.com Rule weight: base weight + allowed content type, category 2 + allowed domain, category 3 + denyallow, category 1: 1 + (50 + 50/1) + (100 + 100 / 1) + 1 = 303. ||example.com^$all — alias to ||example.com^$document,subdocument,image,script,media,etc. + $popup Rule weight: base weight + popup (category 1) + allowed content types (category 2): 1 + 1 + (50 + 50/12) = 55. "},{"title":"Non-basic rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-rules","content":"However, basic rules may not be enough to block ads. Sometimes you need to hide an element or change part of the HTML code of a web page without breaking anything. The rules described in this section are created specifically for this purpose. Categories \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器Element hiding\t✅\t✅\t✅\t✅\t✅\t✅ CSS rules\t✅\t✅\t✅\t✅\t✅\t❌ Extended CSS\t✅\t✅\t✅\t✅\t✅\t❌ HTML filtering\t✅\t❌\t✅\t❌\t❌\t❌ JavaScript\t✅\t✅\t✅\t✅\t✅\t❌ Scriptlets\t✅\t✅\t✅\t✅\t✅\t❌ 注意 ✅ — fully supported❌ — not supported "},{"title":"Cosmetic rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#cosmetic-rules","content":"信息 Work with non-basic rules requires the basic knowledge of HTML and CSS. So, if you want to learn how to make such rules, we recommend to get acquainted with this documentation. "},{"title":"Element hiding rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#cosmetic-elemhide-rules","content":"Element hiding rules are used to hide the elements of web pages. It is similar to applying { display: none; } style to selected element. Element hiding rules may operate differently depending on the platform. Syntax​  rule = [domains] &quot;##&quot; selector domains = [domain0, domain1[, ...[, domainN]]]  selector — CSS selector, defines the elements to be hidden.domains — domain restriction for the rule. If you want to limit the rule application area to certain domains, just enter them separated with commas. For example: example.org,example.com##selector. This rule will be also applied to all subdomains of example.org and example.com. If you want the rule not to be applied to certain domains, start a domain name with ~ sign. For example: ~example.org##selector. You can use both approaches in a single rule. For example, example.org,~subdomain.example.org##domain will work for example.org and all subdomains, except subdomain.example.org. 注意 Element hiding rules are not dependent on each other. If there is a rule example.org##selector in the filter and you add ~example.org##selector both rules will be applied independently. Examples example.com##div.textad — hides a div with the class textad at example.com and all subdomains.example.com,example.org###adblock — hides an element with attribute id equals adblock at example.com, example.org and all subdomains.~example.com##.textad — hides an element with the class textad at all domains, except example.com and its subdomains. 限制 Safari does not support both permitted and restricted domains. So the rules like example.org,~foo.example.org##.textad are invalid in AdGuard for Safari. Exceptions Exceptions can disable some rules on particular domains. They are very similar to usual exception rules, but instead of ## you have to use #@#. For example, there is a rule in filter: ##.textad  If you want to disable it for example.com, you can create an exception rule: example.com#@#.textad  Sometimes, it may be necessary to disable all restriction rules. For example, to conduct tests. To do this, use the exclusion rule without specifying a domain. It will completely disable matching CSS elemhide rule on ALL domains: #@#.textad  The same can be achieved by adding this rule: *#@#.textad  We recommend to use this kind of exceptions only if it is not possible to change the hiding rule itself. In other cases it is better to change the original rule, using domain restrictions. "},{"title":"CSS rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#cosmetic-css-rules","content":"Sometimes, simple hiding of an element is not enough to deal with advertising. For example, blocking an advertising element can just break the page layout. In this case AdGuard can use rules that are much more flexible than hiding rules. With these rules you can basically add any CSS styles to the page. Syntax  rule = [domains] &quot;#$#&quot; selector &quot;{&quot; style &quot;}&quot; domains = [domain0, domain1[, ...[, domainN]]]  selector — CSS selector, that defines the elements we want to apply the style to.domains — domain restriction for the rule. Same principles as in element hiding rules.style — CSS style, that we want to apply to selected elements. Examples example.com#$#body { background-color: #333!important; }  This rule will apply a style background-color: #333!important; to the body element at example.com and all subdomains. Exceptions Just like with element hiding, there is a type of rules that disable the selected CSS style rule for particular domains. Exception rule syntax is almost the same, you just have to change #$# to #@$#. For example, there is a rule in filter: #$#.textad { visibility: hidden; }  If you want to disable it for example.com, you can create an exception rule: example.com#@$#.textad { visibility: hidden; }  We recommend to use this kind of exceptions only if it is not possible to change the CSS rule itself. In other cases it is better to change the original rule, using domain restrictions. Restrictions Styles that lead to loading any resource are forbidden. Basically, it means that you cannot use any &lt;url&gt; type of value in the style. Compatibility CSS rules are not supported by AdGuard Content Blocker. CSS rules may operate differently depending on the platform. "},{"title":"Extended CSS selectors​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#extended-css-selectors","content":"限制Pseudo-class :has()Pseudo-class :contains()Pseudo-class :matches-css()Pseudo-class :matches-attr()Pseudo-class :matches-property()Pseudo-class :xpath()Pseudo-class :nth-ancestor()Pseudo-class :upward()Pseudo-class :remove() and pseudo-property removePseudo-class :is()Pseudo-class :not()Pseudo-class :if-not() (removed) CSS 3.0 is not always enough to block ads. To solve this problem AdGuard extends CSS capabilities by adding support for the new pseudo-elements. We have developed a separate open-source library for non-standard element selecting and applying CSS styles with extended properties. The idea of extended capabilities is an opportunity to match DOM elements with selectors based on their own representation (style, text content, etc.) or relations with other elements. There is also an opportunity to apply styles with non-standard CSS properties. Application area Extended selectors can be used in any cosmetic rule, whether they are element hiding rules or CSS rules. Compatibility Rules with extended CSS selectors are not supported by AdGuard Content Blocker. Syntax Regardless of the CSS pseudo-classes you are using in the rule, you can use special markers to force applying these rules by ExtendedCss. It is recommended to use these markers for all extended CSS cosmetic rules so that it was easier to find them. The syntax for extended CSS rules: #?# — for element hiding, #@?# — for exceptions#$?# — for CSS rules, #@$?# — for exceptions We strongly recommend using these markers any time when you use an extended CSS selector. Examples example.org#?#div:has(&gt; a[target=&quot;_blank&quot;][rel=&quot;nofollow&quot;]) — this rule blocks all div elements containing a child node that has a link with the attributes [target=&quot;_blank&quot;][rel=&quot;nofollow&quot;]. The rule applies only to example.org and its subdomains.example.com#$?#h3:contains(cookies) { display: none!important; } — this rule sets the style display: none!important to all h3 elements that contain the word cookies. The rule applies only to example.com and all its subdomains.example.net#?#.banner:matches-css(width: 360px) — this rule blocks all .banner elements with the style property width: 360px. The rule applies only to example.net and its subdomains.example.net#@?#.banner:matches-css(width: 360px) — this rule will disable the previous rule. You can apply standard CSS selectors using the ExtendedCss library by using the rule marker #?#, e.g. #?#div.banner. Learn more about how to debug extended selectors. 注意 Some pseudo-classes do not require selector before it. Still adding the universal selector * makes an extended selector easier to read, even though it has no effect on the matching behavior. So selector #block :has(&gt; .inner) works exactly like #block *:has(&gt; .inner) but second one is more obvious. Pseudo-class names are case-insensitive, e.g. :HAS() works as :has(). Still the lower-case names are used commonly. ExtendedCss Limitations​ CSS comments and at-rules are not supported. Specific pseudo-class may have its own limitations: :has(), :xpath(), :nth-ancestor(), :upward(), :is(), :not(), and :remove(). Pseudo-class :has()​ Draft CSS 4.0 specification describes the :has() pseudo-class. Unfortunately, it is not yet supported by all popular browsers. 注意 Rules with the :has() pseudo-class must use the native implementation of :has() if they use ## marker and if it is possible, i.e. with no other extended selectors inside. To force applying of ExtendedCss rules with :has(), use #?#/#$?# marker explicitly. Compatibility with other pseudo-classes Synonyms :-abp-has() is supported by ExtendedCss for better compatibility. Removal notice :if() is no longer supported as a synonym for :has(). Syntax [target]:has(selector)  target — optional, standard or extended CSS selector, can be skipped for checking any elementselector — required, standard or extended CSS selector The pseudo-class :has() selects the target elements that fit to the selector. Also the selector can start with a combinator. A selector list can be set in selector as well. In this case all selectors in the list are being matched for now. In the future it will be fixed for &lt;forgiving-relative-selector-list&gt; as argument. :has() limitations​ Usage of the :has() pseudo-class is restricted for some cases (2, 3): disallow :has() inside the pseudos accepting only compound selectors;disallow :has() after regular pseudo-elements. Native :has() pseudo-class does not allow :has(), :is(), :where() inside :has() argument to avoid increasing the :has() invalidation complexity (case 1). But ExtendedCss did not have such limitation earlier and filter lists already contain such rules, so we have not added this limitation to ExtendedCss and allow to use :has() inside :has() as it was possible before. To use it, just force ExtendedCss usage by setting #?#/#$?# rule marker. Native implementation does not allow any usage of :scope inside the :has() argument ([1], [2]). Still, there are some such rules in filter lists: div:has(:scope a) which we continue to support by simply converting them to div:has(&gt; a), as it used to be done previously. Examples div:has(.banner) selects all div elements which include an element with the banner class: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div&gt;Selected &lt;span class=&quot;banner&quot;&gt;inner element&lt;/span&gt; &lt;/div&gt;  div:has(&gt; .banner) selects all div elements which include an banner class element as a direct child of div: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div&gt;Selected &lt;p class=&quot;banner&quot;&gt;child element&lt;/p&gt; &lt;/div&gt;  div:has(+ .banner) selects all div elements preceding banner class element which immediately follows the div and both are children of the same parent: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div&gt;Selected&lt;/div&gt; &lt;p class=&quot;banner&quot;&gt;adjacent sibling&lt;/p&gt; &lt;span&gt;Not selected&lt;/span&gt;  div:has(~ .banner) selects all div elements preceding banner class element which follows the div but not necessarily immediately and both are children of the same parent: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div&gt;Selected&lt;/div&gt; &lt;span&gt;Not selected&lt;/span&gt; &lt;p class=&quot;banner&quot;&gt;general sibling&lt;/p&gt;  div:has(span, .banner) selects all div elements which include both span element and banner class element: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div&gt;Selected &lt;span&gt;child span&lt;/span&gt; &lt;p class=&quot;banner&quot;&gt;child .banner&lt;/p&gt; &lt;/div&gt;  Old syntax Backward compatible syntax for :has() is supported but not recommended. Pseudo-class :contains()​ The :contains() pseudo-class principle is very simple: it allows to select the elements that contain specified text or which content matches a specified regular expression. Regexp flags are supported. 注意 The :contains() pseudo-class uses the textContent element property for matching, not the innerHTML. Compatibility with other pseudo-classes Synonyms :-abp-contains() and :has-text() are supported for better compatibility. Syntax [target]:contains(match)  target — optional, standard or extended CSS selector, can be skipped for checking any elementmatch — required, string or regular expression for matching element textContent. Regular expression flags are supported. Examples For such DOM: &lt;!-- HTML code --&gt; &lt;div&gt;Not selected&lt;/div&gt; &lt;div id=&quot;match&quot;&gt;Selected as IT contains &quot;banner&quot;&lt;/div&gt; &lt;div&gt;Not selected &lt;div class=&quot;banner&quot;&gt;&lt;/div&gt;&lt;/div&gt;  the element div#match can be selected by any of these extended selectors: ! plain text div:contains(banner) ! regular expression div:contains(/as .* banner/) ! regular expression with flags div:contains(/it .* banner/gi)  注意 Only the div with id=match is selected because the next element does not contain any text, and banner is a part of code, not a text. Old syntax Backward compatible syntax for :contains() is supported but not recommended. Pseudo-class :matches-css()​ The :matches-css() pseudo-class allows to match the element by its current style properties. The work of the pseudo-class is based on using the Window.getComputedStyle() method. Syntax [target]:matches-css([pseudo-element, ] property: pattern)  target — optional, standard or extended CSS selector, can be skipped for checking any elementpseudo-element — optional, valid standard pseudo-element, e.g. before, after, first-line, etc.property — required, a name of CSS property to check the element forpattern — required, a value pattern that is using the same simple wildcard matching as in the basic url filtering rules OR a regular expression. For this type of matching, AdGuard always does matching in a case-insensitive manner. In the case of a regular expression, the pattern looks like /regexp/. Special characters escaping and unescaping For non-regexp patterns (,),[,] must be unescaped, e.g. :matches-css(background-image:url(data:*)). For regexp patterns \\ should be escaped, e.g. :matches-css(background-image: /^url\\\\(&quot;data:image\\\\/gif;base64.+/). Examples For such DOM: &lt;!-- HTML code --&gt; &lt;style type=&quot;text/css&quot;&gt; #matched::before { content: &quot;Block me&quot; } &lt;/style&gt; &lt;div id=&quot;matched&quot;&gt;&lt;/div&gt; &lt;div id=&quot;not-matched&quot;&gt;&lt;/div&gt;  the div elements with pseudo-element ::before and with specified content property can be selected by any of these extended selectors: ! string pattern div:matches-css(before, content: block me) ! string pattern with wildcard div:matches-css(before, content: block*) ! regular expression pattern div:matches-css(before, content: /block me/)  Restrictions Regexp patterns do not support flags. Compatibility Obsolete pseudo-classes :matches-css-before() and :matches-css-after() are no longer recommended but still are supported for better compatibility. Old syntax Backward compatible syntax for :matches-css() is supported but not recommended. Pseudo-class :matches-attr()​ The :matches-attr() pseudo-class allows selecting an element by its attributes, especially if they are randomized. Syntax [target]:matches-attr(&quot;name&quot;[=&quot;value&quot;])  target — optional, standard or extended CSS selector, can be skipped for checking any elementname — required, simple string or string with wildcard or regular expression for attribute name matchingvalue — optional, simple string or string with wildcard or regular expression for attribute value matching Escaping special characters For regexp patterns &quot; and \\ should be escaped, e.g. div:matches-attr(class=/[\\\\w]{5}/). Examples div:matches-attr(&quot;ad-link&quot;) selects the element div#target1: &lt;!-- HTML code --&gt; &lt;div id=&quot;target1&quot; ad-link=&quot;1random23-banner_240x400&quot;&gt;&lt;/div&gt;  div:matches-attr(&quot;data-*&quot;=&quot;adBanner&quot;) selects the element div#target2: &lt;!-- HTML code --&gt; &lt;div id=&quot;target2&quot; data-1random23=&quot;adBanner&quot;&gt;&lt;/div&gt;  div:matches-attr(*unit*=/^click$/) selects the element div#target3: &lt;!-- HTML code --&gt; &lt;div id=&quot;target3&quot; random123-unit094=&quot;click&quot;&gt;&lt;/div&gt;  *:matches-attr(&quot;/.{5,}delay$/&quot;=&quot;/^[0-9]*$/&quot;) selects the element #target4: &lt;!-- HTML code --&gt; &lt;div&gt; &lt;inner-random23 id=&quot;target4&quot; nt4f5be90delay=&quot;1000&quot;&gt;&lt;/inner-random23&gt; &lt;/div&gt;  Restrictions Regexp patterns do not support flags. Pseudo-class :matches-property()​ The :matches-property() pseudo-class allows selecting an element by matching its properties. Syntax [target]:matches-property(&quot;name&quot;[=&quot;value&quot;])  target — optional, standard or extended CSS selector, can be skipped for checking any elementname — required, simple string or string with wildcard or regular expression for element property name matchingvalue — optional, simple string or string with wildcard or regular expression for element property value matching Escaping special characters For regexp patterns &quot; and \\ must be escaped, e.g. div:matches-property(prop=/[\\\\w]{4}/). 注意 Regexp patterns are supported in name for any property in chain, e.g. prop./^unit[\\\\d]{4}$/.type. Examples An element with such properties: divProperties = { id: 1, check: { track: true, unit_2random1: true, }, memoizedProps: { key: null, tag: 12, _owner: { effectTag: 1, src: 'ad.com', }, }, };  can be selected by any of these extended selectors: div:matches-property(check.track) div:matches-property(&quot;check./^unit_.{4,8}$/&quot;) div:matches-property(&quot;check.unit_*&quot;=true) div:matches-property(memoizedProps.key=&quot;null&quot;) div:matches-property(memoizedProps._owner.src=/ad/)  For filters maintainers To check properties of a specific element, do the following: Inspect the page element or select it in Elements tab of browser DevToolsRun console.dir($0) in Console tab Restrictions Regexp patterns do not support flags. Pseudo-class :xpath()​ The :xpath() pseudo-class allows selecting an element by evaluating an XPath expression. Syntax [target]:xpath(expression)  target- optional, standard or extended CSS selectorexpression — required, valid XPath expression :xpath() limitations​ target can be omitted so it is optional. For any other pseudo-class that would mean &quot;apply to all DOM nodes&quot;, but in case of :xpath() it just means &quot;apply to the whole document&quot;, and such applying slows elements selecting significantly. That's why rules like #?#:xpath(expression) are limited to looking inside the body tag. For example, rule #?#:xpath(//div[@data-st-area=\\'Advert\\']) is parsed as #?#body:xpath(//div[@data-st-area=\\'Advert\\']). Extended selectors with defined target as any selector — *:xpath(expression) — can still be used but it is not recommended, so target should be specified instead. Works properly only at the end of selector, except for pseudo-class :remove(). Examples :xpath(//*[@class=&quot;banner&quot;]) selects the element div#target1: &lt;!-- HTML code --&gt; &lt;div id=&quot;target1&quot; class=&quot;banner&quot;&gt;&lt;/div&gt;  :xpath(//*[@class=&quot;inner&quot;]/..) selects the element div#target2: &lt;!-- HTML code --&gt; &lt;div id=&quot;target2&quot;&gt; &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; &lt;/div&gt;  Pseudo-class :nth-ancestor()​ The :nth-ancestor() pseudo-class allows to lookup the nth ancestor relative to the previously selected element. subject:nth-ancestor(n)  subject — required, standard or extended CSS selectorn — required, number &gt;= 1 and &lt; 256, distance to the needed ancestor from the element selected by subject Syntax subject:nth-ancestor(n)  subject — required, standard or extended CSS selectorn — required, number &gt;= 1 and &lt; 256, distance to the needed ancestor from the element selected by subject :nth-ancestor() limitations​ The :nth-ancestor() pseudo-class is not supported inside the argument of the :not() pseudo-class. Examples For such DOM: &lt;!-- HTML code --&gt; &lt;div id=&quot;target1&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;div id=&quot;target2&quot;&gt; &lt;div&gt; &lt;div&gt; &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  .child:nth-ancestor(1) selects the element div#target1, div[class=&quot;inner&quot;]:nth-ancestor(3) selects the element div#target2. Pseudo-class :upward()​ The :upward() pseudo-class allows to lookup the ancestor relative to the previously selected element. Syntax subject:upward(ancestor)  subject — required, standard or extended CSS selectorancestor — required, specification for the ancestor of the element selected by subject, can be set as: number &gt;= 1 and &lt; 256 for distance to the needed ancestor, same as :nth-ancestor()standard CSS selector for matching closest ancestor :upward() limitations​ The :upward() pseudo-class is not supported inside the argument of the :not() pseudo-class. Examples For such DOM: &lt;!-- HTML code --&gt; &lt;div id=&quot;target1&quot; data=&quot;true&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; &lt;div id=&quot;target2&quot;&gt; &lt;div&gt; &lt;div&gt; &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  .inner:upward(div[data]) selects the element div#target1, .inner:upward(div[id]) selects the element div#target2, .child:upward(1) selects the element div#target1, .inner:upward(3) selects the element div#target2. Pseudo-class :remove() and pseudo-property remove​ Sometimes, it is necessary to remove a matching element instead of hiding it or applying custom styles. In order to do it, you can use the :remove() pseudo-class as well as the remove pseudo-property. Pseudo-class :remove() can be placed only at the end of a selector. Syntax ! pseudo-class selector:remove() ! pseudo-property selector { remove: true; }  selector — required, standard or extended CSS selector :remove() and remove limitations​ The :remove() pseudo-class is limited to work properly only at the end of selector. For applying the :remove() pseudo-class to any element, the universal selector * should be used. Otherwise such extended selector may be considered as invalid, e.g. .banner &gt; :remove() is not valid for removing any child element of banner class element, so it should look like .banner &gt; *:remove(). If the :remove() pseudo-class or the remove pseudo-property is used, all style properties are ignored except for the debug pseudo-property. Examples div.banner:remove() div:has(&gt; div[ad-attr]):remove() div:contains(advertisement) { remove: true; } div[class]:has(&gt; a &gt; img) { remove: true; }  注意 Rules with the remove pseudo-property must use #$?# marker: $ for CSS-style rule syntax, ? for ExtendedCss syntax. Pseudo-class :is()​ The :is() pseudo-class allows to match any element that can be selected by any of selectors passed to it. Invalid selectors are skipped and the pseudo-class deals with valid ones with no error thrown. Our implementation of the native :is() pseudo-class. Syntax [target]:is(selectors)  target — optional, standard or extended CSS selector, can be skipped for checking any elementselectors — forgiving selector list of standard or extended selectors. For extended selectors, only compound selectors are supported, not complex. :is() limitations​ Rules with the :is() pseudo-class must use the native implementation of :is() if rules use ## marker and it is possible, i.e. with no other extended selectors inside. To force applying ExtendedCss rules with :is(), use #?#/#$?# marker explicitly. If the :is() pseudo-class argument selectors is an extended selector, due to the way how the :is() pseudo-class is implemented in ExtendedCss v2.0, it is impossible to apply it to the top DOM node which is html, i.e. #?#html:is(&lt;extended-selectors&gt;) does not work. So if target is not defined or defined as the universal selector *, the extended pseudo-class applying is limited to html's children, e.g. rules #?#:is(...) and #?#*:is(...) are parsed as #?#html *:is(...). Please note that there is no such limitation for a standard selector argument, i.e. #?#html:is(.locked) works fine. Complex selectors with extended pseudo-classes are not supported as selectors argument for :is() pseudo-class, only compound ones are allowed. Check examples below for more details. Examples #container *:is(.inner, .footer) selects only the element div#target1: &lt;!-- HTML code --&gt; &lt;div id=&quot;container&quot;&gt; &lt;div data=&quot;true&quot;&gt; &lt;div&gt; &lt;div id=&quot;target1&quot; class=&quot;inner&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  Due to limitations :is(*:not([class]) &gt; .banner)' does not work but :is(*:not([class]):has(&gt; .banner)) can be used instead of it to select the element div#target2: &lt;!-- HTML code --&gt; &lt;span class=&quot;span&quot;&gt;text&lt;/span&gt; &lt;div id=&quot;target2&quot;&gt; &lt;p class=&quot;banner&quot;&gt;inner paragraph&lt;/p&gt; &lt;/div&gt;  Pseudo-class :not()​ The :not() pseudo-class allows to select elements which are not matched by selectors passed as argument. Invalid argument selectors are not allowed and error is to be thrown. Our implementation of the :not() pseudo-class. Syntax [target]:not(selectors)  target — optional, standard or extended CSS selector, can be skipped for checking any elementselectors — list of standard or extended selectors :not() limitations​ Rules with the :not() pseudo-class must use the native implementation of :not() if rules use ## marker and it is possible, i.e. with no other extended selectors inside. To force applying ExtendedCss rules with :not(), use #?#/#$?# marker explicitly. If the :not() pseudo-class argument selectors is an extended selector, due to the way how the :not() pseudo-class is implemented in ExtendedCss v2.0, it is impossible to apply it to the top DOM node which is html, i.e. #?#html:not(&lt;extended-selectors&gt;) does not work. So if target is not defined or defined as the universal selector *, the extended pseudo-class applying is limited to html's children, e.g. rules #?#:not(...) and #?#*:not(...) are parsed as #?#html *:not(...). Please note that there is no such limitation for a standard selector argument, i.e. #?#html:not(.locked) works fine. The :not() is considered as a standard CSS pseudo-class inside the argument of the :upward() pseudo-class because :upward() supports only standard selectors. &quot;Up-looking&quot; pseudo-classes which are :nth-ancestor() and :upward() are not supported inside selectors argument for :not() pseudo-class. Examples #container &gt; *:not(h2, .text) selects only the element div#target1: &lt;!-- HTML code --&gt; &lt;div id=&quot;container&quot;&gt; &lt;h2&gt;Header&lt;/h2&gt; &lt;div id=&quot;target1&quot;&gt;&lt;/div&gt; &lt;span class=&quot;text&quot;&gt;text&lt;/span&gt; &lt;/div&gt;  Pseudo-class :if-not() (removed)​ Removal notice The :if-not() pseudo-class is removed and is no longer supported. Rules with it are considered as invalid. This pseudo-class was basically a shortcut for :not(:has()). It was supported by ExtendedCss for better compatibility with some filters subscriptions. "},{"title":"Cosmetic rules priority​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#cosmetic-rules-priority","content":"The way element hiding and CSS rules are applied is platform-specific. In AdGuard for Windows, Mac, and Android, we use a stylesheet injected into the page. The priority of cosmetic rules is the same as any other websites' CSS stylesheet. But there is a limitation: element hiding and CSS rules cannot override inline styles. In such cases, it is recommended to use extended selectors or HTML filtering. In AdGuard Browser Extension, the so called &quot;user stylesheets&quot; are used. They have higher priority than even the inline styles. Extended CSS selectors use JavaScript to work and basically add an inline style themselves, therefore they can override any style. "},{"title":"HTML filtering rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#html-filtering-rules","content":"In most cases, the basis and cosmetic rules are enough to filter ads. But sometimes it is necessary to change the HTML-code of the page itself before it is loaded. This is when you need filtering rules for HTML content. They allow to indicate the HTML elements to be cut out before the browser loads the page. Compatibility HTML filtering rules are supported by AdGuard for Windows, Mac, Android, and AdGuard Browser Extension for Firefox. Such rules do not work in extensions for other browsers because they are unable to modify content on network level. "},{"title":"Syntax​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#syntax-1","content":" selector = [tagName] [attributes] [pseudoClasses] combinator = &quot;&gt;&quot; rule = [domains] &quot;$$&quot; selector *(combinator selector) domains = [domain0, domain1[, ...[, domainN]]] attributes = &quot;[&quot; name0 = value0 &quot;]&quot; &quot;[&quot; name1 = value2 &quot;]&quot; ... &quot;[&quot; nameN = valueN &quot;]&quot; pseudoClasses = pseudoClass *pseudoClass pseudoClass = &quot;:&quot; pseudoName [ &quot;(&quot; pseudoArgs &quot;)&quot; ]  tagName — name of the element in lower case, for example, div or script.domains — domain restriction for the rule. Same principles as in element hiding rule syntax.attributes — a list of attributes that limit the selection of elements. name — attribute name, value — substring, that is contained in attribute value.pseudoName — the name of a pseudo-class.pseudoArgs — the arguments of a function-style pseudo-class.combinator — an operator that works similarly to the CSS child combinator: that is, the selector on the right of the combinator will only match an element whose direct parent matches the selector on the left of the combinator. "},{"title":"Examples​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#examples-2","content":"HTML code: &lt;script data-src=&quot;/banner.js&quot;&gt;&lt;/script&gt;  Rule: example.org$$script[data-src=&quot;banner&quot;]  This rule removes all script elements with the attribute data-src containing the substring banner. The rule applies only to example.org and all its subdomains. "},{"title":"Special attributes​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#special-attributes","content":"In addition to usual attributes, which value is every element checked for, there is a set of special attributes that change the way a rule works. Below there is a list of these attributes: tag-content​ Deprecation notice This special attribute may become unsupported in the future. Prefer using the :contains() pseudo-class where it is available. This is the most frequently used special attribute. It limits selection with those elements whose innerHTML code contains the specified substring. You must use &quot;&quot; to escape &quot;, for instance: $$script[tag-content=&quot;alert(&quot;&quot;this is ad&quot;&quot;)&quot;] For example, take a look at this HTML code: &lt;script type=&quot;text/javascript&quot;&gt; document.write('&lt;div&gt;banner text&lt;/div&gt;&quot; /&gt;'); &lt;/script&gt;  Following rule will delete all script elements with a banner substring in their code: $$script[tag-content=&quot;banner&quot;]  Limitations The tag-content special attribute must not appear in a selector to the left of a &gt; combinator. wildcard​ Deprecation notice This special attribute may become unsupported in the future. Prefer using the :contains() pseudo-class where it is available. This special attribute works almost like tag-content and allows you to check the innerHTML code of the document. Rule will check if HTML code of the element fits to the search pattern. You must use &quot;&quot; to escape &quot;, for instance: $$script[wildcard=&quot;&quot;banner&quot;&quot;] For example: $$script[wildcard=&quot;*banner*text*&quot;] It checks if the element code contains the two consecutive substrings banner and text. Limitations The wildcard special attribute must not appear in a selector to the left of a &gt; combinator. max-length​ Deprecation notice This special attribute may become unsupported in the future. Prefer using the :contains() pseudo-class with a regular expression where it is available. Specifies the maximum length for content of HTML element. If this parameter is set and the content length exceeds the value, a rule does not apply to the element. Default value If this parameter is not specified, the max-length is considered to be 8192. For example: $$div[tag-content=&quot;banner&quot;][max-length=&quot;400&quot;]  This rule will remove all the div elements, whose code contains the substring banner and the length of which does not exceed 400 characters. Limitations The max-length special attribute must not appear in a selector to the left of a &gt; combinator. min-length​ Deprecation notice This special attribute may become unsupported in the future. Prefer using the :contains() pseudo-class with a regular expression where it is available. Specifies the minimum length for content of HTML element. If this parameter is set and the content length is less than preset value, a rule does not apply to the element. For example: $$div[tag-content=&quot;banner&quot;][min-length=&quot;400&quot;]  This rule will remove all the div elements, whose code contains the substring banner and the length of which exceeds 400 characters. Limitations The min-length special attribute must not appear in a selector to the left of a &gt; combinator. "},{"title":"Pseudo-classes​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#pseudo-classes","content":":contains()​ Syntax​ :contains(unquoted text)  或者 :contains(/reg(ular )?ex(pression)?/)  Compatibility :-abp-contains() and :has-text() are synonyms for :contains(). Compatibility The :contains() pseudo-class is supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.13 or later. Requires that the inner HTML of the element contains the specified text or matches the specified regular expression. Limitations A :contains() pseudo-class must not appear in a selector to the left of a &gt; combinator. "},{"title":"Exceptions​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#exceptions","content":"Similar to hiding rules, there is a special type of rules that disable the selected HTML filtering rule for particular domains. The syntax is the same, you just have to change $$ to $@$. For example, there is a rule in filter: $$script[tag-content=&quot;banner&quot;]  If you want to disable it for example.com, you can create an exception rule: example.com$@$script[tag-content=&quot;banner&quot;]  Sometimes, it may be necessary to disable all restriction rules. For example, to conduct tests. To do this, use the exclusion rule without specifying a domain. $@$script[tag-content=&quot;banner&quot;]  We recommend to use this kind of exceptions only if it is not possible to change the hiding rule itself. In other cases it is better to change the original rule, using domain restrictions. "},{"title":"JavaScript rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#javascript-rules","content":"AdGuard supports a special type of rules that allows you to inject any javascript code to websites pages. We strongly recommend using scriptlets instead of JavaScript rules whenever possible. JS rules are supposed to help with debugging, but as a long-time solution a scriptlet rule should be used. Syntax rule = [domains] &quot;#%#&quot; script  domains — domain restriction for the rule. Same principles as in element hiding rules.script — arbitrary javascript code in one string. Examples example.org#%#window.__gaq = undefined; executes the code window.__gaq = undefined; on all pages at example.org and all subdomains. Exceptions Similar to hiding rules, there is a special type of rules that disable the selected javascript rule for particular domains. The syntax is the same, you just have to change #%# to #@%#. For example, there is a rule in filter: #%#window.__gaq = undefined;  If you want to disable it for example.com, you can create an exception rule: example.com#@%#window.__gaq = undefined;  Sometimes, it may be necessary to disable all restriction rules. For example, to conduct tests. To do this, use the exclusion rule without specifying a domain. #@%#window.__gaq = undefined;  We recommend to use this kind of exceptions only if it is not possible to change the hiding rule itself. In other cases it is better to change the original rule, using domain restrictions. Restrictions JavaScript rules can be used only in trusted filters. Compatibility JavaScript rules are not supported by AdGuard Content Blocker. "},{"title":"Scriptlet rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#scriptlets","content":"Scriptlet is a JavaScript function that provides extended capabilities for content blocking. These functions can be used in a declarative manner in AdGuard filtering rules. 注意 AdGuard supports a lot of different scriptlets. In order to achieve cross-blocker compatibility, we also support syntax of uBO and ABP. Syntax rule = [domains] &quot;#%#//scriptlet(&quot; scriptletName arguments &quot;)&quot;  scriptletName — required, a name of the scriptlet from AdGuard's Scriptlets libraryarguments — optional, a list of string arguments (no other types of arguments are supported) Examples example.org#%#//scriptlet(&quot;abort-on-property-read&quot;, &quot;alert&quot;)  This rule will be applied to example.org and subdomains pages and will execute the abort-on-property-read scriptlet with the alert parameter. Learn more about how to debug scriptlets. More information about scriptlets can be found on GitHub. Compatibility Scriptlet rules are not supported by AdGuard Content Blocker. "},{"title":"Trusted scriptlets​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#trusted-scriptlets","content":"Trusted scriptlets are scriptlets with extended functionality. It means the same syntax and restrictions. Trusted scriptlet names are prefixed with trusted-, e.g. trusted-set-cookie, to be easily distinguished from common scriptlets. 注意 Trusted scriptlets are not compatible with other ad blockers except AdGuard. Restrictions Trusted scriptlets rules can be used only in trusted filters. Compatibility Trusted scriptlets rules are not supported by AdGuard Content Blocker. Learn more about how to debug scriptlets. More information about trusted scriptlets can be found on GitHub. "},{"title":"Modifiers for non-basic type of rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-rules-modifiers","content":"Each rule can be modified using the modifiers described in the following paragraphs. Syntax {#non-basic-rules-modifiers-syntax} rule = &quot;[$&quot; modifiers &quot;]&quot; [rule text] modifiers = modifier0[, modifier1[, ...[, modifierN]]]  modifier — set of the modifiers described below.rule text — a rule to be modified. For example, [$domain=example.com,app=test_app]##selector. In the modifiers values, the following characters must be escaped: [, ], ,, and \\ (unless it is used for the escaping). Use \\ to escape them. For example, an escaped bracket looks like this: \\]. Modifier \\ Products\tCoreLibs apps\tAdGuard for Chromium\tAdGuard for Firefox\tAdGuard iOS版\tAdGuard Safari版\tAdGuard 内容拦截器$app\t✅\t❌\t❌\t❌\t❌\t❌ $domain\t✅\t✅\t✅\t✅\t✅\t❌ $path\t✅\t✅\t✅\t✅\t✅\t❌ $url\t✅\t⏳\t⏳\t❌\t❌\t❌ 注意 ✅ — fully supported⏳ — feature that has been implemented or is planned to be implemented but is not yet available in any product❌ — not supported "},{"title":"$app​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-app-modifier","content":"$app modifier lets you narrow the rule coverage down to a specific application or a list of applications. The modifier's behavior and syntax perfectly match the corresponding basic rules $app modifier. Examples [$app=org.example.app]example.com##.textad hides a div with the class textad at example.com and all subdomains in requests sent from the org.example.app Android app.[$app=~org.example.app1|~org.example.app2]example.com##.textad hides a div with the class textad at example.com and all subdomains in requests sent from any app except org.example.app1 and org.example.app2.[$app=com.apple.Safari]example.org#%#//scriptlet('prevent-setInterval', 'check', '!300') applies scriptlet prevent-setInterval only in Safari browser on Mac.[$app=org.example.app]#@#.textad disables all ##.textad rules for all domains while using org.example.app. Compatibility Such rules with $app modifier are supported by AdGuard for Windows, Mac, and Android. "},{"title":"$domain​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-domain-modifier","content":"$domain modifier limits the rule application area to a list of domains and their subdomains. The modifier's behavior and syntax perfectly match the corresponding basic rules $domain modifier. Examples [$domain=example.com]##.textad — hides a div with the class textad at example.com and all subdomains.[$domain=example.com|example.org]###adblock — hides an element with attribute id equals adblock at example.com, example.org and all subdomains.[$domain=~example.com]##.textad — this rule hides div elements of the class textad for all domains, except example.com and its subdomains. There are 2 ways to specify domain restrictions for non-basic rules: the &quot;classic&quot; way is to specify domains before rule mask and attributes: example.com##.textad;the modifier approach is to specify domains via $domain modifier: [$domain=example.com]##.textad. But rules with mixed style domains restriction are considered invalid. So, for example, the rule [$domain=example.org]example.com##.textad will be ignored. Compatibility Such rules with $domain modifier are supported by AdGuard for Windows, Mac, Android, and AdGuard Browser Extension for Chrome, Firefox, Edge. "},{"title":"$path​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-path-modifier","content":"$path modifier limits the rule application area to specific locations or pages on websites. Syntax $path [&quot;=&quot; pattern]  pattern — optional, a path mask to which the rule is restricted. Its syntax and behavior are pretty much the same as with the pattern for basic rules. You can also use special characters, except for ||, which does not make any sense in this case (see examples below). If pattern is not set for $path, rule will apply only on the main page of website. $path modifier matches the query string as well. $path modifier supports regular expressions in the same way basic rules do. Examples [$path=page.html]##.textad hides a div with the class textad at /page.html or /page.html?&lt;query&gt; or /sub/page.html or /another_page.html[$path=/page.html]##.textad hides a div with the class textad at /page.html or /page.html?&lt;query&gt; or /sub/page.html of any domain but not at /another_page.html[$path=|/page.html]##.textad hides a div with the class textad at /page.html or /page.html?&lt;query&gt; of any domain but not at /sub/page.html[$path=/page.html|]##.textad hides a div with the class textad at /page.html or /sub/page.html of any domain but not at /page.html?&lt;query&gt;[$path=/page*.html]example.com##.textad hides a div with the class textad at /page1.html or /page2.html or any other path matching /page&lt;...&gt;.html of example.com[$path]example.com##.textad hides a div with the class textad at the main page of example.com[$domain=example.com,path=/page.html]##.textad hides a div with the class textad at page.html of example.com and all subdomains but not at another_page.html[$path=/\\\\/(sub1|sub2)\\\\/page\\\\.html/]##.textad hides a div with the class textad at both /sub1/page.html and /sub2/page.html of any domain (please note the escaped special characters) Compatibility Rules with $path modifier are not supported by AdGuard Content Blocker. "},{"title":"$url​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#non-basic-url-modifier","content":"$url modifier limits the rule application area to URLs matching the specified mask. Syntax url = pattern  where pattern is pretty much the same as pattern of the basic rules assuming that some characters must be escaped. The special characters and regular expressions are supported as well. Examples [$url=||example.com/content/*]##div.textad hides a div with the class textad at addresses like https://example.com/content/article.html and even https://subdomain.example.com/content/article.html.[$url=||example.org^]###adblock hides an element with attribute id equal to adblock at example.org and its subdomains.[$url=/\\[a-z\\]+\\\\.example\\\\.com^/]##.textad hides div elements of the class textad for all domains matching the regular expression [a-z]+\\.example\\.com^. Compatibility Rules with the $url modifier are supported by AdGuard for Windows, Mac, and Android with CoreLibs v1.11 or later. "},{"title":"Information for filters maintainers​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#information-for-filters-maintainers","content":"If you maintain a third-party filter that is known to AdGuard, you might be interested in the information presented in this section. Please note that hints will be applied to registered filters only. The filter is considered to be registered and known by AdGuard, if it is present in the known filters index. If you want your filter to be registered, please file an issue to AdguardFilters repo. "},{"title":"Preprocessor directives​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#preprocessor-directives","content":"We provide preprocessor directives that can be used by filters maintainers to improve compatibility with different ad blockers and provide: including a fileapplying rules conditionally by ad blocker typecontent blocker specifying for rules applying in Safari 注意 Any mistake in a preprocessor directive will lead to AdGuard failing the filter update in the same way as if the filter URL was unavailable. Preprocessor directives can be used in the user rules or in the custom filters. Including a file​ The !#include directive allows to include contents of a specified file into the filter. It supports only files from the same origin to make sure that the filter maintainer is in control of the specified file. The included file can also contain pre- directives (even other !#include directives). Ad blockers should consider the case of recursive !#include and implement a protection mechanism. Syntax !#include file_path  where file_path is a same origin absolute or relative file path to be included. The files must originate from the same domain but may be located in a different folder. If included file is not found or unavailable, the whole filter update should fail. Same-origin limitation should be disabled for local custom filters. Examples Filter URL: https://example.org/path/filter.txt ! Valid (same origin): !#include https://example.org/path/includedfile.txt ! ! Valid (relative path): !#include /includedfile.txt !#include ../path2/includedfile.txt ! ! Invalid (another origin): !#include https://domain.com/path/includedfile.txt  Conditions​ Filters maintainers can use conditions to supply different rules depending on the ad blocker type. A conditional directive beginning with an !#if directive must explicitly be terminated with an !#endif directive. Conditions support all basic logical operators. There are two possible scenarios: When an ad blocker encounters an !#if directive and no !#else directive, it will compile the code between !#if and !#endif directives only if the specified condition is true. If there is an !#else directive, the code between !#if and !#else will be compiled if the condition is true; otherwise, the code between !#else and !#endif will be compiled. 注意 Whitespaces matter. !#if is a valid directive, while !# if is not. Syntax !#if (conditions) rules_list !#endif  或者 !#if (conditions) true_conditions_rules_list !#else false_conditions_rules_list !#endif  where: !#if (conditions) — start of the block when conditions are trueconditions — just like in some popular programming languages, preprocessor conditions are based on constants declared by ad blockers. Authors of ad blockers define on their own what exact constants they declare. Possible values: adguard always declared; shows maintainers that this is one of AdGuard products; should be enough in 95% of casesproduct-specific constants for cases when you need a rule to work (or not work — then ! should be used before constant) in a specific product only: adguard_app_windows — AdGuard for Windowsadguard_app_mac — AdGuard for Macadguard_app_android — AdGuard for Androidadguard_app_ios — AdGuard for iOSadguard_ext_safari — AdGuard for Safariadguard_ext_chromium — AdGuard Browser Extension for Chrome (and chromium-based browsers, e.g. new Microsoft Edge)adguard_ext_firefox — AdGuard Browser Extension for Firefoxadguard_ext_edge — AdGuard Browser Extension for Edge Legacyadguard_ext_opera — AdGuard Browser Extension for Operaadguard_ext_android_cb — AdGuard Content Blocker for mobile Samsung and Yandex browsersext_ublock — special case; this one is declared when a uBlock version of a filter is compiled by the FiltersRegistrycap_html_filtering — products that support HTML filtering rules: AdGuard for Windows, AdGuard for Mac, and AdGuard for Android !#else — start of the block when conditions are falserules_list, true_conditions_rules_list, false_conditions_rules_list — lists of rules!#endif — end of the block Examples ! for all AdGuard products except AdGuard for Safari !#if (adguard &amp;&amp; !adguard_ext_safari) ||example.org^$third-party domain.com##div.ad !#endif  ! directives even can be combined !#if (adguard_app_android) !#include /androidspecific.txt !#endif  !#if (adguard &amp;&amp; !adguard_ext_safari) ! for all AdGuard products except AdGuard for Safari ||example.org^$third-party domain.com##div.ad !#else ! for AdGuard for Safari only ||subdomain.example.org^$third-party !#endif  Compatibility The !#else directive is supported by the FiltersDownloader v1.1.20 or later. It is already supported for filter lists compiled by the FiltersRegistry, but it still may not be supported by AdGuard products when adding a filter list with !#else as a custom one. The following products will support it in the mentioned versions or later: AdGuard for Windows, Mac, and Android with CoreLibs v1.13;AdGuard Browser Extension v4.2.208;AdGuard v1.11.16 for Safari. Safari affinity​ Safari's limit for each content blocker is 150,000 active rules. But in AdGuard for Safari and AdGuard for iOS, we've split the rules into 6 content blockers, thus increasing the rule limit to 900,000. Here is the composition of each content blocker: AdGuard General — Ad Blocking, Language-specificAdGuard Privacy — PrivacyAdGuard Social — Social Widgets, AnnoyancesAdGuard Security — SecurityAdGuard Other — OtherAdGuard Custom — Custom User rules and allowlist are added to every content blocker. 警告 The main disadvantage of using multiple content blockers is that rules from different blockers are applied independently. Blocking rules are not affected by this, but unblocking rules may cause problems. If a blocking rule is in one content blocker and an exception is in another, the exception will not work. Filter maintainers use !#safari_cb_affinity to define Safari content blocker affinity for the rules inside of the directive block. Syntax !#safari_cb_affinity(content_blockers) rules_list !#safari_cb_affinity  where: !#safari_cb_affinity(content_blockers) — start of the blockcontent_blockers — comma-separated list of content blockers. Possible values: general — AdGuard General content blockerprivacy — AdGuard Privacy content blockersocial — AdGuard Social content blockersecurity — AdGuard Security content blockerother — AdGuard Other content blockercustom — AdGuard Custom content blockerall — special keyword that means that the rules must be included into all content blockers rules_list — list of rules!#safari_cb_affinity — end of the block Examples ! to unhide specific element which is hidden by AdGuard Base filter: !#safari_cb_affinity(general) example.org#@#.adBanner !#safari_cb_affinity  ! to allowlist basic rule from AdGuard Tracking Protection filter: !#safari_cb_affinity(privacy) @@||example.org^ !#safari_cb_affinity  "},{"title":"Hints​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#hints","content":"&quot;Hint&quot; is a special comment, instruction to the filters compiler used on the server side (see FiltersRegistry). Syntax !+ HINT_NAME1(PARAMS) HINT_NAME2(PARAMS)  Multiple hints can be applied. NOT_OPTIMIZED hint​ For each filter, AdGuard compiles two versions: full and optimized. Optimized version is much more lightweight and does not contain rules which are not used at all or used rarely. Rules usage frequency comes from the collected filter rules statistics. But filters optimization is based on more than that — some filters have specific configuration. This is how it looks like for Base filter: &quot;filter&quot;: AdGuard Base filter, &quot;percent&quot;: 30, &quot;minPercent&quot;: 20, &quot;maxPercent&quot;: 40, &quot;strict&quot;: true  where: filter — filter identifierpercent — expected optimization percent ~= (rules count in optimized filter) / (rules count in original filter) * 100minPercent — lower bound of percent valuemaxPercent — upper bound of percent valuestrict — if percent &lt; minPercent OR percent &gt; maxPercent and strict mode is on then filter compilation should fail, otherwise original rules must be used In other words, percent is the &quot;compression level&quot;. For instance, for the Base filter it is configured to 40%. It means that optimization algorithm should strip 60% of rules. Eventually, here are the two versions of the Base filter for AdGuard Browser Extension: full: https://filters.adtidy.org/extension/chromium/filters/2.txtoptimized: https://filters.adtidy.org/extension/chromium/filters/2_optimized.txt If you want to add a rule which should not be removed at optimization use the NOT_OPTIMIZED hint: !+ NOT_OPTIMIZED ||example.org^  And this rule will not be optimized only for AdGuard for Android: !+ NOT_OPTIMIZED PLATFORM(android) ||example.org^  PLATFORM and NOT_PLATFORM hints​ Used to specify the platforms to apply the rules. List of existing platforms and links to Base filter, for example, for each of them: windows — AdGuard for Windows — https://filters.adtidy.org/windows/filters/2.txt mac — AdGuard for Mac — https://filters.adtidy.org/mac_v2/filters/2.txt android — AdGuard for Android — https://filters.adtidy.org/android/filters/2.txt ios — AdGuard for iOS — https://filters.adtidy.org/ios/filters/2.txt ext_chromium — AdGuard Browser Extension for Chrome — https://filters.adtidy.org/extension/chromium/filters/2.txt ext_chromium_mv3 — AdGuard Browser Extension for Chrome MV3 — https://filters.adtidy.org/extension/chromium-mv3/filters/2.txt ext_ff — AdGuard Browser Extension for Firefox — https://filters.adtidy.org/extension/firefox/filters/2.txt ext_edge — AdGuard Browser Extension for Edge — https://filters.adtidy.org/extension/edge/filters/2.txt ext_opera — AdGuard Browser Extension for Opera — https://filters.adtidy.org/extension/opera/filters/2.txt ext_safari — AdGuard for Safari — https://filters.adtidy.org/extension/safari/filters/2.txt ext_android_cb — AdGuard Content Blocker — https://filters.adtidy.org/extension/android-content-blocker/filters/2.txt ext_ublock — uBlock Origin — https://filters.adtidy.org/extension/ublock/filters/2.txt Examples This rule will be available only in AdGuard for Windows, Mac, Android: !+ PLATFORM(windows,mac,android) ||example.org^  Except for AdGuard for Safari, AdGuard Content Blocker, and AdGuard for iOS, this rule is available on all platforms: !+ NOT_PLATFORM(ext_safari, ext_android_cb, ios) ||example.org^  "},{"title":"How to debug filtering rules​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#how-to-debug-filtering-rules","content":"It may be possible to create simple filtering rules &quot;in your head&quot; but for anything even slightly more complicated you will need additional tools to debug and iterate them. There are tools to assist you with that. You can use DevTools in Chrome and its analogs in other browsers but most AdGuard products provide another one — Filtering log. "},{"title":"Filtering log​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#filtering-log","content":"Filtering log is an advanced tool that will be helpful mostly to filter developers. It lists all web requests that pass through AdGuard, gives you exhaustive information on each of them, offers multiple sorting options, and has other useful features. Depending on which AdGuard product you are using, Filtering log can be located in different places. In AdGuard for Windows, you can find it in the Ad Blocker tab or via the tray menuIn AdGuard for Mac, it is located in Settings → Advanced → Filtering logIn AdGuard for Android, you can find it under Statistics → Recent activity. Recent activity can also be accessed from the AssistantIn AdGuard Browser Extension, it is accessible from the Miscellaneous settings tab or by right-clicking the extension icon. Only Chromium- and Firefox-based web browsers show applied element hiding rules (including CSS, ExtCSS) and JS rules and scriptlets in their Filtering logs 注意 In AdGuard for iOS and AdGuard for Safari, Filtering log does not exist because of the way content blockers are implemented in Safari. AdGuard does not see the web requests and therefore cannot display them. "},{"title":"Selectors debugging mode​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#selectors-debug-mode","content":"Sometimes, you might need to check the performance of a given selector or a stylesheet. In order to do it without interacting with JavaScript directly, you can use a special debug style property. When ExtendedCss meets this property, it enables the debugging mode either for a single selector or for all selectors, depending on the debug value. Open the browser console while on a web page to see the timing statistics for selector(s) that were applied there. Debugging mode displays the following stats as object where each of the debugged selectors are keys, and value is an object with such properties: Always printed: selectorParsed — text of eventually parsed selectortimings — list of DOM nodes matched by the selector appliesCount — total number of times that the selector has been applied on the pageappliesTimings — time that it took to apply the selector on the page, for each of the instances that it has been applied (in milliseconds)meanTiming — mean time that it took to apply the selector on the pagestandardDeviation — standard deviationtimingsSum — total time it took to apply the selector on the page across all instances Printed only for remove pseudos: removed — flag to signal if elements were removed Printed if elements are not removed: matchedElements — list of DOM nodes matched by the selectorstyleApplied — parsed rule style declaration related to the selector Examples Debugging a single selector: When the value of the debug property is true, only information about this selector will be shown in the browser console. #$?#.banner { display: none; debug: true; }  Enabling global debug: When the value of the debug property is global, the console will display information about all extended CSS selectors that have matches on the current page, for all the rules from any of the enabled filters. #$?#.banner { display: none; debug: global; }  Testing extended selectors without AdGuard ExtendedCss can be executed on any page without using any AdGuard product. In order to do that you should copy and execute the following code in a browser console: !function(e,t,d){C=e.createElement(t),C.src=d,C.onload=function(){alert(&quot;ExtendedCss loaded successfully&quot;)},s=e.getElementsByTagName(t)[0],s?s.parentNode.insertBefore(C,s):(h=e.getElementsByTagName(&quot;head&quot;)[0],h.appendChild(C))}(document,&quot;script&quot;,&quot;https://AdguardTeam.github.io/ExtendedCss/extended-css.min.js&quot;);  Alternatively, install the ExtendedCssDebugger userscript. Now you can now use the ExtendedCss from global scope, and run its method query() as Document.querySelectorAll(). Examples const selector = 'div.block:has=(.header:matches-css(after, content: Ads))'; // array of HTMLElements matched the `selector` is to be returned ExtendedCss.query(selector);  "},{"title":"Debugging scriptlets​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#debug-scriptlets","content":"If you are using AdGuard Browser Extension and want to debug a scriptlet or a trusted scriptlet rule, you can get additional information by opening the Filtering log. In that case, scriptlets will switch to debug mode and there will be more information in the browser console. The following scriptlets are especially developed for debug purposes: debug-current-inline-scriptdebug-on-property-readdebug-on-property-writelog-addEventListenerlog-on-stack-tracelog-evallog The following scriptlets also may be used for debug purposes: json-pruneprevent-fetchprevent-requestAnimationFrameprevent-setIntervalprevent-setTimeoutprevent-window-open with specified replacement parameterprevent-xhrtrusted-replace-fetch-responsetrusted-replace-xhr-response "},{"title":"Compatibility tables legend​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#compatibility-tables-legend","content":""},{"title":"Product shortcuts​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#what-product","content":"CoreLibs apps — AdGuard for Windows, AdGuard for Mac, and AdGuard for AndroidAdGuard for Chromium — AdGuard Browser Extension for Chrome and other Chromium-based browsers such as Microsoft Edge, OperaAdGuard for Firefox — AdGuard Browser Extension for FirefoxAdGuard for iOS — AdGuard for iOS and AdGuard Pro for iOS (for mobile Safari browser)AdGuard for Safari — AdGuard for desktop Safari browser AdGuard Content Blocker — Content Blocker for Android mobile browsers: Samsung Internet and Yandex Browser "},{"title":"Compatibility shortcuts​","type":1,"pageTitle":"How to create your own ad filters","url":"general/ad-filtering/create-own-filters/#what-compatibility","content":"注意 ✅ — fully supported✅ * — supported, but reliability may vary or limitations may occur; check the modifier description for more details🧩 — may already be implemented in nightly or beta versions but is not yet supported in release versions⏳ — feature that has been implemented or is planned to be implemented but is not yet available in any product❌ — not supported👎 — deprecated; still supported but will be removed in the future🚫 — removed and no longer supported "}]